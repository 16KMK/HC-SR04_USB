
HC-SR04_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdcc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800bee0  0800bee0  0000cee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d0  0800c2d0  0000e354  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2d0  0800c2d0  0000d2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d8  0800c2d8  0000e354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2dc  0800c2dc  0000d2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800c2e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  20000354  0800c634  0000e354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016cc  0800c634  0000e6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ce0  00000000  00000000  0000e37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003506  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00023568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  00024650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0a3  00000000  00000000  00025307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001537f  00000000  00000000  000403aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee15  00000000  00000000  00055729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e453e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f4  00000000  00000000  000e4584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e9b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bec4 	.word	0x0800bec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	0800bec4 	.word	0x0800bec4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <hw_trigger>:
HCSR04_t hc =
		{ .Hardware_Interface = { .Trigger = hw_trigger, .GetEchoPin =
				hw_read_echo, .counter_start = Timer_Start, .counter_stop =
				Timer_Stop } };

void hw_trigger() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	// Set TRIG pin high
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // Assuming PC14 is TRIG
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <hw_trigger+0x24>)
 8000f4e:	f000 fed2 	bl	8001cf6 <HAL_GPIO_WritePin>

	// Delay 10 microseconds
	hw_us_delay(10);
 8000f52:	200a      	movs	r0, #10
 8000f54:	f000 f816 	bl	8000f84 <hw_us_delay>

	// Set TRIG pin low
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <hw_trigger+0x24>)
 8000f5e:	f000 feca 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010800 	.word	0x40010800

08000f6c <hw_read_echo>:

uint8_t hw_read_echo() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN); //ECHO_PIN: 1 for high and 0 for low
 8000f70:	2101      	movs	r1, #1
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <hw_read_echo+0x14>)
 8000f74:	f000 fea8 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010800 	.word	0x40010800

08000f84 <hw_us_delay>:

uint8_t hw_us_delay(uint8_t microseconds_delay) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	// Reset the timer counter to 0
	htim1.Instance->CNT = 0; //   	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <hw_us_delay+0x54>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24

	// Start the timer

	uint8_t ok = HAL_TIM_Base_Start(&htim1);
 8000f96:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <hw_us_delay+0x54>)
 8000f98:	f003 f90a 	bl	80041b0 <HAL_TIM_Base_Start>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

	if (ok != HAL_OK) {
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <hw_us_delay+0x26>
		return 0; //failed to start timer
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e011      	b.n	8000fce <hw_us_delay+0x4a>
	}

	// Wait for the required delay
	while (htim1.Instance->CNT < microseconds_delay)
 8000faa:	bf00      	nop
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <hw_us_delay+0x54>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f9      	bcc.n	8000fac <hw_us_delay+0x28>
		;

	// stop the timer
	ok = HAL_TIM_Base_Stop(&htim1);
 8000fb8:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <hw_us_delay+0x54>)
 8000fba:	f003 f943 	bl	8004244 <HAL_TIM_Base_Stop>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
	if (ok != HAL_OK) {
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <hw_us_delay+0x48>
		return 0; //failed to stop timer
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e000      	b.n	8000fce <hw_us_delay+0x4a>
	}
	return 1; // success
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000370 	.word	0x20000370

08000fdc <Timer_Start>:

void Timer_Start() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <Timer_Start+0x10>)
 8000fe2:	f003 f8e5 	bl	80041b0 <HAL_TIM_Base_Start>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000370 	.word	0x20000370

08000ff0 <Timer_Stop>:

uint16_t Timer_Stop() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <Timer_Stop+0x18>)
 8000ff6:	f003 f925 	bl	8004244 <HAL_TIM_Base_Stop>
	return __HAL_TIM_GET_COUNTER(&htim1);
 8000ffa:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <Timer_Stop+0x18>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	b29b      	uxth	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000370 	.word	0x20000370

0800100c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	@ 0x38
 8001010:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001012:	f000 fb41 	bl	8001698 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001016:	f000 f855 	bl	80010c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800101a:	f000 f921 	bl	8001260 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800101e:	f007 fc63 	bl	80088e8 <MX_USB_DEVICE_Init>
	MX_TIM1_Init();
 8001022:	f000 f8a9 	bl	8001178 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	GPIO_InitTypeDef G = { .Pin = TRIG_PIN, .Mode = GPIO_MODE_OUTPUT_PP,
 8001026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800103c:	2302      	movs	r3, #2
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
			.Speed = GPIO_SPEED_FREQ_LOW };

	HAL_GPIO_Init(TRIG_PORT, &G);
 8001040:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001044:	4619      	mov	r1, r3
 8001046:	481b      	ldr	r0, [pc, #108]	@ (80010b4 <main+0xa8>)
 8001048:	f000 fcba 	bl	80019c0 <HAL_GPIO_Init>

	G.Pin = ECHO_PIN;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	@ 0x28
	G.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
	G.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ECHO_PORT, &G);
 8001058:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105c:	4619      	mov	r1, r3
 800105e:	4815      	ldr	r0, [pc, #84]	@ (80010b4 <main+0xa8>)
 8001060:	f000 fcae 	bl	80019c0 <HAL_GPIO_Init>

	float dist = 0;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
	char usb[32];
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HC_SR04_ReadDistance(&hc, &dist);
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <main+0xac>)
 8001072:	f000 fadb 	bl	800162c <HC_SR04_ReadDistance>
		sprintf(usb, "Distance=%.2f cm\r\n", dist * 100);
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	4910      	ldr	r1, [pc, #64]	@ (80010bc <main+0xb0>)
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe12 	bl	8000ca4 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9d0 	bl	8000428 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	1d38      	adds	r0, r7, #4
 800108e:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <main+0xb4>)
 8001090:	f008 fde4 	bl	8009c5c <siprintf>
		CDC_Transmit_FS((uint8_t*) usb, strlen(usb));
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f85a 	bl	8000150 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 fcdd 	bl	8008a64 <CDC_Transmit_FS>
		HAL_Delay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f000 fb56 	bl	800175c <HAL_Delay>
		HC_SR04_ReadDistance(&hc, &dist);
 80010b0:	bf00      	nop
 80010b2:	e7da      	b.n	800106a <main+0x5e>
 80010b4:	40010800 	.word	0x40010800
 80010b8:	20000000 	.word	0x20000000
 80010bc:	42c80000 	.word	0x42c80000
 80010c0:	0800bee0 	.word	0x0800bee0

080010c4 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	@ 0x50
 80010c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ce:	2228      	movs	r2, #40	@ 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f008 fe25 	bl	8009d22 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001110:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fb64 	bl	80037e8 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x66>
		Error_Handler();
 8001126:	f000 f8e5 	bl	80012f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fdd0 	bl	8003cec <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x92>
		Error_Handler();
 8001152:	f000 f8cf 	bl	80012f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001156:	2310      	movs	r3, #16
 8001158:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f002 ff1f 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xac>
		Error_Handler();
 800116c:	f000 f8c2 	bl	80012f4 <Error_Handler>
	}
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	@ 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011a4:	4a2d      	ldr	r2, [pc, #180]	@ (800125c <MX_TIM1_Init+0xe4>)
 80011a6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011aa:	2247      	movs	r2, #71	@ 0x47
 80011ac:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ba:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ce:	4822      	ldr	r0, [pc, #136]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011d0:	f002 ff9e 	bl	8004110 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x66>
		Error_Handler();
 80011da:	f000 f88b 	bl	80012f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4619      	mov	r1, r3
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011ec:	f003 f944 	bl	8004478 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x82>
		Error_Handler();
 80011f6:	f000 f87d 	bl	80012f4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011fa:	4817      	ldr	r0, [pc, #92]	@ (8001258 <MX_TIM1_Init+0xe0>)
 80011fc:	f003 f848 	bl	8004290 <HAL_TIM_IC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x92>
		Error_Handler();
 8001206:	f000 f875 	bl	80012f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	480f      	ldr	r0, [pc, #60]	@ (8001258 <MX_TIM1_Init+0xe0>)
 800121a:	f003 fc07 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001224:	f000 f866 	bl	80012f4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <MX_TIM1_Init+0xe0>)
 8001240:	f003 f87e 	bl	8004340 <HAL_TIM_IC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xd6>
		Error_Handler();
 800124a:	f000 f853 	bl	80012f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000370 	.word	0x20000370
 800125c:	40012c00 	.word	0x40012c00

08001260 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <MX_GPIO_Init+0x8c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <MX_GPIO_Init+0x8c>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_GPIO_Init+0x8c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <MX_GPIO_Init+0x8c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <MX_GPIO_Init+0x8c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_GPIO_Init+0x8c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_GPIO_Init+0x90>)
 80012aa:	f000 fd24 	bl	8001cf6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <MX_GPIO_Init+0x90>)
 80012c2:	f000 fb7d 	bl	80019c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_GPIO_Init+0x90>)
 80012de:	f000 fb6f 	bl	80019c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800

080012f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_TIM_Base_MspInit+0x74>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d124      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 800138a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_TIM_Base_MspInit+0x78>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <HAL_TIM_Base_MspInit+0x7c>)
 80013ca:	f000 faf9 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <NMI_Handler+0x4>

080013ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <MemManage_Handler+0x4>

080013fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <UsageFault_Handler+0x4>

0800140c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f976 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001442:	f000 fd8c 	bl	8001f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20001088 	.word	0x20001088

08001450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <_kill>:

int _kill(int pid, int sig)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001468:	f008 fcae 	bl	8009dc8 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	2216      	movs	r2, #22
 8001470:	601a      	str	r2, [r3, #0]
  return -1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_exit>:

void _exit (int status)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001486:	f04f 31ff 	mov.w	r1, #4294967295
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffe7 	bl	800145e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <_exit+0x12>

08001494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00a      	b.n	80014bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a6:	f3af 8000 	nop.w
 80014aa:	4601      	mov	r1, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbf0      	blt.n	80014a6 <_read+0x12>
  }

  return len;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e009      	b.n	80014f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf1      	blt.n	80014e0 <_write+0x12>
  }
  return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_close>:

int _close(int file)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800152c:	605a      	str	r2, [r3, #4]
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <_isatty>:

int _isatty(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f008 fc16 	bl	8009dc8 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20005000 	.word	0x20005000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200003b8 	.word	0x200003b8
 80015d0:	200016d0 	.word	0x200016d0

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fff8 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e6:	490c      	ldr	r1, [pc, #48]	@ (8001618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015fc:	4c09      	ldr	r4, [pc, #36]	@ (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f008 fbe3 	bl	8009dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fcfd 	bl	800100c <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800161c:	0800c2e0 	.word	0x0800c2e0
  ldr r2, =_sbss
 8001620:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001624:	200016cc 	.word	0x200016cc

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HC_SR04_ReadDistance>:
#include "HC-SR04.h"

#define SOUND_SPEED 343 //speed of sound = 343 m/s

void HC_SR04_ReadDistance(HCSR04_t *sensor, float *Distance) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	// 1 Trigger
	sensor->Hardware_Interface.Trigger();
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4798      	blx	r3

	// 2 wait for rising edge
	while (sensor->Hardware_Interface.GetEchoPin() == 0)
 800163c:	bf00      	nop
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4798      	blx	r3
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f9      	beq.n	800163e <HC_SR04_ReadDistance+0x12>
		;

	// 3 start timer
	sensor->Hardware_Interface.counter_start();
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	4798      	blx	r3

	// 4 wait for falling edge
	while (sensor->Hardware_Interface.GetEchoPin() == 1)
 8001650:	bf00      	nop
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4798      	blx	r3
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d0f9      	beq.n	8001652 <HC_SR04_ReadDistance+0x26>
		;

	// 5 stop timer
	uint16_t Counts = sensor->Hardware_Interface.counter_stop();
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
 8001666:	81fb      	strh	r3, [r7, #14]

	// 6 calculate distance
	*Distance = (float) (Counts * SOUND_SPEED) / (2 * 1000000); //distance in centimeter
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f240 1257 	movw	r2, #343	@ 0x157
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fac2 	bl	8000bfc <__aeabi_i2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4906      	ldr	r1, [pc, #24]	@ (8001694 <HC_SR04_ReadDistance+0x68>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fbc5 	bl	8000e0c <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	49f42400 	.word	0x49f42400

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_Init+0x28>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_Init+0x28>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f947 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe24 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f95f 	bl	80019a6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f927 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000010 	.word	0x20000010
 800171c:	20000018 	.word	0x20000018
 8001720:	20000014 	.word	0x20000014

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_IncTick+0x1c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_IncTick+0x20>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a03      	ldr	r2, [pc, #12]	@ (8001744 <HAL_IncTick+0x20>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000018 	.word	0x20000018
 8001744:	200003bc 	.word	0x200003bc

08001748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b02      	ldr	r3, [pc, #8]	@ (8001758 <HAL_GetTick+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	200003bc 	.word	0x200003bc

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fff0 	bl	8001748 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffe0 	bl	8001748 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000018 	.word	0x20000018

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	@ (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	@ 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e169      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8158 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 80019fc:	4a98      	ldr	r2, [pc, #608]	@ (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d875      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a02:	4a98      	ldr	r2, [pc, #608]	@ (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d058      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a08:	4a96      	ldr	r2, [pc, #600]	@ (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a0e:	4a96      	ldr	r2, [pc, #600]	@ (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d052      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a14:	4a94      	ldr	r2, [pc, #592]	@ (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d869      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a1a:	4a94      	ldr	r2, [pc, #592]	@ (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04c      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a20:	4a92      	ldr	r2, [pc, #584]	@ (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d863      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a26:	4a92      	ldr	r2, [pc, #584]	@ (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d046      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a2c:	4a90      	ldr	r2, [pc, #576]	@ (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d85d      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d82a      	bhi.n	8001a8c <HAL_GPIO_Init+0xcc>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d859      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <HAL_GPIO_Init+0x80>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001aa7 	.word	0x08001aa7
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001aef 	.word	0x08001aef
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	4a79      	ldr	r2, [pc, #484]	@ (8001c74 <HAL_GPIO_Init+0x2b4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e029      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e024      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01f      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e01a      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e013      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e009      	b.n	8001af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          break;
 8001aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	@ 0xff
 8001af4:	d801      	bhi.n	8001afa <HAL_GPIO_Init+0x13a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_Init+0x13e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	@ 0xff
 8001b04:	d802      	bhi.n	8001b0c <HAL_GPIO_Init+0x14c>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x152>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	210f      	movs	r1, #15
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80b1 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a4c      	ldr	r2, [pc, #304]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b58:	4a48      	ldr	r2, [pc, #288]	@ (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	@ (8001c80 <HAL_GPIO_Init+0x2c0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	@ (8001c84 <HAL_GPIO_Init+0x2c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3d      	ldr	r2, [pc, #244]	@ (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1e0>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbe:	492f      	ldr	r1, [pc, #188]	@ (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	492c      	ldr	r1, [pc, #176]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4928      	ldr	r1, [pc, #160]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c00:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4922      	ldr	r1, [pc, #136]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	491e      	ldr	r1, [pc, #120]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4918      	ldr	r1, [pc, #96]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4914      	ldr	r1, [pc, #80]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	490e      	ldr	r1, [pc, #56]	@ (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e021      	b.n	8001ca2 <HAL_GPIO_Init+0x2e2>
 8001c5e:	bf00      	nop
 8001c60:	10320000 	.word	0x10320000
 8001c64:	10310000 	.word	0x10310000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10210000 	.word	0x10210000
 8001c70:	10120000 	.word	0x10120000
 8001c74:	10110000 	.word	0x10110000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010800 	.word	0x40010800
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40011400 	.word	0x40011400
 8001c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4909      	ldr	r1, [pc, #36]	@ (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae8e 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	@ 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0e8      	b.n	8001f0a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f006 ffbd 	bl	8008ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fee2 	bl	8004b2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	f002 feb8 	bl	8004ae8 <USB_CoreInit>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0bf      	b.n	8001f0a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 fee6 	bl	8004b62 <USB_SetCurrentMode>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b0      	b.n	8001f0a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e03e      	b.n	8001e2c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3311      	adds	r3, #17
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3313      	adds	r3, #19
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3320      	adds	r3, #32
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3324      	adds	r3, #36	@ 0x24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3bb      	bcc.n	8001dae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e044      	b.n	8001ec6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3b5      	bcc.n	8001e3c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eda:	f002 fe4e 	bl	8004b7a <USB_DevInit>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e00c      	b.n	8001f0a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 f8cd 	bl	80070a2 <USB_DevDisconnect>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_Start+0x16>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e016      	b.n	8001f56 <HAL_PCD_Start+0x44>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fde4 	bl	8004b02 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f007 f938 	bl	80091b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f005 f8a1 	bl	800708e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b088      	sub	sp, #32
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 f8a3 	bl	80070b6 <USB_ReadInterrupts>
 8001f70:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fb1a 	bl	80025b6 <PCD_EP_ISR_Handler>

    return;
 8001f82:	e119      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d013      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f006 ff0b 	bl	8008dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fac:	2100      	movs	r1, #0
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f905 	bl	80021be <HAL_PCD_SetAddress>

    return;
 8001fb4:	e100      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fd8:	e0ee      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ffc:	e0dc      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d027      	beq.n	8002058 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	b292      	uxth	r2, r2
 800201c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0208 	bic.w	r2, r2, #8
 8002032:	b292      	uxth	r2, r2
 8002034:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f006 fefb 	bl	8008e34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002050:	b292      	uxth	r2, r2
 8002052:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002056:	e0af      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8083 	beq.w	800216a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
 8002068:	e010      	b.n	800208c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	7ffb      	ldrb	r3, [r7, #31]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	b292      	uxth	r2, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	3320      	adds	r3, #32
 8002080:	443b      	add	r3, r7
 8002082:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	3301      	adds	r3, #1
 800208a:	77fb      	strb	r3, [r7, #31]
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	2b07      	cmp	r3, #7
 8002090:	d9eb      	bls.n	800206a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020c2:	bf00      	nop
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f6      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	77fb      	strb	r3, [r7, #31]
 80020f2:	e00f      	b.n	8002114 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4611      	mov	r1, r2
 80020fc:	7ffa      	ldrb	r2, [r7, #31]
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	440a      	add	r2, r1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3320      	adds	r3, #32
 8002106:	443b      	add	r3, r7
 8002108:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800210c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800210e:	7ffb      	ldrb	r3, [r7, #31]
 8002110:	3301      	adds	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]
 8002114:	7ffb      	ldrb	r3, [r7, #31]
 8002116:	2b07      	cmp	r3, #7
 8002118:	d9ec      	bls.n	80020f4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0208 	orr.w	r2, r2, #8
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002144:	b292      	uxth	r2, r2
 8002146:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0204 	orr.w	r2, r2, #4
 800215c:	b292      	uxth	r2, r2
 800215e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f006 fe4c 	bl	8008e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002168:	e026      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00f      	beq.n	8002194 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002186:	b292      	uxth	r2, r2
 8002188:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f006 fe0a 	bl	8008da6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002192:	e011      	b.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021b6:	bf00      	nop
  }
}
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_SetAddress+0x1a>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e012      	b.n	80021fe <HAL_PCD_SetAddress+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 ff3a 	bl	8007068 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	4608      	mov	r0, r1
 8002210:	4611      	mov	r1, r2
 8002212:	461a      	mov	r2, r3
 8002214:	4603      	mov	r3, r0
 8002216:	70fb      	strb	r3, [r7, #3]
 8002218:	460b      	mov	r3, r1
 800221a:	803b      	strh	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da0e      	bge.n	800224a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 0207 	and.w	r2, r3, #7
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	3310      	adds	r3, #16
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
 8002248:	e00e      	b.n	8002268 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 0207 	and.w	r2, r3, #7
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002274:	883a      	ldrh	r2, [r7, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002280:	78bb      	ldrb	r3, [r7, #2]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d102      	bne.n	800228c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_EP_Open+0x94>
 8002296:	2302      	movs	r3, #2
 8002298:	e00e      	b.n	80022b8 <HAL_PCD_EP_Open+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fc83 	bl	8004bb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da0e      	bge.n	80022f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 0207 	and.w	r2, r3, #7
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	3310      	adds	r3, #16
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	705a      	strb	r2, [r3, #1]
 80022f0:	e00e      	b.n	8002310 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0207 	and.w	r2, r3, #7
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_EP_Close+0x6a>
 8002326:	2302      	movs	r3, #2
 8002328:	e00e      	b.n	8002348 <HAL_PCD_EP_Close+0x88>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fffb 	bl	8005334 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	460b      	mov	r3, r1
 800235e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	b2da      	uxtb	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f9b2 	bl	800570c <USB_EPStartXfer>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0207 	and.w	r2, r3, #7
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	460b      	mov	r3, r1
 80023ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	3310      	adds	r3, #16
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2201      	movs	r2, #1
 800242a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	b2da      	uxtb	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f964 	bl	800570c <USB_EPStartXfer>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	7912      	ldrb	r2, [r2, #4]
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e04c      	b.n	8002506 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800246c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da0e      	bge.n	8002492 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 0207 	and.w	r2, r3, #7
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	3310      	adds	r3, #16
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	705a      	strb	r2, [r3, #1]
 8002490:	e00c      	b.n	80024ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_PCD_EP_SetStall+0x7e>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e01c      	b.n	8002506 <HAL_PCD_EP_SetStall+0xb8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 fcc7 	bl	8006e6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f004 fdec 	bl	80070d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	7912      	ldrb	r2, [r2, #4]
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e040      	b.n	80025ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da0e      	bge.n	8002552 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 0207 	and.w	r2, r3, #7
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	3310      	adds	r3, #16
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	705a      	strb	r2, [r3, #1]
 8002550:	e00e      	b.n	8002570 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0207 	and.w	r2, r3, #7
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_PCD_EP_ClrStall+0x82>
 800258c:	2302      	movs	r3, #2
 800258e:	e00e      	b.n	80025ae <HAL_PCD_EP_ClrStall+0xa0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fcb5 	bl	8006f0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b096      	sub	sp, #88	@ 0x58
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025be:	e3bb      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80025da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8175 	bne.w	80028ce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d14e      	bne.n	800268e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002600:	81fb      	strh	r3, [r7, #14]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002610:	b29b      	uxth	r3, r3
 8002612:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3310      	adds	r3, #16
 8002618:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	441a      	add	r2, r3
 8002650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002652:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002654:	2100      	movs	r1, #0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f006 fb8b 	bl	8008d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7b5b      	ldrb	r3, [r3, #13]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8368 	beq.w	8002d38 <PCD_EP_ISR_Handler+0x782>
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 8363 	bne.w	8002d38 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7b5b      	ldrb	r3, [r3, #13]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800267c:	b2da      	uxtb	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	735a      	strb	r2, [r3, #13]
 800268c:	e354      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002694:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d034      	beq.n	8002716 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	3306      	adds	r3, #6
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80026e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f004 fd42 	bl	8007174 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026fc:	4013      	ands	r3, r2
 80026fe:	823b      	strh	r3, [r7, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	8a3a      	ldrh	r2, [r7, #16]
 8002706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800270a:	b292      	uxth	r2, r2
 800270c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f006 fb02 	bl	8008d18 <HAL_PCD_SetupStageCallback>
 8002714:	e310      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002716:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800271a:	2b00      	cmp	r3, #0
 800271c:	f280 830c 	bge.w	8002d38 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29a      	uxth	r2, r3
 8002728:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800272c:	4013      	ands	r3, r2
 800272e:	83fb      	strh	r3, [r7, #30]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	8bfa      	ldrh	r2, [r7, #30]
 8002736:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800273a:	b292      	uxth	r2, r2
 800273c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	3306      	adds	r3, #6
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002768:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800276a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <PCD_EP_ISR_Handler+0x1f0>
 8002772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002780:	6959      	ldr	r1, [r3, #20]
 8002782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002784:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800278a:	b29b      	uxth	r3, r3
 800278c:	f004 fcf2 	bl	8007174 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	441a      	add	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800279e:	2100      	movs	r1, #0
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f006 facb 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 82bd 	bne.w	8002d38 <PCD_EP_ISR_Handler+0x782>
 80027be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80027c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027ca:	f000 82b5 	beq.w	8002d38 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b3e      	cmp	r3, #62	@ 0x3e
 8002804:	d91d      	bls.n	8002842 <PCD_EP_ISR_Handler+0x28c>
 8002806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
 800280e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <PCD_EP_ISR_Handler+0x26a>
 800281a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281c:	3b01      	subs	r3, #1
 800281e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29a      	uxth	r2, r3
 8002826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002828:	b29b      	uxth	r3, r3
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	b29b      	uxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283a:	b29a      	uxth	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	e026      	b.n	8002890 <PCD_EP_ISR_Handler+0x2da>
 8002842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <PCD_EP_ISR_Handler+0x2aa>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002858:	b29a      	uxth	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	e017      	b.n	8002890 <PCD_EP_ISR_Handler+0x2da>
 8002860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	647b      	str	r3, [r7, #68]	@ 0x44
 8002868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <PCD_EP_ISR_Handler+0x2c4>
 8002874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002876:	3301      	adds	r3, #1
 8002878:	647b      	str	r3, [r7, #68]	@ 0x44
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29a      	uxth	r2, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002882:	b29b      	uxth	r3, r3
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	b29b      	uxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b29a      	uxth	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800289c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a0:	827b      	strh	r3, [r7, #18]
 80028a2:	8a7b      	ldrh	r3, [r7, #18]
 80028a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80028a8:	827b      	strh	r3, [r7, #18]
 80028aa:	8a7b      	ldrh	r3, [r7, #18]
 80028ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028b0:	827b      	strh	r3, [r7, #18]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
 80028cc:	e234      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f280 80fc 	bge.w	8002ae4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002902:	4013      	ands	r3, r2
 8002904:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800291a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800291e:	b292      	uxth	r2, r2
 8002920:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002922:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293a:	7b1b      	ldrb	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d125      	bne.n	800298c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	3306      	adds	r3, #6
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800296c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8092 	beq.w	8002a9a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297c:	6959      	ldr	r1, [r3, #20]
 800297e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002980:	88da      	ldrh	r2, [r3, #6]
 8002982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002986:	f004 fbf5 	bl	8007174 <USB_ReadPMA>
 800298a:	e086      	b.n	8002a9a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800298c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d10a      	bne.n	80029aa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002998:	461a      	mov	r2, r3
 800299a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9d9 	bl	8002d54 <HAL_PCD_EP_DB_Receive>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80029a8:	e077      	b.n	8002a9a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80029da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d024      	beq.n	8002a52 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02e      	beq.n	8002a9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a42:	6959      	ldr	r1, [r3, #20]
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	891a      	ldrh	r2, [r3, #8]
 8002a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a4c:	f004 fb92 	bl	8007174 <USB_ReadPMA>
 8002a50:	e023      	b.n	8002a9a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	3306      	adds	r3, #6
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a90:	895a      	ldrh	r2, [r3, #10]
 8002a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a96:	f004 fb6d 	bl	8007174 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aa2:	441a      	add	r2, r3
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ab0:	441a      	add	r2, r3
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <PCD_EP_ISR_Handler+0x514>
 8002abe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d206      	bcs.n	8002ad8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f006 f933 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
 8002ad6:	e005      	b.n	8002ae4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fe14 	bl	800570c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8123 	beq.w	8002d38 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002af2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	3310      	adds	r3, #16
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	78db      	ldrb	r3, [r3, #3]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80a2 	bne.w	8002c90 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	7b1b      	ldrb	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8093 	beq.w	8002c82 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d046      	beq.n	8002bf6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6a:	785b      	ldrb	r3, [r3, #1]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d126      	bne.n	8002bbe <PCD_EP_ISR_Handler+0x608>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	4413      	add	r3, r2
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	011a      	lsls	r2, r3, #4
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	4413      	add	r3, r2
 8002b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	e061      	b.n	8002c82 <PCD_EP_ISR_Handler+0x6cc>
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d15d      	bne.n	8002c82 <PCD_EP_ISR_Handler+0x6cc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bda:	4413      	add	r3, r2
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	4413      	add	r3, r2
 8002be8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	e045      	b.n	8002c82 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d126      	bne.n	8002c52 <PCD_EP_ISR_Handler+0x69c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c18:	4413      	add	r3, r2
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	011a      	lsls	r2, r3, #4
 8002c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c24:	4413      	add	r3, r2
 8002c26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e017      	b.n	8002c82 <PCD_EP_ISR_Handler+0x6cc>
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d113      	bne.n	8002c82 <PCD_EP_ISR_Handler+0x6cc>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c68:	4413      	add	r3, r2
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f006 f872 	bl	8008d72 <HAL_PCD_DataInStageCallback>
 8002c8e:	e053      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d146      	bne.n	8002d2a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d907      	bls.n	8002ce4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce0:	619a      	str	r2, [r3, #24]
 8002ce2:	e002      	b.n	8002cea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f006 f83a 	bl	8008d72 <HAL_PCD_DataInStageCallback>
 8002cfe:	e01b      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d08:	441a      	add	r2, r3
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d16:	441a      	add	r2, r3
 8002d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fcf2 	bl	800570c <USB_EPStartXfer>
 8002d28:	e006      	b.n	8002d38 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f91b 	bl	8002f6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f6ff ac3b 	blt.w	80025c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3758      	adds	r7, #88	@ 0x58
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07e      	beq.n	8002e6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3302      	adds	r3, #2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d306      	bcc.n	8002dae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	8b7b      	ldrh	r3, [r7, #26]
 8002da6:	1ad2      	subs	r2, r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	619a      	str	r2, [r3, #24]
 8002dac:	e002      	b.n	8002db4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d123      	bne.n	8002e04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	833b      	strh	r3, [r7, #24]
 8002dd8:	8b3b      	ldrh	r3, [r7, #24]
 8002dda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002dde:	833b      	strh	r3, [r7, #24]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	8b3b      	ldrh	r3, [r7, #24]
 8002df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01f      	beq.n	8002e4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e28:	82fb      	strh	r3, [r7, #22]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	8afb      	ldrh	r3, [r7, #22]
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8087 	beq.w	8002f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6959      	ldr	r1, [r3, #20]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	891a      	ldrh	r2, [r3, #8]
 8002e62:	8b7b      	ldrh	r3, [r7, #26]
 8002e64:	f004 f986 	bl	8007174 <USB_ReadPMA>
 8002e68:	e07c      	b.n	8002f64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3306      	adds	r3, #6
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	8b7b      	ldrh	r3, [r7, #26]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d306      	bcc.n	8002eac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	8b7b      	ldrh	r3, [r7, #26]
 8002ea4:	1ad2      	subs	r2, r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	619a      	str	r2, [r3, #24]
 8002eaa:	e002      	b.n	8002eb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d123      	bne.n	8002f02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed4:	83fb      	strh	r3, [r7, #30]
 8002ed6:	8bfb      	ldrh	r3, [r7, #30]
 8002ed8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002edc:	83fb      	strh	r3, [r7, #30]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	441a      	add	r2, r3
 8002eec:	8bfb      	ldrh	r3, [r7, #30]
 8002eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11f      	bne.n	8002f4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f26:	83bb      	strh	r3, [r7, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	8bbb      	ldrh	r3, [r7, #28]
 8002f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f4c:	8b7b      	ldrh	r3, [r7, #26]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6959      	ldr	r1, [r3, #20]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	895a      	ldrh	r2, [r3, #10]
 8002f5e:	8b7b      	ldrh	r3, [r7, #26]
 8002f60:	f004 f908 	bl	8007174 <USB_ReadPMA>
    }
  }

  return count;
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b0a4      	sub	sp, #144	@ 0x90
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 81dd 	beq.w	8003342 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d907      	bls.n	8002fd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fc8:	1ad2      	subs	r2, r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	619a      	str	r2, [r3, #24]
 8002fce:	e002      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80b9 	bne.w	8003152 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d126      	bne.n	8003036 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	4413      	add	r3, r2
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	011a      	lsls	r2, r3, #4
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	4413      	add	r3, r2
 800300a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301a:	b29a      	uxth	r2, r3
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302e:	b29a      	uxth	r2, r3
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	801a      	strh	r2, [r3, #0]
 8003034:	e01a      	b.n	800306c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d116      	bne.n	800306c <HAL_PCD_EP_DB_Transmit+0xfe>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003052:	4413      	add	r3, r2
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	011a      	lsls	r2, r3, #4
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	4413      	add	r3, r2
 8003060:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	2200      	movs	r2, #0
 800306a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d126      	bne.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	011a      	lsls	r2, r3, #4
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	801a      	strh	r2, [r3, #0]
 80030c6:	e017      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d113      	bne.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	4413      	add	r3, r2
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	011a      	lsls	r2, r3, #4
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	4413      	add	r3, r2
 80030ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	2200      	movs	r2, #0
 80030f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f005 fe37 	bl	8008d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 82fc 	beq.w	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312a:	82fb      	strh	r3, [r7, #22]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	8afb      	ldrh	r3, [r7, #22]
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
 8003150:	e2da      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d021      	beq.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800318c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003194:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800319c:	b29b      	uxth	r3, r3
 800319e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	f040 82ae 	bne.w	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031b4:	441a      	add	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031c2:	441a      	add	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d30b      	bcc.n	80031ec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	621a      	str	r2, [r3, #32]
 80031ea:	e017      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003204:	e00a      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d165      	bne.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003238:	4413      	add	r3, r2
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	011a      	lsls	r2, r3, #4
 8003242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003244:	4413      	add	r3, r2
 8003246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800324a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800324c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	b29a      	uxth	r2, r3
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003260:	2b3e      	cmp	r3, #62	@ 0x3e
 8003262:	d91d      	bls.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800326c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_PCD_EP_DB_Transmit+0x310>
 8003278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327a:	3b01      	subs	r3, #1
 800327c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29a      	uxth	r2, r3
 8003284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003286:	b29b      	uxth	r3, r3
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	b29b      	uxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003298:	b29a      	uxth	r2, r3
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	e044      	b.n	800332a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <HAL_PCD_EP_DB_Transmit+0x350>
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	e035      	b.n	800332a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80032d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d4:	3301      	adds	r3, #1
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ec:	801a      	strh	r2, [r3, #0]
 80032ee:	e01c      	b.n	800332a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d118      	bne.n	800332a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330c:	4413      	add	r3, r2
 800330e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	011a      	lsls	r2, r3, #4
 8003316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003318:	4413      	add	r3, r2
 800331a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800331e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003324:	b29a      	uxth	r2, r3
 8003326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003328:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6959      	ldr	r1, [r3, #20]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	891a      	ldrh	r2, [r3, #8]
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333a:	b29b      	uxth	r3, r3
 800333c:	f003 fed5 	bl	80070ea <USB_WritePMA>
 8003340:	e1e2      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	3306      	adds	r3, #6
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003376:	429a      	cmp	r2, r3
 8003378:	d307      	bcc.n	800338a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	619a      	str	r2, [r3, #24]
 8003388:	e002      	b.n	8003390 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 80c0 	bne.w	800351a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d126      	bne.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033b6:	4413      	add	r3, r2
 80033b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	011a      	lsls	r2, r3, #4
 80033c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033c2:	4413      	add	r3, r2
 80033c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e01a      	b.n	8003426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d116      	bne.n	8003426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800340c:	4413      	add	r3, r2
 800340e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	011a      	lsls	r2, r3, #4
 8003416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003418:	4413      	add	r3, r2
 800341a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800341e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	677b      	str	r3, [r7, #116]	@ 0x74
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d12b      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003448:	4413      	add	r3, r2
 800344a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	011a      	lsls	r2, r3, #4
 8003452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003454:	4413      	add	r3, r2
 8003456:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800345a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800345e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346a:	b29a      	uxth	r2, r3
 800346c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003482:	b29a      	uxth	r2, r3
 8003484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e017      	b.n	80034bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d113      	bne.n	80034bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a2:	4413      	add	r3, r2
 80034a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	011a      	lsls	r2, r3, #4
 80034ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ae:	4413      	add	r3, r2
 80034b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034b8:	2200      	movs	r2, #0
 80034ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f005 fc55 	bl	8008d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 811a 	bne.w	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800350c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
 8003518:	e0f6      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d121      	bne.n	8003568 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800355c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800356e:	2b01      	cmp	r3, #1
 8003570:	f040 80ca 	bne.w	8003708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800357c:	441a      	add	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800358a:	441a      	add	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d30b      	bcc.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	621a      	str	r2, [r3, #32]
 80035b2:	e017      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80035bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035cc:	e00a      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d165      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x750>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003606:	4413      	add	r3, r2
 8003608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	011a      	lsls	r2, r3, #4
 8003610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003612:	4413      	add	r3, r2
 8003614:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800361a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003624:	b29a      	uxth	r2, r3
 8003626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003630:	d91d      	bls.n	800366e <HAL_PCD_EP_DB_Transmit+0x700>
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003648:	3b01      	subs	r3, #1
 800364a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800364c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29a      	uxth	r2, r3
 8003652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003654:	b29b      	uxth	r3, r3
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	b29b      	uxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	b29b      	uxth	r3, r3
 800365e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003666:	b29a      	uxth	r2, r3
 8003668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800366a:	801a      	strh	r2, [r3, #0]
 800366c:	e041      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800366e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003684:	b29a      	uxth	r2, r3
 8003686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e032      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800368c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80036a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a2:	3301      	adds	r3, #1
 80036a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e019      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d115      	bne.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	4413      	add	r3, r2
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	011a      	lsls	r2, r3, #4
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	895a      	ldrh	r2, [r3, #10]
 80036fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003702:	b29b      	uxth	r3, r3
 8003704:	f003 fcf1 	bl	80070ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800371e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003722:	82bb      	strh	r3, [r7, #20]
 8003724:	8abb      	ldrh	r3, [r7, #20]
 8003726:	f083 0310 	eor.w	r3, r3, #16
 800372a:	82bb      	strh	r3, [r7, #20]
 800372c:	8abb      	ldrh	r3, [r7, #20]
 800372e:	f083 0320 	eor.w	r3, r3, #32
 8003732:	82bb      	strh	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8abb      	ldrh	r3, [r7, #20]
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3790      	adds	r7, #144	@ 0x90
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003762:	b480      	push	{r7}
 8003764:	b087      	sub	sp, #28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	817b      	strh	r3, [r7, #10]
 8003770:	4613      	mov	r3, r2
 8003772:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	f003 0207 	and.w	r2, r3, #7
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	3310      	adds	r3, #16
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e009      	b.n	80037ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003798:	897a      	ldrh	r2, [r7, #10]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037ac:	893b      	ldrh	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	80da      	strh	r2, [r3, #6]
 80037c0:	e00b      	b.n	80037da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2201      	movs	r2, #1
 80037c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e272      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8087 	beq.w	8003916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003808:	4b92      	ldr	r3, [pc, #584]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00c      	beq.n	800382e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003814:	4b8f      	ldr	r3, [pc, #572]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d112      	bne.n	8003846 <HAL_RCC_OscConfig+0x5e>
 8003820:	4b8c      	ldr	r3, [pc, #560]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d10b      	bne.n	8003846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382e:	4b89      	ldr	r3, [pc, #548]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d06c      	beq.n	8003914 <HAL_RCC_OscConfig+0x12c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d168      	bne.n	8003914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e24c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x76>
 8003850:	4b80      	ldr	r3, [pc, #512]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7f      	ldr	r2, [pc, #508]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e02e      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x98>
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b78      	ldr	r3, [pc, #480]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a77      	ldr	r2, [pc, #476]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0xbc>
 800388a:	4b72      	ldr	r3, [pc, #456]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a71      	ldr	r2, [pc, #452]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6f      	ldr	r3, [pc, #444]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 80038a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b68      	ldr	r3, [pc, #416]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a67      	ldr	r2, [pc, #412]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd ff40 	bl	8001748 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fd ff3c 	bl	8001748 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e200      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5d      	ldr	r3, [pc, #372]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xe4>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd ff2c 	bl	8001748 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd ff28 	bl	8001748 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1ec      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b53      	ldr	r3, [pc, #332]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x10c>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003922:	4b4c      	ldr	r3, [pc, #304]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800392e:	4b49      	ldr	r3, [pc, #292]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x18c>
 800393a:	4b46      	ldr	r3, [pc, #280]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b43      	ldr	r3, [pc, #268]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c0      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4939      	ldr	r1, [pc, #228]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b36      	ldr	r3, [pc, #216]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fd fee1 	bl	8001748 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd fedd 	bl	8001748 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4927      	ldr	r1, [pc, #156]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd fec0 	bl	8001748 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd febc 	bl	8001748 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e180      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d03a      	beq.n	8003a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d019      	beq.n	8003a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <HAL_RCC_OscConfig+0x274>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fd fea0 	bl	8001748 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fe9c 	bl	8001748 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e160      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f000 fa9c 	bl	8003f68 <RCC_Delay>
 8003a30:	e01c      	b.n	8003a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_OscConfig+0x274>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fd fe86 	bl	8001748 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3e:	e00f      	b.n	8003a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fe82 	bl	8001748 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d908      	bls.n	8003a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e146      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	42420000 	.word	0x42420000
 8003a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	4b92      	ldr	r3, [pc, #584]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e9      	bne.n	8003a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a6 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b88      	ldr	r3, [pc, #544]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a87      	ldr	r2, [pc, #540]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]
 8003a96:	4b85      	ldr	r3, [pc, #532]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b82      	ldr	r3, [pc, #520]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fd fe43 	bl	8001748 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fd fe3f 	bl	8001748 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	@ 0x64
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e103      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b75      	ldr	r3, [pc, #468]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x312>
 8003aec:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e02d      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x334>
 8003b02:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a69      	ldr	r2, [pc, #420]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6213      	str	r3, [r2, #32]
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a66      	ldr	r2, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6213      	str	r3, [r2, #32]
 8003b1a:	e01c      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x356>
 8003b24:	4b61      	ldr	r3, [pc, #388]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a60      	ldr	r2, [pc, #384]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	4b5e      	ldr	r3, [pc, #376]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a5d      	ldr	r2, [pc, #372]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	e00b      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4a5a      	ldr	r2, [pc, #360]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	4b58      	ldr	r3, [pc, #352]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4a57      	ldr	r2, [pc, #348]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fdf3 	bl	8001748 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fdef 	bl	8001748 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0b1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ee      	beq.n	8003b66 <HAL_RCC_OscConfig+0x37e>
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fddd 	bl	8001748 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd fdd9 	bl	8001748 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e09b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ee      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bba:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8087 	beq.w	8003cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd0:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d061      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d146      	bne.n	8003c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b33      	ldr	r3, [pc, #204]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd fdad 	bl	8001748 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fd fda9 	bl	8001748 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e06d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c04:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d108      	bne.n	8003c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4921      	ldr	r1, [pc, #132]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a19      	ldr	r1, [r3, #32]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	491b      	ldr	r1, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fd7d 	bl	8001748 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fd79 	bl	8001748 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e03d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x46a>
 8003c70:	e035      	b.n	8003cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd fd66 	bl	8001748 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fd62 	bl	8001748 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e026      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x498>
 8003c9e:	e01e      	b.n	8003cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e019      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_RCC_OscConfig+0x500>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0d0      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b6a      	ldr	r3, [pc, #424]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d910      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b67      	ldr	r3, [pc, #412]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	4965      	ldr	r1, [pc, #404]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b63      	ldr	r3, [pc, #396]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d48:	4b59      	ldr	r3, [pc, #356]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	494d      	ldr	r1, [pc, #308]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d040      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d115      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e073      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4936      	ldr	r1, [pc, #216]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fcb4 	bl	8001748 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fd fcb0 	bl	8001748 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e053      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d210      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 0207 	bic.w	r2, r3, #7
 8003e22:	4922      	ldr	r1, [pc, #136]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4916      	ldr	r1, [pc, #88]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e66:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	490e      	ldr	r1, [pc, #56]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7a:	f000 f821 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	490a      	ldr	r1, [pc, #40]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e96:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fc12 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	0800bf3c 	.word	0x0800bf3c
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	20000014 	.word	0x20000014

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eda:	4b1e      	ldr	r3, [pc, #120]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8003eee:	e027      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef2:	613b      	str	r3, [r7, #16]
      break;
 8003ef4:	e027      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0c9b      	lsrs	r3, r3, #18
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a17      	ldr	r2, [pc, #92]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f0e:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0c5b      	lsrs	r3, r3, #17
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	4a11      	ldr	r2, [pc, #68]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f22:	fb03 f202 	mul.w	r2, r3, r2
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e004      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	613b      	str	r3, [r7, #16]
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	613b      	str	r3, [r7, #16]
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	693b      	ldr	r3, [r7, #16]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	007a1200 	.word	0x007a1200
 8003f5c:	0800bf4c 	.word	0x0800bf4c
 8003f60:	0800bf5c 	.word	0x0800bf5c
 8003f64:	003d0900 	.word	0x003d0900

08003f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <RCC_Delay+0x34>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <RCC_Delay+0x38>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a5b      	lsrs	r3, r3, #9
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f84:	bf00      	nop
  }
  while (Delay --);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	60fa      	str	r2, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <RCC_Delay+0x1c>
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000010 	.word	0x20000010
 8003fa0:	10624dd3 	.word	0x10624dd3

08003fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d07d      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	61d3      	str	r3, [r2, #28]
 8003fdc:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	4b46      	ldr	r3, [pc, #280]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d118      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a42      	ldr	r2, [pc, #264]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004004:	f7fd fba0 	bl	8001748 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	e008      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400c:	f7fd fb9c 	bl	8001748 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e06d      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401e:	4b3a      	ldr	r3, [pc, #232]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402a:	4b36      	ldr	r3, [pc, #216]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004032:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02e      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d027      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004048:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004050:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004052:	4b2e      	ldr	r3, [pc, #184]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004058:	4b2c      	ldr	r3, [pc, #176]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800405e:	4a29      	ldr	r2, [pc, #164]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d014      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fd fb6b 	bl	8001748 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd fb67 	bl	8001748 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e036      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ee      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004098:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4917      	ldr	r1, [pc, #92]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	490b      	ldr	r1, [pc, #44]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4904      	ldr	r1, [pc, #16]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	42420440 	.word	0x42420440

08004110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd f914 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fa5a 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <HAL_TIM_Base_Start+0x88>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_TIM_Base_Start+0x48>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e2:	d009      	beq.n	80041f8 <HAL_TIM_Base_Start+0x48>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a14      	ldr	r2, [pc, #80]	@ (800423c <HAL_TIM_Base_Start+0x8c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_TIM_Base_Start+0x48>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a13      	ldr	r2, [pc, #76]	@ (8004240 <HAL_TIM_Base_Start+0x90>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d111      	bne.n	800421c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d010      	beq.n	800422c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	e007      	b.n	800422c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800

08004244 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10f      	bne.n	800427c <HAL_TIM_Base_Stop+0x38>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	f240 4344 	movw	r3, #1092	@ 0x444
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <HAL_TIM_Base_Stop+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e041      	b.n	8004326 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f839 	bl	800432e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f000 f99a 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_IC_ConfigChannel+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e088      	b.n	8004470 <HAL_TIM_IC_ConfigChannel+0x130>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800437c:	f000 f9b2 	bl	80046e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020c 	bic.w	r2, r2, #12
 800438e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	619a      	str	r2, [r3, #24]
 80043a2:	e060      	b.n	8004466 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d11c      	bne.n	80043e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80043ba:	f000 fa1b 	bl	80047f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6999      	ldr	r1, [r3, #24]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	021a      	lsls	r2, r3, #8
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
 80043e2:	e040      	b.n	8004466 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11b      	bne.n	8004422 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80043fa:	f000 fa66 	bl	80048ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 020c 	bic.w	r2, r2, #12
 800440c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	61da      	str	r2, [r3, #28]
 8004420:	e021      	b.n	8004466 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d11c      	bne.n	8004462 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004438:	f000 fa82 	bl	8004940 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800444a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69d9      	ldr	r1, [r3, #28]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	61da      	str	r2, [r3, #28]
 8004460:	e001      	b.n	8004466 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIM_ConfigClockSource+0x1c>
 8004490:	2302      	movs	r3, #2
 8004492:	e0b4      	b.n	80045fe <HAL_TIM_ConfigClockSource+0x186>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044cc:	d03e      	beq.n	800454c <HAL_TIM_ConfigClockSource+0xd4>
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d2:	f200 8087 	bhi.w	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	f000 8086 	beq.w	80045ea <HAL_TIM_ConfigClockSource+0x172>
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e2:	d87f      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b70      	cmp	r3, #112	@ 0x70
 80044e6:	d01a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xa6>
 80044e8:	2b70      	cmp	r3, #112	@ 0x70
 80044ea:	d87b      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b60      	cmp	r3, #96	@ 0x60
 80044ee:	d050      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x11a>
 80044f0:	2b60      	cmp	r3, #96	@ 0x60
 80044f2:	d877      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b50      	cmp	r3, #80	@ 0x50
 80044f6:	d03c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xfa>
 80044f8:	2b50      	cmp	r3, #80	@ 0x50
 80044fa:	d873      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d058      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d86f      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b30      	cmp	r3, #48	@ 0x30
 8004506:	d064      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b30      	cmp	r3, #48	@ 0x30
 800450a:	d86b      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d060      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	2b20      	cmp	r3, #32
 8004512:	d867      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d05c      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	2b10      	cmp	r3, #16
 800451a:	d05a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 800451c:	e062      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	f000 fa5d 	bl	80049ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	609a      	str	r2, [r3, #8]
      break;
 800454a:	e04f      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	f000 fa46 	bl	80049ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800456e:	609a      	str	r2, [r3, #8]
      break;
 8004570:	e03c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f90a 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2150      	movs	r1, #80	@ 0x50
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa14 	bl	80049b8 <TIM_ITRx_SetConfig>
      break;
 8004590:	e02c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f964 	bl	800486c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2160      	movs	r1, #96	@ 0x60
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa04 	bl	80049b8 <TIM_ITRx_SetConfig>
      break;
 80045b0:	e01c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 f8ea 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2140      	movs	r1, #64	@ 0x40
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f9f4 	bl	80049b8 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e00c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 f9eb 	bl	80049b8 <TIM_ITRx_SetConfig>
      break;
 80045e2:	e003      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      break;
 80045e8:	e000      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a2c      	ldr	r2, [pc, #176]	@ (80046dc <TIM_Base_SetConfig+0xd4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x30>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <TIM_Base_SetConfig+0xd8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <TIM_Base_SetConfig+0xd4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <TIM_Base_SetConfig+0xd8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <TIM_Base_SetConfig+0xd0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]
  }
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800

080046e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f023 0201 	bic.w	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <TIM_TI1_SetConfig+0xa8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_TI1_SetConfig+0x46>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004718:	d007      	beq.n	800472a <TIM_TI1_SetConfig+0x46>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <TIM_TI1_SetConfig+0xac>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_TI1_SetConfig+0x46>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <TIM_TI1_SetConfig+0xb0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d101      	bne.n	800472e <TIM_TI1_SetConfig+0x4a>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <TIM_TI1_SetConfig+0x4c>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e003      	b.n	800474e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	b2db      	uxtb	r3, r3
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f023 030a 	bic.w	r3, r3, #10
 8004768:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 030a 	and.w	r3, r3, #10
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800

08004798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 030a 	bic.w	r3, r3, #10
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0210 	bic.w	r2, r3, #16
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	031b      	lsls	r3, r3, #12
 8004838:	b29b      	uxth	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004846:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0210 	bic.w	r2, r3, #16
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	031b      	lsls	r3, r3, #12
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004906:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	b2db      	uxtb	r3, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	031b      	lsls	r3, r3, #12
 8004984:	b29b      	uxth	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004992:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	031b      	lsls	r3, r3, #12
 8004998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f043 0307 	orr.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	609a      	str	r2, [r3, #8]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	021a      	lsls	r2, r3, #8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e046      	b.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a10      	ldr	r2, [pc, #64]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800

08004ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4638      	mov	r0, r7
 8004af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b12:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b36:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	4638      	mov	r0, r7
 8004b84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b09d      	sub	sp, #116	@ 0x74
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d81f      	bhi.n	8004c26 <USB_ActivateEndpoint+0x72>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <USB_ActivateEndpoint+0x38>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c2f 	.word	0x08004c2f
 8004bf8:	08004c0b 	.word	0x08004c0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004c08:	e012      	b.n	8004c30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c0e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004c12:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004c16:	e00b      	b.n	8004c30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004c24:	e004      	b.n	8004c30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004c2c:	e000      	b.n	8004c30 <USB_ActivateEndpoint+0x7c>
      break;
 8004c2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	7b1b      	ldrb	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 8178 	bne.w	8004f90 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8084 	beq.w	8004db2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	011a      	lsls	r2, r3, #4
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	88db      	ldrh	r3, [r3, #6]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	827b      	strh	r3, [r7, #18]
 8004cec:	8a7b      	ldrh	r3, [r7, #18]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01b      	beq.n	8004d2e <USB_ActivateEndpoint+0x17a>
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0c:	823b      	strh	r3, [r7, #16]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	8a3b      	ldrh	r3, [r7, #16]
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d020      	beq.n	8004d78 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4c:	81bb      	strh	r3, [r7, #12]
 8004d4e:	89bb      	ldrh	r3, [r7, #12]
 8004d50:	f083 0320 	eor.w	r3, r3, #32
 8004d54:	81bb      	strh	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	441a      	add	r2, r3
 8004d60:	89bb      	ldrh	r3, [r7, #12]
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]
 8004d76:	e2d5      	b.n	8005324 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8e:	81fb      	strh	r3, [r7, #14]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	89fb      	ldrh	r3, [r7, #14]
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
 8004db0:	e2b8      	b.n	8005324 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	4413      	add	r3, r2
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	011a      	lsls	r2, r3, #4
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	88db      	ldrh	r3, [r3, #6]
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	4413      	add	r3, r2
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	011a      	lsls	r2, r3, #4
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e20:	d91d      	bls.n	8004e5e <USB_ActivateEndpoint+0x2aa>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <USB_ActivateEndpoint+0x288>
 8004e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	029b      	lsls	r3, r3, #10
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e026      	b.n	8004eac <USB_ActivateEndpoint+0x2f8>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <USB_ActivateEndpoint+0x2c8>
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	e017      	b.n	8004eac <USB_ActivateEndpoint+0x2f8>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <USB_ActivateEndpoint+0x2e2>
 8004e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e92:	3301      	adds	r3, #1
 8004e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004eba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <USB_ActivateEndpoint+0x348>
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	843b      	strh	r3, [r7, #32]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	8c3b      	ldrh	r3, [r7, #32]
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d124      	bne.n	8004f4e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1a:	83bb      	strh	r3, [r7, #28]
 8004f1c:	8bbb      	ldrh	r3, [r7, #28]
 8004f1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f22:	83bb      	strh	r3, [r7, #28]
 8004f24:	8bbb      	ldrh	r3, [r7, #28]
 8004f26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f2a:	83bb      	strh	r3, [r7, #28]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	441a      	add	r2, r3
 8004f36:	8bbb      	ldrh	r3, [r7, #28]
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]
 8004f4c:	e1ea      	b.n	8005324 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f64:	83fb      	strh	r3, [r7, #30]
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f6c:	83fb      	strh	r3, [r7, #30]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	8bfb      	ldrh	r3, [r7, #30]
 8004f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]
 8004f8e:	e1c9      	b.n	8005324 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	78db      	ldrb	r3, [r3, #3]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11e      	bne.n	8004fd6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]
 8004fd4:	e01d      	b.n	8005012 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fec:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005022:	4413      	add	r3, r2
 8005024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	011a      	lsls	r2, r3, #4
 800502c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800502e:	4413      	add	r3, r2
 8005030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	891b      	ldrh	r3, [r3, #8]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	657b      	str	r3, [r7, #84]	@ 0x54
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005056:	4413      	add	r3, r2
 8005058:	657b      	str	r3, [r7, #84]	@ 0x54
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	011a      	lsls	r2, r3, #4
 8005060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005062:	4413      	add	r3, r2
 8005064:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005068:	653b      	str	r3, [r7, #80]	@ 0x50
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	895b      	ldrh	r3, [r3, #10]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005078:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8093 	bne.w	80051aa <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005094:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <USB_ActivateEndpoint+0x524>
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80050e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <USB_ActivateEndpoint+0x574>
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005120:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800513a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005140:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005142:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005146:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005148:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800514a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800514e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005186:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800519c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	8013      	strh	r3, [r2, #0]
 80051a8:	e0bc      	b.n	8005324 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80051ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01d      	beq.n	8005202 <USB_ActivateEndpoint+0x64e>
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051dc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80051ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005212:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01d      	beq.n	800525a <USB_ActivateEndpoint+0x6a6>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005234:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800524a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005252:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005256:	b29b      	uxth	r3, r3
 8005258:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	78db      	ldrb	r3, [r3, #3]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d024      	beq.n	80052ac <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005278:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800527c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005280:	f083 0320 	eor.w	r3, r3, #32
 8005284:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	441a      	add	r2, r3
 8005292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800529a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800529e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	8013      	strh	r3, [r2, #0]
 80052aa:	e01d      	b.n	80052e8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800531c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005324:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005328:	4618      	mov	r0, r3
 800532a:	3774      	adds	r7, #116	@ 0x74
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop

08005334 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005334:	b480      	push	{r7}
 8005336:	b08d      	sub	sp, #52	@ 0x34
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	7b1b      	ldrb	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 808e 	bne.w	8005464 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d044      	beq.n	80053da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	81bb      	strh	r3, [r7, #12]
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <USB_DeactivateEndpoint+0x6c>
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	817b      	strh	r3, [r7, #10]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	897b      	ldrh	r3, [r7, #10]
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005398:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b6:	813b      	strh	r3, [r7, #8]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	893b      	ldrh	r3, [r7, #8]
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
 80053d8:	e192      	b.n	8005700 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	827b      	strh	r3, [r7, #18]
 80053e8:	8a7b      	ldrh	r3, [r7, #18]
 80053ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <USB_DeactivateEndpoint+0xf6>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005408:	823b      	strh	r3, [r7, #16]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8a3b      	ldrh	r3, [r7, #16]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800541e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800543c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005440:	81fb      	strh	r3, [r7, #14]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e14d      	b.n	8005700 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f040 80a5 	bne.w	80055b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	843b      	strh	r3, [r7, #32]
 800547c:	8c3b      	ldrh	r3, [r7, #32]
 800547e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01b      	beq.n	80054be <USB_DeactivateEndpoint+0x18a>
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549c:	83fb      	strh	r3, [r7, #30]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	8bfb      	ldrh	r3, [r7, #30]
 80054aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	83bb      	strh	r3, [r7, #28]
 80054cc:	8bbb      	ldrh	r3, [r7, #28]
 80054ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01b      	beq.n	800550e <USB_DeactivateEndpoint+0x1da>
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ec:	837b      	strh	r3, [r7, #26]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	8b7b      	ldrh	r3, [r7, #26]
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005506:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005524:	833b      	strh	r3, [r7, #24]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	8b3b      	ldrh	r3, [r7, #24]
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800553e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555c:	82fb      	strh	r3, [r7, #22]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	8afb      	ldrh	r3, [r7, #22]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005594:	82bb      	strh	r3, [r7, #20]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	8abb      	ldrh	r3, [r7, #20]
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
 80055b6:	e0a3      	b.n	8005700 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80055c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80055c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01b      	beq.n	8005608 <USB_DeactivateEndpoint+0x2d4>
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005616:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01b      	beq.n	8005658 <USB_DeactivateEndpoint+0x324>
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005636:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800564c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005650:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800567c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568c:	b29b      	uxth	r3, r3
 800568e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3734      	adds	r7, #52	@ 0x34
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b0c2      	sub	sp, #264	@ 0x108
 8005710:	af00      	add	r7, sp, #0
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571a:	6018      	str	r0, [r3, #0]
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005724:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b01      	cmp	r3, #1
 8005734:	f040 86b7 	bne.w	80064a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	429a      	cmp	r2, r3
 8005752:	d908      	bls.n	8005766 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005764:	e007      	b.n	8005776 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	7b1b      	ldrb	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d13a      	bne.n	80057fc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	88da      	ldrh	r2, [r3, #6]
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f001 fc9c 	bl	80070ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	f000 be1f 	b.w	800643a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b02      	cmp	r3, #2
 800580a:	f040 8462 	bne.w	80060d2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	f240 83df 	bls.w	8005fea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800582c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005852:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 81c7 	beq.w	8005c5c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d177      	bne.n	80059da <USB_EPStartXfer+0x2ce>
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	4413      	add	r3, r2
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800590e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	4413      	add	r3, r2
 8005920:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005930:	b29a      	uxth	r2, r3
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593a:	2b3e      	cmp	r3, #62	@ 0x3e
 800593c:	d921      	bls.n	8005982 <USB_EPStartXfer+0x276>
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <USB_EPStartXfer+0x252>
 8005954:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005958:	3b01      	subs	r3, #1
 800595a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29a      	uxth	r2, r3
 8005964:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005968:	b29b      	uxth	r3, r3
 800596a:	029b      	lsls	r3, r3, #10
 800596c:	b29b      	uxth	r3, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597a:	b29a      	uxth	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e050      	b.n	8005a24 <USB_EPStartXfer+0x318>
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <USB_EPStartXfer+0x294>
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005998:	b29a      	uxth	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	e041      	b.n	8005a24 <USB_EPStartXfer+0x318>
 80059a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <USB_EPStartXfer+0x2b4>
 80059b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80059ba:	3301      	adds	r3, #1
 80059bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4313      	orrs	r3, r2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e024      	b.n	8005a24 <USB_EPStartXfer+0x318>
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d11c      	bne.n	8005a24 <USB_EPStartXfer+0x318>
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	4413      	add	r3, r2
 8005a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	011a      	lsls	r2, r3, #4
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6959      	ldr	r1, [r3, #20]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	f001 fb49 	bl	80070ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a68:	441a      	add	r2, r3
 8005a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90f      	bls.n	8005ab2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	621a      	str	r2, [r3, #32]
 8005ab0:	e00e      	b.n	8005ad0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d177      	bne.n	8005bd0 <USB_EPStartXfer+0x4c4>
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	4413      	add	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b32:	d921      	bls.n	8005b78 <USB_EPStartXfer+0x46c>
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <USB_EPStartXfer+0x448>
 8005b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4313      	orrs	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e056      	b.n	8005c26 <USB_EPStartXfer+0x51a>
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <USB_EPStartXfer+0x48a>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e047      	b.n	8005c26 <USB_EPStartXfer+0x51a>
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <USB_EPStartXfer+0x4aa>
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	029b      	lsls	r3, r3, #10
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e02a      	b.n	8005c26 <USB_EPStartXfer+0x51a>
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d122      	bne.n	8005c26 <USB_EPStartXfer+0x51a>
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	623b      	str	r3, [r7, #32]
 8005bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	011a      	lsls	r2, r3, #4
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	891b      	ldrh	r3, [r3, #8]
 8005c32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c54:	6800      	ldr	r0, [r0, #0]
 8005c56:	f001 fa48 	bl	80070ea <USB_WritePMA>
 8005c5a:	e3ee      	b.n	800643a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d177      	bne.n	8005d5c <USB_EPStartXfer+0x650>
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c8c:	4413      	add	r3, r2
 8005c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cbe:	d921      	bls.n	8005d04 <USB_EPStartXfer+0x5f8>
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <USB_EPStartXfer+0x5d4>
 8005cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e056      	b.n	8005db2 <USB_EPStartXfer+0x6a6>
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <USB_EPStartXfer+0x616>
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e047      	b.n	8005db2 <USB_EPStartXfer+0x6a6>
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <USB_EPStartXfer+0x636>
 8005d38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	029b      	lsls	r3, r3, #10
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e02a      	b.n	8005db2 <USB_EPStartXfer+0x6a6>
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d122      	bne.n	8005db2 <USB_EPStartXfer+0x6a6>
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d8c:	4413      	add	r3, r2
 8005d8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	011a      	lsls	r2, r3, #4
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	891b      	ldrh	r3, [r3, #8]
 8005dbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6959      	ldr	r1, [r3, #20]
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ddc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005de0:	6800      	ldr	r0, [r0, #0]
 8005de2:	f001 f982 	bl	80070ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	441a      	add	r2, r3
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d90f      	bls.n	8005e40 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	621a      	str	r2, [r3, #32]
 8005e3e:	e00e      	b.n	8005e5e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d177      	bne.n	8005f6a <USB_EPStartXfer+0x85e>
 8005e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9a:	4413      	add	r3, r2
 8005e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	011a      	lsls	r2, r3, #4
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ecc:	d921      	bls.n	8005f12 <USB_EPStartXfer+0x806>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <USB_EPStartXfer+0x7e2>
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e050      	b.n	8005fb4 <USB_EPStartXfer+0x8a8>
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <USB_EPStartXfer+0x824>
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	e041      	b.n	8005fb4 <USB_EPStartXfer+0x8a8>
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <USB_EPStartXfer+0x844>
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	029b      	lsls	r3, r3, #10
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4313      	orrs	r3, r2
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e024      	b.n	8005fb4 <USB_EPStartXfer+0x8a8>
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d11c      	bne.n	8005fb4 <USB_EPStartXfer+0x8a8>
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8e:	4413      	add	r3, r2
 8005f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	011a      	lsls	r2, r3, #4
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	895b      	ldrh	r3, [r3, #10]
 8005fc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6959      	ldr	r1, [r3, #20]
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	f001 f881 	bl	80070ea <USB_WritePMA>
 8005fe8:	e227      	b.n	800643a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800601c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006020:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006076:	4413      	add	r3, r2
 8006078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800607a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	011a      	lsls	r2, r3, #4
 8006088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800608a:	4413      	add	r3, r2
 800608c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	b29a      	uxth	r2, r3
 8006098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800609a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6959      	ldr	r1, [r3, #20]
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	f001 f80d 	bl	80070ea <USB_WritePMA>
 80060d0:	e1b3      	b.n	800643a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80c6 	beq.w	80062a4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	673b      	str	r3, [r7, #112]	@ 0x70
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d177      	bne.n	8006224 <USB_EPStartXfer+0xb18>
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006154:	4413      	add	r3, r2
 8006156:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006168:	4413      	add	r3, r2
 800616a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800616e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800617a:	b29a      	uxth	r2, r3
 800617c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	2b3e      	cmp	r3, #62	@ 0x3e
 8006186:	d921      	bls.n	80061cc <USB_EPStartXfer+0xac0>
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <USB_EPStartXfer+0xa9c>
 800619e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e050      	b.n	800626e <USB_EPStartXfer+0xb62>
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <USB_EPStartXfer+0xade>
 80061d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e041      	b.n	800626e <USB_EPStartXfer+0xb62>
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <USB_EPStartXfer+0xafe>
 8006200:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006204:	3301      	adds	r3, #1
 8006206:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800620a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006214:	b29b      	uxth	r3, r3
 8006216:	029b      	lsls	r3, r3, #10
 8006218:	b29b      	uxth	r3, r3
 800621a:	4313      	orrs	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e024      	b.n	800626e <USB_EPStartXfer+0xb62>
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d11c      	bne.n	800626e <USB_EPStartXfer+0xb62>
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006248:	4413      	add	r3, r2
 800624a:	673b      	str	r3, [r7, #112]	@ 0x70
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	011a      	lsls	r2, r3, #4
 800625a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	b29a      	uxth	r2, r3
 800626a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800626c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	895b      	ldrh	r3, [r3, #10]
 800627a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	b29b      	uxth	r3, r3
 8006290:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006294:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006298:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f000 ff24 	bl	80070ea <USB_WritePMA>
 80062a2:	e0ca      	b.n	800643a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d177      	bne.n	80063a4 <USB_EPStartXfer+0xc98>
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062d4:	4413      	add	r3, r2
 80062d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	011a      	lsls	r2, r3, #4
 80062e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	2b3e      	cmp	r3, #62	@ 0x3e
 8006306:	d921      	bls.n	800634c <USB_EPStartXfer+0xc40>
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_EPStartXfer+0xc1c>
 800631e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006322:	3b01      	subs	r3, #1
 8006324:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006332:	b29b      	uxth	r3, r3
 8006334:	029b      	lsls	r3, r3, #10
 8006336:	b29b      	uxth	r3, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e05c      	b.n	8006406 <USB_EPStartXfer+0xcfa>
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <USB_EPStartXfer+0xc5e>
 8006354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006362:	b29a      	uxth	r2, r3
 8006364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	e04d      	b.n	8006406 <USB_EPStartXfer+0xcfa>
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <USB_EPStartXfer+0xc7e>
 8006380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006384:	3301      	adds	r3, #1
 8006386:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800638a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29b      	uxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e030      	b.n	8006406 <USB_EPStartXfer+0xcfa>
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d128      	bne.n	8006406 <USB_EPStartXfer+0xcfa>
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063d8:	4413      	add	r3, r2
 80063da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	011a      	lsls	r2, r3, #4
 80063ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006404:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	891b      	ldrh	r3, [r3, #8]
 8006412:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6959      	ldr	r1, [r3, #20]
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	b29b      	uxth	r3, r3
 8006428:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800642c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006430:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006434:	6800      	ldr	r0, [r0, #0]
 8006436:	f000 fe58 	bl	80070ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006460:	817b      	strh	r3, [r7, #10]
 8006462:	897b      	ldrh	r3, [r7, #10]
 8006464:	f083 0310 	eor.w	r3, r3, #16
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	897b      	ldrh	r3, [r7, #10]
 800646c:	f083 0320 	eor.w	r3, r3, #32
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	897b      	ldrh	r3, [r7, #10]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	f000 bcde 	b.w	8006e62 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 80bb 	bne.w	800662e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d917      	bls.n	8006504 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e00e      	b.n	8006522 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006546:	4413      	add	r3, r2
 8006548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	011a      	lsls	r2, r3, #4
 800655a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800655e:	4413      	add	r3, r2
 8006560:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	2b3e      	cmp	r3, #62	@ 0x3e
 8006582:	d924      	bls.n	80065ce <USB_EPStartXfer+0xec2>
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_EPStartXfer+0xe98>
 800659a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800659e:	3b01      	subs	r3, #1
 80065a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f000 bc10 	b.w	8006dee <USB_EPStartXfer+0x16e2>
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10c      	bne.n	80065f0 <USB_EPStartXfer+0xee4>
 80065d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e3fe      	b.n	8006dee <USB_EPStartXfer+0x16e2>
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <USB_EPStartXfer+0xf04>
 8006606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800660a:	3301      	adds	r3, #1
 800660c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e3df      	b.n	8006dee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800662e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b02      	cmp	r3, #2
 800663c:	f040 8218 	bne.w	8006a70 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 809d 	bne.w	800678c <USB_EPStartXfer+0x1080>
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006676:	4413      	add	r3, r2
 8006678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	011a      	lsls	r2, r3, #4
 800668a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800668e:	4413      	add	r3, r2
 8006690:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ba:	d92b      	bls.n	8006714 <USB_EPStartXfer+0x1008>
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <USB_EPStartXfer+0xfe0>
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e070      	b.n	80067f6 <USB_EPStartXfer+0x10ea>
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <USB_EPStartXfer+0x1032>
 8006724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e05b      	b.n	80067f6 <USB_EPStartXfer+0x10ea>
 800673e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <USB_EPStartXfer+0x1062>
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	3301      	adds	r3, #1
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800676e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e034      	b.n	80067f6 <USB_EPStartXfer+0x10ea>
 800678c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d12c      	bne.n	80067f6 <USB_EPStartXfer+0x10ea>
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067c0:	4413      	add	r3, r2
 80067c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	011a      	lsls	r2, r3, #4
 80067d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067d8:	4413      	add	r3, r2
 80067da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 809d 	bne.w	8006950 <USB_EPStartXfer+0x1244>
 8006816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800683a:	4413      	add	r3, r2
 800683c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	011a      	lsls	r2, r3, #4
 800684e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006852:	4413      	add	r3, r2
 8006854:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800685c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b3e      	cmp	r3, #62	@ 0x3e
 800687e:	d92b      	bls.n	80068d8 <USB_EPStartXfer+0x11cc>
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <USB_EPStartXfer+0x11a4>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068aa:	3b01      	subs	r3, #1
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068bc:	b29b      	uxth	r3, r3
 80068be:	029b      	lsls	r3, r3, #10
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	e069      	b.n	80069ac <USB_EPStartXfer+0x12a0>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10c      	bne.n	8006902 <USB_EPStartXfer+0x11f6>
 80068e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	e054      	b.n	80069ac <USB_EPStartXfer+0x12a0>
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <USB_EPStartXfer+0x1226>
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	3301      	adds	r3, #1
 800692e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006932:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e02d      	b.n	80069ac <USB_EPStartXfer+0x12a0>
 8006950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d125      	bne.n	80069ac <USB_EPStartXfer+0x12a0>
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006976:	4413      	add	r3, r2
 8006978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800698e:	4413      	add	r3, r2
 8006990:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8218 	beq.w	8006dee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <USB_EPStartXfer+0x12ea>
 80069ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10d      	bne.n	8006a12 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 81f5 	bne.w	8006dee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 81ee 	bne.w	8006dee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a38:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
 8006a6e:	e1be      	b.n	8006dee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 81b4 	bne.w	8006dea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d917      	bls.n	8006ace <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	619a      	str	r2, [r3, #24]
 8006acc:	e00e      	b.n	8006aec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 8085 	bne.w	8006c08 <USB_EPStartXfer+0x14fc>
 8006afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b22:	4413      	add	r3, r2
 8006b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	011a      	lsls	r2, r3, #4
 8006b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b5e:	d923      	bls.n	8006ba8 <USB_EPStartXfer+0x149c>
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <USB_EPStartXfer+0x1474>
 8006b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	e060      	b.n	8006c6a <USB_EPStartXfer+0x155e>
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <USB_EPStartXfer+0x14be>
 8006bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e04f      	b.n	8006c6a <USB_EPStartXfer+0x155e>
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <USB_EPStartXfer+0x14de>
 8006be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be4:	3301      	adds	r3, #1
 8006be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	e030      	b.n	8006c6a <USB_EPStartXfer+0x155e>
 8006c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d128      	bne.n	8006c6a <USB_EPStartXfer+0x155e>
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	011a      	lsls	r2, r3, #4
 8006c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8085 	bne.w	8006d94 <USB_EPStartXfer+0x1688>
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	011a      	lsls	r2, r3, #4
 8006cc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cea:	d923      	bls.n	8006d34 <USB_EPStartXfer+0x1628>
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <USB_EPStartXfer+0x1600>
 8006d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d06:	3b01      	subs	r3, #1
 8006d08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	e05c      	b.n	8006dee <USB_EPStartXfer+0x16e2>
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10c      	bne.n	8006d56 <USB_EPStartXfer+0x164a>
 8006d3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e04b      	b.n	8006dee <USB_EPStartXfer+0x16e2>
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <USB_EPStartXfer+0x166a>
 8006d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d70:	3301      	adds	r3, #1
 8006d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e02c      	b.n	8006dee <USB_EPStartXfer+0x16e2>
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d124      	bne.n	8006dee <USB_EPStartXfer+0x16e2>
 8006da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	011a      	lsls	r2, r3, #4
 8006dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	e001      	b.n	8006dee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e03a      	b.n	8006e64 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d020      	beq.n	8006ec2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e96:	81bb      	strh	r3, [r7, #12]
 8006e98:	89bb      	ldrh	r3, [r7, #12]
 8006e9a:	f083 0310 	eor.w	r3, r3, #16
 8006e9e:	81bb      	strh	r3, [r7, #12]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	441a      	add	r2, r3
 8006eaa:	89bb      	ldrh	r3, [r7, #12]
 8006eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8013      	strh	r3, [r2, #0]
 8006ec0:	e01f      	b.n	8006f02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed8:	81fb      	strh	r3, [r7, #14]
 8006eda:	89fb      	ldrh	r3, [r7, #14]
 8006edc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ee0:	81fb      	strh	r3, [r7, #14]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	89fb      	ldrh	r3, [r7, #14]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b087      	sub	sp, #28
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	7b1b      	ldrb	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 809d 	bne.w	800705c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04c      	beq.n	8006fc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	823b      	strh	r3, [r7, #16]
 8006f38:	8a3b      	ldrh	r3, [r7, #16]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01b      	beq.n	8006f7a <USB_EPClearStall+0x6c>
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f58:	81fb      	strh	r3, [r7, #14]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	441a      	add	r2, r3
 8006f64:	89fb      	ldrh	r3, [r7, #14]
 8006f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	78db      	ldrb	r3, [r3, #3]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d06c      	beq.n	800705c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f98:	81bb      	strh	r3, [r7, #12]
 8006f9a:	89bb      	ldrh	r3, [r7, #12]
 8006f9c:	f083 0320 	eor.w	r3, r3, #32
 8006fa0:	81bb      	strh	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	89bb      	ldrh	r3, [r7, #12]
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
 8006fc2:	e04b      	b.n	800705c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	82fb      	strh	r3, [r7, #22]
 8006fd2:	8afb      	ldrh	r3, [r7, #22]
 8006fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01b      	beq.n	8007014 <USB_EPClearStall+0x106>
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff2:	82bb      	strh	r3, [r7, #20]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	8abb      	ldrh	r3, [r7, #20]
 8007000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800700c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007010:	b29b      	uxth	r3, r3
 8007012:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	827b      	strh	r3, [r7, #18]
 800702c:	8a7b      	ldrh	r3, [r7, #18]
 800702e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007032:	827b      	strh	r3, [r7, #18]
 8007034:	8a7b      	ldrh	r3, [r7, #18]
 8007036:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800703a:	827b      	strh	r3, [r7, #18]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	8a7b      	ldrh	r3, [r7, #18]
 8007048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800704c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007058:	b29b      	uxth	r3, r3
 800705a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2280      	movs	r2, #128	@ 0x80
 800707e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr

080070a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr

080070b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070c8:	68fb      	ldr	r3, [r7, #12]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b08b      	sub	sp, #44	@ 0x2c
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	4611      	mov	r1, r2
 80070f6:	461a      	mov	r2, r3
 80070f8:	460b      	mov	r3, r1
 80070fa:	80fb      	strh	r3, [r7, #6]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007100:	88bb      	ldrh	r3, [r7, #4]
 8007102:	3301      	adds	r3, #1
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	005a      	lsls	r2, r3, #1
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800711c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
 8007122:	e01e      	b.n	8007162 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	b21a      	sxth	r2, r3
 8007134:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007138:	4313      	orrs	r3, r2
 800713a:	b21b      	sxth	r3, r3
 800713c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	8a7a      	ldrh	r2, [r7, #18]
 8007142:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	3302      	adds	r3, #2
 8007148:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	3302      	adds	r3, #2
 800714e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	3301      	adds	r3, #1
 8007154:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3301      	adds	r3, #1
 800715a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	3b01      	subs	r3, #1
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1dd      	bne.n	8007124 <USB_WritePMA+0x3a>
  }
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	372c      	adds	r7, #44	@ 0x2c
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007174:	b480      	push	{r7}
 8007176:	b08b      	sub	sp, #44	@ 0x2c
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4611      	mov	r1, r2
 8007180:	461a      	mov	r2, r3
 8007182:	460b      	mov	r3, r1
 8007184:	80fb      	strh	r3, [r7, #6]
 8007186:	4613      	mov	r3, r2
 8007188:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800718a:	88bb      	ldrh	r3, [r7, #4]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	005a      	lsls	r2, r3, #1
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ac:	e01b      	b.n	80071e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	3302      	adds	r3, #2
 80071ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	3301      	adds	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	3302      	adds	r3, #2
 80071de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	3b01      	subs	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e0      	bne.n	80071ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	701a      	strb	r2, [r3, #0]
  }
}
 8007208:	bf00      	nop
 800720a:	372c      	adds	r7, #44	@ 0x2c
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7c1b      	ldrb	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d115      	bne.n	8007256 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800722a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800722e:	2202      	movs	r2, #2
 8007230:	2181      	movs	r1, #129	@ 0x81
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fe81 	bl	8008f3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800723e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007242:	2202      	movs	r2, #2
 8007244:	2101      	movs	r1, #1
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fe77 	bl	8008f3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007254:	e012      	b.n	800727c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007256:	2340      	movs	r3, #64	@ 0x40
 8007258:	2202      	movs	r2, #2
 800725a:	2181      	movs	r1, #129	@ 0x81
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fe6c 	bl	8008f3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007268:	2340      	movs	r3, #64	@ 0x40
 800726a:	2202      	movs	r2, #2
 800726c:	2101      	movs	r1, #1
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fe63 	bl	8008f3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800727c:	2308      	movs	r3, #8
 800727e:	2203      	movs	r2, #3
 8007280:	2182      	movs	r1, #130	@ 0x82
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fe59 	bl	8008f3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800728e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007292:	f001 ff79 	bl	8009188 <USBD_static_malloc>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e026      	b.n	80072fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7c1b      	ldrb	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 ff18 	bl	800911a <USBD_LL_PrepareReceive>
 80072ea:	e007      	b.n	80072fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072f2:	2340      	movs	r3, #64	@ 0x40
 80072f4:	2101      	movs	r1, #1
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 ff0f 	bl	800911a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007316:	2181      	movs	r1, #129	@ 0x81
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fe34 	bl	8008f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007324:	2101      	movs	r1, #1
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fe2d 	bl	8008f86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007334:	2182      	movs	r1, #130	@ 0x82
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fe25 	bl	8008f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00e      	beq.n	800736a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800735c:	4618      	mov	r0, r3
 800735e:	f001 ff1f 	bl	80091a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007384:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800739a:	2b00      	cmp	r3, #0
 800739c:	d039      	beq.n	8007412 <USBD_CDC_Setup+0x9e>
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d17f      	bne.n	80074a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d029      	beq.n	80073fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b25b      	sxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da11      	bge.n	80073d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80073c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	88d2      	ldrh	r2, [r2, #6]
 80073c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80073c8:	6939      	ldr	r1, [r7, #16]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	88db      	ldrh	r3, [r3, #6]
 80073ce:	461a      	mov	r2, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fa05 	bl	80087e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80073d6:	e06b      	b.n	80074b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785a      	ldrb	r2, [r3, #1]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80073ee:	6939      	ldr	r1, [r7, #16]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fa20 	bl	800883c <USBD_CtlPrepareRx>
      break;
 80073fc:	e058      	b.n	80074b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	7850      	ldrb	r0, [r2, #1]
 800740a:	2200      	movs	r2, #0
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	4798      	blx	r3
      break;
 8007410:	e04e      	b.n	80074b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b0b      	cmp	r3, #11
 8007418:	d02e      	beq.n	8007478 <USBD_CDC_Setup+0x104>
 800741a:	2b0b      	cmp	r3, #11
 800741c:	dc38      	bgt.n	8007490 <USBD_CDC_Setup+0x11c>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <USBD_CDC_Setup+0xb4>
 8007422:	2b0a      	cmp	r3, #10
 8007424:	d014      	beq.n	8007450 <USBD_CDC_Setup+0xdc>
 8007426:	e033      	b.n	8007490 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742e:	2b03      	cmp	r3, #3
 8007430:	d107      	bne.n	8007442 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007432:	f107 030c 	add.w	r3, r7, #12
 8007436:	2202      	movs	r2, #2
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 f9d0 	bl	80087e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007440:	e02e      	b.n	80074a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f961 	bl	800870c <USBD_CtlError>
            ret = USBD_FAIL;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
          break;
 800744e:	e027      	b.n	80074a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007456:	2b03      	cmp	r3, #3
 8007458:	d107      	bne.n	800746a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800745a:	f107 030f 	add.w	r3, r7, #15
 800745e:	2201      	movs	r2, #1
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f9bc 	bl	80087e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007468:	e01a      	b.n	80074a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f94d 	bl	800870c <USBD_CtlError>
            ret = USBD_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	75fb      	strb	r3, [r7, #23]
          break;
 8007476:	e013      	b.n	80074a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800747e:	2b03      	cmp	r3, #3
 8007480:	d00d      	beq.n	800749e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f941 	bl	800870c <USBD_CtlError>
            ret = USBD_FAIL;
 800748a:	2302      	movs	r3, #2
 800748c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800748e:	e006      	b.n	800749e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 f93a 	bl	800870c <USBD_CtlError>
          ret = USBD_FAIL;
 8007498:	2302      	movs	r3, #2
 800749a:	75fb      	strb	r3, [r7, #23]
          break;
 800749c:	e000      	b.n	80074a0 <USBD_CDC_Setup+0x12c>
          break;
 800749e:	bf00      	nop
      }
      break;
 80074a0:	e006      	b.n	80074b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f931 	bl	800870c <USBD_CtlError>
      ret = USBD_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	75fb      	strb	r3, [r7, #23]
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d03a      	beq.n	8007556 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	331c      	adds	r3, #28
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d029      	beq.n	800754a <USBD_CDC_DataIn+0x90>
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	331c      	adds	r3, #28
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	78f9      	ldrb	r1, [r7, #3]
 800750a:	68b8      	ldr	r0, [r7, #8]
 800750c:	460b      	mov	r3, r1
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	4403      	add	r3, r0
 8007516:	3320      	adds	r3, #32
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	fbb2 f1f3 	udiv	r1, r2, r3
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d110      	bne.n	800754a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	331c      	adds	r3, #28
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800753c:	78f9      	ldrb	r1, [r7, #3]
 800753e:	2300      	movs	r3, #0
 8007540:	2200      	movs	r2, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fdc6 	bl	80090d4 <USBD_LL_Transmit>
 8007548:	e003      	b.n	8007552 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007572:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fdf1 	bl	8009160 <USBD_LL_GetRxDataSize>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80075a4:	4611      	mov	r1, r2
 80075a6:	4798      	blx	r3

    return USBD_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e000      	b.n	80075ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80075ac:	2302      	movs	r3, #2
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d014      	beq.n	80075fa <USBD_CDC_EP0_RxReady+0x44>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075d6:	2bff      	cmp	r3, #255	@ 0xff
 80075d8:	d00f      	beq.n	80075fa <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80075e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	22ff      	movs	r2, #255	@ 0xff
 80075f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2243      	movs	r2, #67	@ 0x43
 8007610:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007612:	4b03      	ldr	r3, [pc, #12]	@ (8007620 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200000a4 	.word	0x200000a4

08007624 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2243      	movs	r2, #67	@ 0x43
 8007630:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007632:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20000060 	.word	0x20000060

08007644 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2243      	movs	r2, #67	@ 0x43
 8007650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007652:	4b03      	ldr	r3, [pc, #12]	@ (8007660 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	200000e8 	.word	0x200000e8

08007664 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	220a      	movs	r2, #10
 8007670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007672:	4b03      	ldr	r3, [pc, #12]	@ (8007680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	2000001c 	.word	0x2000001c

08007684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800768e:	2302      	movs	r3, #2
 8007690:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007716:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01c      	beq.n	800775c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007728:	2b00      	cmp	r3, #0
 800772a:	d115      	bne.n	8007758 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800774a:	b29b      	uxth	r3, r3
 800774c:	2181      	movs	r1, #129	@ 0x81
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fcc0 	bl	80090d4 <USBD_LL_Transmit>

      return USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e002      	b.n	800775e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007774:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d017      	beq.n	80077b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7c1b      	ldrb	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800778e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007792:	2101      	movs	r1, #1
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fcc0 	bl	800911a <USBD_LL_PrepareReceive>
 800779a:	e007      	b.n	80077ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077a2:	2340      	movs	r3, #64	@ 0x40
 80077a4:	2101      	movs	r1, #1
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 fcb7 	bl	800911a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	4613      	mov	r3, r2
 80077c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077ce:	2302      	movs	r3, #2
 80077d0:	e01a      	b.n	8007808 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	79fa      	ldrb	r2, [r7, #7]
 80077fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f001 fb25 	bl	8008e50 <USBD_LL_Init>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d006      	beq.n	8007832 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e001      	b.n	8007836 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007832:	2302      	movs	r3, #2
 8007834:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fb5a 	bl	8008f04 <USBD_LL_Start>

  return USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00c      	beq.n	80078a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	4611      	mov	r1, r2
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4611      	mov	r1, r2
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fed8 	bl	800869a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b02      	cmp	r3, #2
 800790c:	d016      	beq.n	800793c <USBD_LL_SetupStage+0x6a>
 800790e:	2b02      	cmp	r3, #2
 8007910:	d81c      	bhi.n	800794c <USBD_LL_SetupStage+0x7a>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <USBD_LL_SetupStage+0x4a>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d008      	beq.n	800792c <USBD_LL_SetupStage+0x5a>
 800791a:	e017      	b.n	800794c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9cb 	bl	8007cc0 <USBD_StdDevReq>
      break;
 800792a:	e01a      	b.n	8007962 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa2d 	bl	8007d94 <USBD_StdItfReq>
      break;
 800793a:	e012      	b.n	8007962 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa6d 	bl	8007e24 <USBD_StdEPReq>
      break;
 800794a:	e00a      	b.n	8007962 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007952:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007956:	b2db      	uxtb	r3, r3
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fb32 	bl	8008fc4 <USBD_LL_StallEP>
      break;
 8007960:	bf00      	nop
  }

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	460b      	mov	r3, r1
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d14b      	bne.n	8007a18 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007986:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800798e:	2b03      	cmp	r3, #3
 8007990:	d134      	bne.n	80079fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	429a      	cmp	r2, r3
 800799c:	d919      	bls.n	80079d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d203      	bcs.n	80079c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80079bc:	b29b      	uxth	r3, r3
 80079be:	e002      	b.n	80079c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 ff54 	bl	8008878 <USBD_CtlContinueRx>
 80079d0:	e038      	b.n	8007a44 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d105      	bne.n	80079f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 ff51 	bl	800889c <USBD_CtlSendStatus>
 80079fa:	e023      	b.n	8007a44 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d11e      	bne.n	8007a44 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a0e:	2100      	movs	r1, #0
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f001 fad7 	bl	8008fc4 <USBD_LL_StallEP>
 8007a16:	e015      	b.n	8007a44 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00d      	beq.n	8007a40 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d108      	bne.n	8007a40 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	7afa      	ldrb	r2, [r7, #11]
 8007a38:	4611      	mov	r1, r2
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	4798      	blx	r3
 8007a3e:	e001      	b.n	8007a44 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a40:	2302      	movs	r3, #2
 8007a42:	e000      	b.n	8007a46 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	460b      	mov	r3, r1
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d17f      	bne.n	8007b62 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3314      	adds	r3, #20
 8007a66:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d15c      	bne.n	8007b2c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d915      	bls.n	8007aaa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 febe 	bl	8008818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f001 fb39 	bl	800911a <USBD_LL_PrepareReceive>
 8007aa8:	e04e      	b.n	8007b48 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	6912      	ldr	r2, [r2, #16]
 8007ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab6:	fb01 f202 	mul.w	r2, r1, r2
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11c      	bne.n	8007afa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d316      	bcc.n	8007afa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d20f      	bcs.n	8007afa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fe9a 	bl	8008818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aec:	2300      	movs	r3, #0
 8007aee:	2200      	movs	r2, #0
 8007af0:	2100      	movs	r1, #0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f001 fb11 	bl	800911a <USBD_LL_PrepareReceive>
 8007af8:	e026      	b.n	8007b48 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d105      	bne.n	8007b1c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b1c:	2180      	movs	r1, #128	@ 0x80
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 fa50 	bl	8008fc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fecc 	bl	80088c2 <USBD_CtlReceiveStatus>
 8007b2a:	e00d      	b.n	8007b48 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d004      	beq.n	8007b40 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b40:	2180      	movs	r1, #128	@ 0x80
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fa3e 	bl	8008fc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d11d      	bne.n	8007b8e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fe81 	bl	800785a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b60:	e015      	b.n	8007b8e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d108      	bne.n	8007b8a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	7afa      	ldrb	r2, [r7, #11]
 8007b82:	4611      	mov	r1, r2
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	4798      	blx	r3
 8007b88:	e001      	b.n	8007b8e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e000      	b.n	8007b90 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ba0:	2340      	movs	r3, #64	@ 0x40
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f9c7 	bl	8008f3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2240      	movs	r2, #64	@ 0x40
 8007bb8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bbc:	2340      	movs	r3, #64	@ 0x40
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2180      	movs	r1, #128	@ 0x80
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f9b9 	bl	8008f3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2240      	movs	r2, #64	@ 0x40
 8007bd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6852      	ldr	r2, [r2, #4]
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d105      	bne.n	8007c7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr

08007c8a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d10b      	bne.n	8007cb4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d005      	beq.n	8007ce6 <USBD_StdDevReq+0x26>
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d84f      	bhi.n	8007d7e <USBD_StdDevReq+0xbe>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <USBD_StdDevReq+0x36>
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d14b      	bne.n	8007d7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      break;
 8007cf4:	e048      	b.n	8007d88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	2b09      	cmp	r3, #9
 8007cfc:	d839      	bhi.n	8007d72 <USBD_StdDevReq+0xb2>
 8007cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <USBD_StdDevReq+0x44>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d55 	.word	0x08007d55
 8007d08:	08007d69 	.word	0x08007d69
 8007d0c:	08007d73 	.word	0x08007d73
 8007d10:	08007d5f 	.word	0x08007d5f
 8007d14:	08007d73 	.word	0x08007d73
 8007d18:	08007d37 	.word	0x08007d37
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d73 	.word	0x08007d73
 8007d24:	08007d4b 	.word	0x08007d4b
 8007d28:	08007d41 	.word	0x08007d41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f9dc 	bl	80080ec <USBD_GetDescriptor>
          break;
 8007d34:	e022      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fb3f 	bl	80083bc <USBD_SetAddress>
          break;
 8007d3e:	e01d      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb7e 	bl	8008444 <USBD_SetConfig>
          break;
 8007d48:	e018      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc07 	bl	8008560 <USBD_GetConfig>
          break;
 8007d52:	e013      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fc37 	bl	80085ca <USBD_GetStatus>
          break;
 8007d5c:	e00e      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc65 	bl	8008630 <USBD_SetFeature>
          break;
 8007d66:	e009      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc74 	bl	8008658 <USBD_ClrFeature>
          break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcc9 	bl	800870c <USBD_CtlError>
          break;
 8007d7a:	bf00      	nop
      }
      break;
 8007d7c:	e004      	b.n	8007d88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fcc3 	bl	800870c <USBD_CtlError>
      break;
 8007d86:	bf00      	nop
  }

  return ret;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop

08007d94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d005      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007dae:	2b40      	cmp	r3, #64	@ 0x40
 8007db0:	d82e      	bhi.n	8007e10 <USBD_StdItfReq+0x7c>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d12a      	bne.n	8007e10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d81d      	bhi.n	8007e02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	889b      	ldrh	r3, [r3, #4]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d813      	bhi.n	8007df8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d110      	bne.n	8007e0c <USBD_StdItfReq+0x78>
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fd53 	bl	800889c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007df6:	e009      	b.n	8007e0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fc86 	bl	800870c <USBD_CtlError>
          break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc81 	bl	800870c <USBD_CtlError>
          break;
 8007e0a:	e000      	b.n	8007e0e <USBD_StdItfReq+0x7a>
          break;
 8007e0c:	bf00      	nop
      }
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc7a 	bl	800870c <USBD_CtlError>
      break;
 8007e18:	bf00      	nop
  }

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	889b      	ldrh	r3, [r3, #4]
 8007e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d007      	beq.n	8007e54 <USBD_StdEPReq+0x30>
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	f200 8146 	bhi.w	80080d6 <USBD_StdEPReq+0x2b2>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <USBD_StdEPReq+0x40>
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f040 8141 	bne.w	80080d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
      break;
 8007e62:	e13d      	b.n	80080e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d10a      	bne.n	8007e86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	e12d      	b.n	80080e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d007      	beq.n	8007e9e <USBD_StdEPReq+0x7a>
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	f300 811b 	bgt.w	80080ca <USBD_StdEPReq+0x2a6>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d072      	beq.n	8007f7e <USBD_StdEPReq+0x15a>
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d03a      	beq.n	8007f12 <USBD_StdEPReq+0xee>
 8007e9c:	e115      	b.n	80080ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d002      	beq.n	8007eae <USBD_StdEPReq+0x8a>
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d015      	beq.n	8007ed8 <USBD_StdEPReq+0xb4>
 8007eac:	e02b      	b.n	8007f06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <USBD_StdEPReq+0xaa>
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b80      	cmp	r3, #128	@ 0x80
 8007eb8:	d009      	beq.n	8007ece <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 f880 	bl	8008fc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ec4:	2180      	movs	r1, #128	@ 0x80
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 f87c 	bl	8008fc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ecc:	e020      	b.n	8007f10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc1b 	bl	800870c <USBD_CtlError>
              break;
 8007ed6:	e01b      	b.n	8007f10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10e      	bne.n	8007efe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_StdEPReq+0xda>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	@ 0x80
 8007eea:	d008      	beq.n	8007efe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f863 	bl	8008fc4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fccc 	bl	800889c <USBD_CtlSendStatus>

              break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fbff 	bl	800870c <USBD_CtlError>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e0e0      	b.n	80080d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d002      	beq.n	8007f22 <USBD_StdEPReq+0xfe>
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d015      	beq.n	8007f4c <USBD_StdEPReq+0x128>
 8007f20:	e026      	b.n	8007f70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00c      	beq.n	8007f42 <USBD_StdEPReq+0x11e>
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b80      	cmp	r3, #128	@ 0x80
 8007f2c:	d009      	beq.n	8007f42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f846 	bl	8008fc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f38:	2180      	movs	r1, #128	@ 0x80
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f842 	bl	8008fc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f40:	e01c      	b.n	8007f7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fbe1 	bl	800870c <USBD_CtlError>
              break;
 8007f4a:	e017      	b.n	8007f7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	885b      	ldrh	r3, [r3, #2]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d112      	bne.n	8007f7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f84d 	bl	8009002 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fc97 	bl	800889c <USBD_CtlSendStatus>
              }
              break;
 8007f6e:	e004      	b.n	8007f7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fbca 	bl	800870c <USBD_CtlError>
              break;
 8007f78:	e000      	b.n	8007f7c <USBD_StdEPReq+0x158>
              break;
 8007f7a:	bf00      	nop
          }
          break;
 8007f7c:	e0aa      	b.n	80080d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_StdEPReq+0x16a>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d032      	beq.n	8007ff2 <USBD_StdEPReq+0x1ce>
 8007f8c:	e097      	b.n	80080be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <USBD_StdEPReq+0x180>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b80      	cmp	r3, #128	@ 0x80
 8007f98:	d004      	beq.n	8007fa4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fbb5 	bl	800870c <USBD_CtlError>
                break;
 8007fa2:	e091      	b.n	80080c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0b      	bge.n	8007fc4 <USBD_StdEPReq+0x1a0>
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3310      	adds	r3, #16
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	e00b      	b.n	8007fdc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3304      	adds	r3, #4
 8007fdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fbf8 	bl	80087e0 <USBD_CtlSendData>
              break;
 8007ff0:	e06a      	b.n	80080c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da11      	bge.n	800801e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	3318      	adds	r3, #24
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d117      	bne.n	8008044 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb78 	bl	800870c <USBD_CtlError>
                  break;
 800801c:	e054      	b.n	80080c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb65 	bl	800870c <USBD_CtlError>
                  break;
 8008042:	e041      	b.n	80080c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da0b      	bge.n	8008064 <USBD_StdEPReq+0x240>
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	3310      	adds	r3, #16
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	3304      	adds	r3, #4
 8008062:	e00b      	b.n	800807c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	3304      	adds	r3, #4
 800807c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0x266>
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b80      	cmp	r3, #128	@ 0x80
 8008088:	d103      	bne.n	8008092 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e00e      	b.n	80080b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 ffd2 	bl	8009040 <USBD_LL_IsStallEP>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e002      	b.n	80080b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2202      	movs	r2, #2
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fb92 	bl	80087e0 <USBD_CtlSendData>
              break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb23 	bl	800870c <USBD_CtlError>
              break;
 80080c6:	bf00      	nop
          }
          break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb1d 	bl	800870c <USBD_CtlError>
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb17 	bl	800870c <USBD_CtlError>
      break;
 80080de:	bf00      	nop
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	2b06      	cmp	r3, #6
 800810e:	f200 8128 	bhi.w	8008362 <USBD_GetDescriptor+0x276>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USBD_GetDescriptor+0x2c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008135 	.word	0x08008135
 800811c:	0800814d 	.word	0x0800814d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	08008363 	.word	0x08008363
 8008128:	08008363 	.word	0x08008363
 800812c:	08008303 	.word	0x08008303
 8008130:	0800832f 	.word	0x0800832f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
      break;
 800814a:	e112      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7c1b      	ldrb	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	2202      	movs	r2, #2
 800816c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800816e:	e100      	b.n	8008372 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	f107 0208 	add.w	r2, r7, #8
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	2202      	movs	r2, #2
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0f2      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b05      	cmp	r3, #5
 8008194:	f200 80ac 	bhi.w	80082f0 <USBD_GetDescriptor+0x204>
 8008198:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <USBD_GetDescriptor+0xb4>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008255 	.word	0x08008255
 80081b0:	08008289 	.word	0x08008289
 80081b4:	080082bd 	.word	0x080082bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e091      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa94 	bl	800870c <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e089      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e077      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa7a 	bl	800870c <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e06f      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e05d      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa60 	bl	800870c <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e055      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e043      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa46 	bl	800870c <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e03b      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7c12      	ldrb	r2, [r2, #16]
 80082a0:	f107 0108 	add.w	r1, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082aa:	e029      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa2c 	bl	800870c <USBD_CtlError>
            err++;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	3301      	adds	r3, #1
 80082b8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ba:	e021      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7c12      	ldrb	r2, [r2, #16]
 80082d4:	f107 0108 	add.w	r1, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082de:	e00f      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa12 	bl	800870c <USBD_CtlError>
            err++;
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	3301      	adds	r3, #1
 80082ec:	72fb      	strb	r3, [r7, #11]
          break;
 80082ee:	e007      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa0a 	bl	800870c <USBD_CtlError>
          err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80082fe:	e038      	b.n	8008372 <USBD_GetDescriptor+0x286>
 8008300:	e037      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7c1b      	ldrb	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008312:	f107 0208 	add.w	r2, r7, #8
 8008316:	4610      	mov	r0, r2
 8008318:	4798      	blx	r3
 800831a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800831c:	e029      	b.n	8008372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f9f3 	bl	800870c <USBD_CtlError>
        err++;
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	3301      	adds	r3, #1
 800832a:	72fb      	strb	r3, [r7, #11]
      break;
 800832c:	e021      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7c1b      	ldrb	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10d      	bne.n	8008352 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	4610      	mov	r0, r2
 8008344:	4798      	blx	r3
 8008346:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	2207      	movs	r2, #7
 800834e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008350:	e00f      	b.n	8008372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9d9 	bl	800870c <USBD_CtlError>
        err++;
 800835a:	7afb      	ldrb	r3, [r7, #11]
 800835c:	3301      	adds	r3, #1
 800835e:	72fb      	strb	r3, [r7, #11]
      break;
 8008360:	e007      	b.n	8008372 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f9d1 	bl	800870c <USBD_CtlError>
      err++;
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	3301      	adds	r3, #1
 800836e:	72fb      	strb	r3, [r7, #11]
      break;
 8008370:	bf00      	nop
  }

  if (err != 0U)
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11c      	bne.n	80083b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008378:	893b      	ldrh	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d011      	beq.n	80083a2 <USBD_GetDescriptor+0x2b6>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	88db      	ldrh	r3, [r3, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88da      	ldrh	r2, [r3, #6]
 800838a:	893b      	ldrh	r3, [r7, #8]
 800838c:	4293      	cmp	r3, r2
 800838e:	bf28      	it	cs
 8008390:	4613      	movcs	r3, r2
 8008392:	b29b      	uxth	r3, r3
 8008394:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008396:	893b      	ldrh	r3, [r7, #8]
 8008398:	461a      	mov	r2, r3
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa1f 	bl	80087e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	88db      	ldrh	r3, [r3, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa76 	bl	800889c <USBD_CtlSendStatus>
 80083b0:	e000      	b.n	80083b4 <USBD_GetDescriptor+0x2c8>
    return;
 80083b2:	bf00      	nop
    }
  }
}
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	889b      	ldrh	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d130      	bne.n	8008430 <USBD_SetAddress+0x74>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	88db      	ldrh	r3, [r3, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d12c      	bne.n	8008430 <USBD_SetAddress+0x74>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	2b7f      	cmp	r3, #127	@ 0x7f
 80083dc:	d828      	bhi.n	8008430 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d104      	bne.n	80083fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f988 	bl	800870c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	e01d      	b.n	800843a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7bfa      	ldrb	r2, [r7, #15]
 8008402:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fe43 	bl	8009096 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa43 	bl	800889c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008424:	e009      	b.n	800843a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842e:	e004      	b.n	800843a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f96a 	bl	800870c <USBD_CtlError>
  }
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	b2da      	uxtb	r2, r3
 8008454:	4b41      	ldr	r3, [pc, #260]	@ (800855c <USBD_SetConfig+0x118>)
 8008456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008458:	4b40      	ldr	r3, [pc, #256]	@ (800855c <USBD_SetConfig+0x118>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d904      	bls.n	800846a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f952 	bl	800870c <USBD_CtlError>
 8008468:	e075      	b.n	8008556 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_SetConfig+0x36>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d023      	beq.n	80084c0 <USBD_SetConfig+0x7c>
 8008478:	e062      	b.n	8008540 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800847a:	4b38      	ldr	r3, [pc, #224]	@ (800855c <USBD_SetConfig+0x118>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01a      	beq.n	80084b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008482:	4b36      	ldr	r3, [pc, #216]	@ (800855c <USBD_SetConfig+0x118>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2203      	movs	r2, #3
 8008490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008494:	4b31      	ldr	r3, [pc, #196]	@ (800855c <USBD_SetConfig+0x118>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff f9e7 	bl	800786e <USBD_SetClassConfig>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d104      	bne.n	80084b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f92f 	bl	800870c <USBD_CtlError>
            return;
 80084ae:	e052      	b.n	8008556 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9f3 	bl	800889c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084b6:	e04e      	b.n	8008556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f9ef 	bl	800889c <USBD_CtlSendStatus>
        break;
 80084be:	e04a      	b.n	8008556 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80084c0:	4b26      	ldr	r3, [pc, #152]	@ (800855c <USBD_SetConfig+0x118>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d112      	bne.n	80084ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80084d0:	4b22      	ldr	r3, [pc, #136]	@ (800855c <USBD_SetConfig+0x118>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80084da:	4b20      	ldr	r3, [pc, #128]	@ (800855c <USBD_SetConfig+0x118>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff f9e3 	bl	80078ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f9d8 	bl	800889c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084ec:	e033      	b.n	8008556 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80084ee:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <USBD_SetConfig+0x118>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d01d      	beq.n	8008538 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff f9d1 	bl	80078ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800850a:	4b14      	ldr	r3, [pc, #80]	@ (800855c <USBD_SetConfig+0x118>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008514:	4b11      	ldr	r3, [pc, #68]	@ (800855c <USBD_SetConfig+0x118>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff f9a7 	bl	800786e <USBD_SetClassConfig>
 8008520:	4603      	mov	r3, r0
 8008522:	2b02      	cmp	r3, #2
 8008524:	d104      	bne.n	8008530 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f8ef 	bl	800870c <USBD_CtlError>
            return;
 800852e:	e012      	b.n	8008556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9b3 	bl	800889c <USBD_CtlSendStatus>
        break;
 8008536:	e00e      	b.n	8008556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9af 	bl	800889c <USBD_CtlSendStatus>
        break;
 800853e:	e00a      	b.n	8008556 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8e2 	bl	800870c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008548:	4b04      	ldr	r3, [pc, #16]	@ (800855c <USBD_SetConfig+0x118>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff f9ac 	bl	80078ac <USBD_ClrClassConfig>
        break;
 8008554:	bf00      	nop
    }
  }
}
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200003c0 	.word	0x200003c0

08008560 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d004      	beq.n	800857c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f8c9 	bl	800870c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800857a:	e022      	b.n	80085c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008582:	2b02      	cmp	r3, #2
 8008584:	dc02      	bgt.n	800858c <USBD_GetConfig+0x2c>
 8008586:	2b00      	cmp	r3, #0
 8008588:	dc03      	bgt.n	8008592 <USBD_GetConfig+0x32>
 800858a:	e015      	b.n	80085b8 <USBD_GetConfig+0x58>
 800858c:	2b03      	cmp	r3, #3
 800858e:	d00b      	beq.n	80085a8 <USBD_GetConfig+0x48>
 8008590:	e012      	b.n	80085b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3308      	adds	r3, #8
 800859c:	2201      	movs	r2, #1
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f91d 	bl	80087e0 <USBD_CtlSendData>
        break;
 80085a6:	e00c      	b.n	80085c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	2201      	movs	r2, #1
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f915 	bl	80087e0 <USBD_CtlSendData>
        break;
 80085b6:	e004      	b.n	80085c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8a6 	bl	800870c <USBD_CtlError>
        break;
 80085c0:	bf00      	nop
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085da:	3b01      	subs	r3, #1
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d81e      	bhi.n	800861e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	88db      	ldrh	r3, [r3, #6]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d004      	beq.n	80085f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f88e 	bl	800870c <USBD_CtlError>
        break;
 80085f0:	e01a      	b.n	8008628 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f043 0202 	orr.w	r2, r3, #2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	330c      	adds	r3, #12
 8008612:	2202      	movs	r2, #2
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8e2 	bl	80087e0 <USBD_CtlSendData>
      break;
 800861c:	e004      	b.n	8008628 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f873 	bl	800870c <USBD_CtlError>
      break;
 8008626:	bf00      	nop
  }
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d106      	bne.n	8008650 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f926 	bl	800889c <USBD_CtlSendStatus>
  }
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	3b01      	subs	r3, #1
 800866a:	2b02      	cmp	r3, #2
 800866c:	d80b      	bhi.n	8008686 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d10c      	bne.n	8008690 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f90c 	bl	800889c <USBD_CtlSendStatus>
      }
      break;
 8008684:	e004      	b.n	8008690 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f83f 	bl	800870c <USBD_CtlError>
      break;
 800868e:	e000      	b.n	8008692 <USBD_ClrFeature+0x3a>
      break;
 8008690:	bf00      	nop
  }
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	785a      	ldrb	r2, [r3, #1]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	3302      	adds	r3, #2
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	3303      	adds	r3, #3
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	4413      	add	r3, r2
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	3304      	adds	r3, #4
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	3305      	adds	r3, #5
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	3306      	adds	r3, #6
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	3307      	adds	r3, #7
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	80da      	strh	r2, [r3, #6]

}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008716:	2180      	movs	r1, #128	@ 0x80
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc53 	bl	8008fc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800871e:	2100      	movs	r1, #0
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc4f 	bl	8008fc4 <USBD_LL_StallEP>
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d032      	beq.n	80087aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f834 	bl	80087b2 <USBD_GetLen>
 800874a:	4603      	mov	r3, r0
 800874c:	3301      	adds	r3, #1
 800874e:	b29b      	uxth	r3, r3
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	75fa      	strb	r2, [r7, #23]
 800875e:	461a      	mov	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4413      	add	r3, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	75fa      	strb	r2, [r7, #23]
 8008770:	461a      	mov	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	2203      	movs	r2, #3
 8008778:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800877a:	e012      	b.n	80087a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	60fa      	str	r2, [r7, #12]
 8008782:	7dfa      	ldrb	r2, [r7, #23]
 8008784:	1c51      	adds	r1, r2, #1
 8008786:	75f9      	strb	r1, [r7, #23]
 8008788:	4611      	mov	r1, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	440a      	add	r2, r1
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	75fa      	strb	r2, [r7, #23]
 8008798:	461a      	mov	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e8      	bne.n	800877c <USBD_GetString+0x4e>
    }
  }
}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80087be:	e005      	b.n	80087cc <USBD_GetLen+0x1a>
  {
    len++;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	3301      	adds	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3301      	adds	r3, #1
 80087ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f5      	bne.n	80087c0 <USBD_GetLen+0xe>
  }

  return len;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fc63 	bl	80090d4 <USBD_LL_Transmit>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	2100      	movs	r1, #0
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fc51 	bl	80090d4 <USBD_LL_Transmit>

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2203      	movs	r2, #3
 800884e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800885a:	88fa      	ldrh	r2, [r7, #6]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	2100      	movs	r1, #0
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fc56 	bl	800911a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fc44 	bl	800911a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc0e 	bl	80090d4 <USBD_LL_Transmit>

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2205      	movs	r2, #5
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc1e 	bl	800911a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4912      	ldr	r1, [pc, #72]	@ (8008938 <MX_USB_DEVICE_Init+0x50>)
 80088f0:	4812      	ldr	r0, [pc, #72]	@ (800893c <MX_USB_DEVICE_Init+0x54>)
 80088f2:	f7fe ff62 	bl	80077ba <USBD_Init>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088fc:	f7f8 fcfa 	bl	80012f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008900:	490f      	ldr	r1, [pc, #60]	@ (8008940 <MX_USB_DEVICE_Init+0x58>)
 8008902:	480e      	ldr	r0, [pc, #56]	@ (800893c <MX_USB_DEVICE_Init+0x54>)
 8008904:	f7fe ff84 	bl	8007810 <USBD_RegisterClass>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800890e:	f7f8 fcf1 	bl	80012f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008912:	490c      	ldr	r1, [pc, #48]	@ (8008944 <MX_USB_DEVICE_Init+0x5c>)
 8008914:	4809      	ldr	r0, [pc, #36]	@ (800893c <MX_USB_DEVICE_Init+0x54>)
 8008916:	f7fe feb5 	bl	8007684 <USBD_CDC_RegisterInterface>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008920:	f7f8 fce8 	bl	80012f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008924:	4805      	ldr	r0, [pc, #20]	@ (800893c <MX_USB_DEVICE_Init+0x54>)
 8008926:	f7fe ff8c 	bl	8007842 <USBD_Start>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008930:	f7f8 fce0 	bl	80012f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008934:	bf00      	nop
 8008936:	bd80      	pop	{r7, pc}
 8008938:	2000013c 	.word	0x2000013c
 800893c:	200003c4 	.word	0x200003c4
 8008940:	20000028 	.word	0x20000028
 8008944:	2000012c 	.word	0x2000012c

08008948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800894c:	2200      	movs	r2, #0
 800894e:	4905      	ldr	r1, [pc, #20]	@ (8008964 <CDC_Init_FS+0x1c>)
 8008950:	4805      	ldr	r0, [pc, #20]	@ (8008968 <CDC_Init_FS+0x20>)
 8008952:	f7fe fead 	bl	80076b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008956:	4905      	ldr	r1, [pc, #20]	@ (800896c <CDC_Init_FS+0x24>)
 8008958:	4803      	ldr	r0, [pc, #12]	@ (8008968 <CDC_Init_FS+0x20>)
 800895a:	f7fe fec2 	bl	80076e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800895e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008960:	4618      	mov	r0, r3
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000a88 	.word	0x20000a88
 8008968:	200003c4 	.word	0x200003c4
 800896c:	20000688 	.word	0x20000688

08008970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008976:	4618      	mov	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr
	...

08008980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
 800898c:	4613      	mov	r3, r2
 800898e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	2b23      	cmp	r3, #35	@ 0x23
 8008994:	d84a      	bhi.n	8008a2c <CDC_Control_FS+0xac>
 8008996:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <CDC_Control_FS+0x1c>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	08008a2d 	.word	0x08008a2d
 80089a0:	08008a2d 	.word	0x08008a2d
 80089a4:	08008a2d 	.word	0x08008a2d
 80089a8:	08008a2d 	.word	0x08008a2d
 80089ac:	08008a2d 	.word	0x08008a2d
 80089b0:	08008a2d 	.word	0x08008a2d
 80089b4:	08008a2d 	.word	0x08008a2d
 80089b8:	08008a2d 	.word	0x08008a2d
 80089bc:	08008a2d 	.word	0x08008a2d
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	08008a2d 	.word	0x08008a2d
 80089cc:	08008a2d 	.word	0x08008a2d
 80089d0:	08008a2d 	.word	0x08008a2d
 80089d4:	08008a2d 	.word	0x08008a2d
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008a2d 	.word	0x08008a2d
 80089e0:	08008a2d 	.word	0x08008a2d
 80089e4:	08008a2d 	.word	0x08008a2d
 80089e8:	08008a2d 	.word	0x08008a2d
 80089ec:	08008a2d 	.word	0x08008a2d
 80089f0:	08008a2d 	.word	0x08008a2d
 80089f4:	08008a2d 	.word	0x08008a2d
 80089f8:	08008a2d 	.word	0x08008a2d
 80089fc:	08008a2d 	.word	0x08008a2d
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a2d 	.word	0x08008a2d
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a2d 	.word	0x08008a2d
 8008a24:	08008a2d 	.word	0x08008a2d
 8008a28:	08008a2d 	.word	0x08008a2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a2c:	bf00      	nop
  }

  return (USBD_OK);
 8008a2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop

08008a3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4805      	ldr	r0, [pc, #20]	@ (8008a60 <CDC_Receive_FS+0x24>)
 8008a4a:	f7fe fe4a 	bl	80076e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a4e:	4804      	ldr	r0, [pc, #16]	@ (8008a60 <CDC_Receive_FS+0x24>)
 8008a50:	f7fe fe89 	bl	8007766 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	200003c4 	.word	0x200003c4

08008a64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a74:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <CDC_Transmit_FS+0x48>)
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e00b      	b.n	8008aa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4806      	ldr	r0, [pc, #24]	@ (8008aac <CDC_Transmit_FS+0x48>)
 8008a92:	f7fe fe0d 	bl	80076b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a96:	4805      	ldr	r0, [pc, #20]	@ (8008aac <CDC_Transmit_FS+0x48>)
 8008a98:	f7fe fe36 	bl	8007708 <USBD_CDC_TransmitPacket>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200003c4 	.word	0x200003c4

08008ab0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2212      	movs	r2, #18
 8008ac0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ac2:	4b03      	ldr	r3, [pc, #12]	@ (8008ad0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000158 	.word	0x20000158

08008ad4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	@ (8008af4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	2000016c 	.word	0x2000016c

08008af8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4907      	ldr	r1, [pc, #28]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b0e:	4808      	ldr	r0, [pc, #32]	@ (8008b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b10:	f7ff fe0d 	bl	800872e <USBD_GetString>
 8008b14:	e004      	b.n	8008b20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4904      	ldr	r1, [pc, #16]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b1a:	4805      	ldr	r0, [pc, #20]	@ (8008b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b1c:	f7ff fe07 	bl	800872e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b20:	4b02      	ldr	r3, [pc, #8]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000e88 	.word	0x20000e88
 8008b30:	0800bef4 	.word	0x0800bef4

08008b34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	4904      	ldr	r1, [pc, #16]	@ (8008b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b44:	4804      	ldr	r0, [pc, #16]	@ (8008b58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b46:	f7ff fdf2 	bl	800872e <USBD_GetString>
  return USBD_StrDesc;
 8008b4a:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000e88 	.word	0x20000e88
 8008b58:	0800bf0c 	.word	0x0800bf0c

08008b5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	221a      	movs	r2, #26
 8008b6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b6e:	f000 f843 	bl	8008bf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b72:	4b02      	ldr	r3, [pc, #8]	@ (8008b7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20000170 	.word	0x20000170

08008b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4907      	ldr	r1, [pc, #28]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b96:	4808      	ldr	r0, [pc, #32]	@ (8008bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b98:	f7ff fdc9 	bl	800872e <USBD_GetString>
 8008b9c:	e004      	b.n	8008ba8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4904      	ldr	r1, [pc, #16]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ba2:	4805      	ldr	r0, [pc, #20]	@ (8008bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ba4:	f7ff fdc3 	bl	800872e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba8:	4b02      	ldr	r3, [pc, #8]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000e88 	.word	0x20000e88
 8008bb8:	0800bf20 	.word	0x0800bf20

08008bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4907      	ldr	r1, [pc, #28]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bd2:	4808      	ldr	r0, [pc, #32]	@ (8008bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bd4:	f7ff fdab 	bl	800872e <USBD_GetString>
 8008bd8:	e004      	b.n	8008be4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4904      	ldr	r1, [pc, #16]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bde:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008be0:	f7ff fda5 	bl	800872e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000e88 	.word	0x20000e88
 8008bf4:	0800bf2c 	.word	0x0800bf2c

08008bf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8008c3c <Get_SerialNum+0x44>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c04:	4b0e      	ldr	r3, [pc, #56]	@ (8008c40 <Get_SerialNum+0x48>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c44 <Get_SerialNum+0x4c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c1e:	2208      	movs	r2, #8
 8008c20:	4909      	ldr	r1, [pc, #36]	@ (8008c48 <Get_SerialNum+0x50>)
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f814 	bl	8008c50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c28:	2204      	movs	r2, #4
 8008c2a:	4908      	ldr	r1, [pc, #32]	@ (8008c4c <Get_SerialNum+0x54>)
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f80f 	bl	8008c50 <IntToUnicode>
  }
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	1ffff7e8 	.word	0x1ffff7e8
 8008c40:	1ffff7ec 	.word	0x1ffff7ec
 8008c44:	1ffff7f0 	.word	0x1ffff7f0
 8008c48:	20000172 	.word	0x20000172
 8008c4c:	20000182 	.word	0x20000182

08008c50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
 8008c66:	e027      	b.n	8008cb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	0f1b      	lsrs	r3, r3, #28
 8008c6c:	2b09      	cmp	r3, #9
 8008c6e:	d80b      	bhi.n	8008c88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	0f1b      	lsrs	r3, r3, #28
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	440b      	add	r3, r1
 8008c80:	3230      	adds	r2, #48	@ 0x30
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e00a      	b.n	8008c9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0f1b      	lsrs	r3, r3, #28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	4619      	mov	r1, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	440b      	add	r3, r1
 8008c98:	3237      	adds	r2, #55	@ 0x37
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	3301      	adds	r3, #1
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]
 8008cb8:	7dfa      	ldrb	r2, [r7, #23]
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d3d3      	bcc.n	8008c68 <IntToUnicode+0x18>
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr

08008ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8008d10 <HAL_PCD_MspInit+0x44>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d113      	bne.n	8008d06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <HAL_PCD_MspInit+0x48>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8008d14 <HAL_PCD_MspInit+0x48>)
 8008ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ce8:	61d3      	str	r3, [r2, #28]
 8008cea:	4b0a      	ldr	r3, [pc, #40]	@ (8008d14 <HAL_PCD_MspInit+0x48>)
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	2014      	movs	r0, #20
 8008cfc:	f7f8 fe29 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d00:	2014      	movs	r0, #20
 8008d02:	f7f8 fe42 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40005c00 	.word	0x40005c00
 8008d14:	40021000 	.word	0x40021000

08008d18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe fdcf 	bl	80078d2 <USBD_LL_SetupStage>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7fe fe01 	bl	800796c <USBD_LL_DataOutStage>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	440b      	add	r3, r1
 8008d92:	3324      	adds	r3, #36	@ 0x24
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f7fe fe58 	bl	8007a4e <USBD_LL_DataInStage>
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe ff68 	bl	8007c8a <USBD_LL_SOF>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	799b      	ldrb	r3, [r3, #6]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d001      	beq.n	8008dda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dd6:	f7f8 fa8d 	bl	80012f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe ff18 	bl	8007c1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fed1 	bl	8007b98 <USBD_LL_Reset>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe ff12 	bl	8007c38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7a9b      	ldrb	r3, [r3, #10]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d005      	beq.n	8008e28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_PCD_SuspendCallback+0x30>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4a03      	ldr	r2, [pc, #12]	@ (8008e30 <HAL_PCD_SuspendCallback+0x30>)
 8008e22:	f043 0306 	orr.w	r3, r3, #6
 8008e26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	e000ed00 	.word	0xe000ed00

08008e34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe ff0c 	bl	8007c60 <USBD_LL_Resume>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e58:	4a28      	ldr	r2, [pc, #160]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a26      	ldr	r2, [pc, #152]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e64:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e68:	4b24      	ldr	r3, [pc, #144]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e6a:	4a25      	ldr	r2, [pc, #148]	@ (8008f00 <USBD_LL_Init+0xb0>)
 8008e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e6e:	4b23      	ldr	r3, [pc, #140]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e70:	2208      	movs	r2, #8
 8008e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e74:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e76:	2202      	movs	r2, #2
 8008e78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e7a:	4b20      	ldr	r3, [pc, #128]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e80:	4b1e      	ldr	r3, [pc, #120]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e86:	4b1d      	ldr	r3, [pc, #116]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e8c:	481b      	ldr	r0, [pc, #108]	@ (8008efc <USBD_LL_Init+0xac>)
 8008e8e:	f7f8 ff4a 	bl	8001d26 <HAL_PCD_Init>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e98:	f7f8 fa2c 	bl	80012f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ea2:	2318      	movs	r3, #24
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	f7fa fc5b 	bl	8003762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008eb2:	2358      	movs	r3, #88	@ 0x58
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2180      	movs	r1, #128	@ 0x80
 8008eb8:	f7fa fc53 	bl	8003762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ec2:	23c0      	movs	r3, #192	@ 0xc0
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2181      	movs	r1, #129	@ 0x81
 8008ec8:	f7fa fc4b 	bl	8003762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ed2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2101      	movs	r1, #1
 8008eda:	f7fa fc42 	bl	8003762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2182      	movs	r1, #130	@ 0x82
 8008eec:	f7fa fc39 	bl	8003762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20001088 	.word	0x20001088
 8008f00:	40005c00 	.word	0x40005c00

08008f04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f8 fff9 	bl	8001f12 <HAL_PCD_Start>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f94e 	bl	80091c8 <USBD_Get_USB_Status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	461a      	mov	r2, r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	70fb      	strb	r3, [r7, #3]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70bb      	strb	r3, [r7, #2]
 8008f50:	4613      	mov	r3, r2
 8008f52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f62:	78bb      	ldrb	r3, [r7, #2]
 8008f64:	883a      	ldrh	r2, [r7, #0]
 8008f66:	78f9      	ldrb	r1, [r7, #3]
 8008f68:	f7f9 f94d 	bl	8002206 <HAL_PCD_EP_Open>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f928 	bl	80091c8 <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7f9 f98b 	bl	80022c0 <HAL_PCD_EP_Close>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f909 	bl	80091c8 <USBD_Get_USB_Status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7f9 fa33 	bl	800244e <HAL_PCD_EP_SetStall>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f8ea 	bl	80091c8 <USBD_Get_USB_Status>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7f9 fa74 	bl	800250e <HAL_PCD_EP_ClrStall>
 8009026:	4603      	mov	r3, r0
 8009028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f8cb 	bl	80091c8 <USBD_Get_USB_Status>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009036:	7bbb      	ldrb	r3, [r7, #14]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009052:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009058:	2b00      	cmp	r3, #0
 800905a:	da0b      	bge.n	8009074 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009062:	68f9      	ldr	r1, [r7, #12]
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	440b      	add	r3, r1
 800906e:	3312      	adds	r3, #18
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	e00b      	b.n	800908c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	440b      	add	r3, r1
 8009086:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800908a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr

08009096 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f9 f882 	bl	80021be <HAL_PCD_SetAddress>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f881 	bl	80091c8 <USBD_Get_USB_Status>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	461a      	mov	r2, r3
 80090e0:	460b      	mov	r3, r1
 80090e2:	72fb      	strb	r3, [r7, #11]
 80090e4:	4613      	mov	r3, r2
 80090e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	7af9      	ldrb	r1, [r7, #11]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f7f9 f970 	bl	80023e0 <HAL_PCD_EP_Transmit>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f85e 	bl	80091c8 <USBD_Get_USB_Status>
 800910c:	4603      	mov	r3, r0
 800910e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009110:	7dbb      	ldrb	r3, [r7, #22]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	461a      	mov	r2, r3
 8009126:	460b      	mov	r3, r1
 8009128:	72fb      	strb	r3, [r7, #11]
 800912a:	4613      	mov	r3, r2
 800912c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800913c:	893b      	ldrh	r3, [r7, #8]
 800913e:	7af9      	ldrb	r1, [r7, #11]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	f7f9 f905 	bl	8002350 <HAL_PCD_EP_Receive>
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f83b 	bl	80091c8 <USBD_Get_USB_Status>
 8009152:	4603      	mov	r3, r0
 8009154:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009156:	7dbb      	ldrb	r3, [r7, #22]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009172:	78fa      	ldrb	r2, [r7, #3]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7f9 f91b 	bl	80023b2 <HAL_PCD_EP_GetRxCount>
 800917c:	4603      	mov	r3, r0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009190:	4b02      	ldr	r3, [pc, #8]	@ (800919c <USBD_static_malloc+0x14>)
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	bc80      	pop	{r7}
 800919a:	4770      	bx	lr
 800919c:	20001360 	.word	0x20001360

080091a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]

}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d817      	bhi.n	800920c <USBD_Get_USB_Status+0x44>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <USBD_Get_USB_Status+0x1c>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	080091fb 	.word	0x080091fb
 80091ec:	08009201 	.word	0x08009201
 80091f0:	08009207 	.word	0x08009207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
    break;
 80091f8:	e00b      	b.n	8009212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091fa:	2302      	movs	r3, #2
 80091fc:	73fb      	strb	r3, [r7, #15]
    break;
 80091fe:	e008      	b.n	8009212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009200:	2301      	movs	r3, #1
 8009202:	73fb      	strb	r3, [r7, #15]
    break;
 8009204:	e005      	b.n	8009212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009206:	2302      	movs	r3, #2
 8009208:	73fb      	strb	r3, [r7, #15]
    break;
 800920a:	e002      	b.n	8009212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800920c:	2302      	movs	r3, #2
 800920e:	73fb      	strb	r3, [r7, #15]
    break;
 8009210:	bf00      	nop
  }
  return usb_status;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop

08009220 <__cvt>:
 8009220:	2b00      	cmp	r3, #0
 8009222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009226:	461d      	mov	r5, r3
 8009228:	bfbb      	ittet	lt
 800922a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800922e:	461d      	movlt	r5, r3
 8009230:	2300      	movge	r3, #0
 8009232:	232d      	movlt	r3, #45	@ 0x2d
 8009234:	b088      	sub	sp, #32
 8009236:	4614      	mov	r4, r2
 8009238:	bfb8      	it	lt
 800923a:	4614      	movlt	r4, r2
 800923c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800923e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009240:	7013      	strb	r3, [r2, #0]
 8009242:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009244:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009248:	f023 0820 	bic.w	r8, r3, #32
 800924c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009250:	d005      	beq.n	800925e <__cvt+0x3e>
 8009252:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009256:	d100      	bne.n	800925a <__cvt+0x3a>
 8009258:	3601      	adds	r6, #1
 800925a:	2302      	movs	r3, #2
 800925c:	e000      	b.n	8009260 <__cvt+0x40>
 800925e:	2303      	movs	r3, #3
 8009260:	aa07      	add	r2, sp, #28
 8009262:	9204      	str	r2, [sp, #16]
 8009264:	aa06      	add	r2, sp, #24
 8009266:	e9cd a202 	strd	sl, r2, [sp, #8]
 800926a:	e9cd 3600 	strd	r3, r6, [sp]
 800926e:	4622      	mov	r2, r4
 8009270:	462b      	mov	r3, r5
 8009272:	f000 fe6d 	bl	8009f50 <_dtoa_r>
 8009276:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800927a:	4607      	mov	r7, r0
 800927c:	d119      	bne.n	80092b2 <__cvt+0x92>
 800927e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d50e      	bpl.n	80092a2 <__cvt+0x82>
 8009284:	eb00 0906 	add.w	r9, r0, r6
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4620      	mov	r0, r4
 800928e:	4629      	mov	r1, r5
 8009290:	f7f7 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8009294:	b108      	cbz	r0, 800929a <__cvt+0x7a>
 8009296:	f8cd 901c 	str.w	r9, [sp, #28]
 800929a:	2230      	movs	r2, #48	@ 0x30
 800929c:	9b07      	ldr	r3, [sp, #28]
 800929e:	454b      	cmp	r3, r9
 80092a0:	d31e      	bcc.n	80092e0 <__cvt+0xc0>
 80092a2:	4638      	mov	r0, r7
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80092a8:	1bdb      	subs	r3, r3, r7
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	b008      	add	sp, #32
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80092b6:	eb00 0906 	add.w	r9, r0, r6
 80092ba:	d1e5      	bne.n	8009288 <__cvt+0x68>
 80092bc:	7803      	ldrb	r3, [r0, #0]
 80092be:	2b30      	cmp	r3, #48	@ 0x30
 80092c0:	d10a      	bne.n	80092d8 <__cvt+0xb8>
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f7 fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80092ce:	b918      	cbnz	r0, 80092d8 <__cvt+0xb8>
 80092d0:	f1c6 0601 	rsb	r6, r6, #1
 80092d4:	f8ca 6000 	str.w	r6, [sl]
 80092d8:	f8da 3000 	ldr.w	r3, [sl]
 80092dc:	4499      	add	r9, r3
 80092de:	e7d3      	b.n	8009288 <__cvt+0x68>
 80092e0:	1c59      	adds	r1, r3, #1
 80092e2:	9107      	str	r1, [sp, #28]
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	e7d9      	b.n	800929c <__cvt+0x7c>

080092e8 <__exponent>:
 80092e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ea:	2900      	cmp	r1, #0
 80092ec:	bfb6      	itet	lt
 80092ee:	232d      	movlt	r3, #45	@ 0x2d
 80092f0:	232b      	movge	r3, #43	@ 0x2b
 80092f2:	4249      	neglt	r1, r1
 80092f4:	2909      	cmp	r1, #9
 80092f6:	7002      	strb	r2, [r0, #0]
 80092f8:	7043      	strb	r3, [r0, #1]
 80092fa:	dd29      	ble.n	8009350 <__exponent+0x68>
 80092fc:	f10d 0307 	add.w	r3, sp, #7
 8009300:	461d      	mov	r5, r3
 8009302:	270a      	movs	r7, #10
 8009304:	fbb1 f6f7 	udiv	r6, r1, r7
 8009308:	461a      	mov	r2, r3
 800930a:	fb07 1416 	mls	r4, r7, r6, r1
 800930e:	3430      	adds	r4, #48	@ 0x30
 8009310:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009314:	460c      	mov	r4, r1
 8009316:	2c63      	cmp	r4, #99	@ 0x63
 8009318:	4631      	mov	r1, r6
 800931a:	f103 33ff 	add.w	r3, r3, #4294967295
 800931e:	dcf1      	bgt.n	8009304 <__exponent+0x1c>
 8009320:	3130      	adds	r1, #48	@ 0x30
 8009322:	1e94      	subs	r4, r2, #2
 8009324:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009328:	4623      	mov	r3, r4
 800932a:	1c41      	adds	r1, r0, #1
 800932c:	42ab      	cmp	r3, r5
 800932e:	d30a      	bcc.n	8009346 <__exponent+0x5e>
 8009330:	f10d 0309 	add.w	r3, sp, #9
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	42ac      	cmp	r4, r5
 8009338:	bf88      	it	hi
 800933a:	2300      	movhi	r3, #0
 800933c:	3302      	adds	r3, #2
 800933e:	4403      	add	r3, r0
 8009340:	1a18      	subs	r0, r3, r0
 8009342:	b003      	add	sp, #12
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	f813 6b01 	ldrb.w	r6, [r3], #1
 800934a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800934e:	e7ed      	b.n	800932c <__exponent+0x44>
 8009350:	2330      	movs	r3, #48	@ 0x30
 8009352:	3130      	adds	r1, #48	@ 0x30
 8009354:	7083      	strb	r3, [r0, #2]
 8009356:	70c1      	strb	r1, [r0, #3]
 8009358:	1d03      	adds	r3, r0, #4
 800935a:	e7f1      	b.n	8009340 <__exponent+0x58>

0800935c <_printf_float>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	b091      	sub	sp, #68	@ 0x44
 8009362:	460c      	mov	r4, r1
 8009364:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009368:	4616      	mov	r6, r2
 800936a:	461f      	mov	r7, r3
 800936c:	4605      	mov	r5, r0
 800936e:	f000 fce1 	bl	8009d34 <_localeconv_r>
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	9308      	str	r3, [sp, #32]
 8009378:	f7f6 feea 	bl	8000150 <strlen>
 800937c:	2300      	movs	r3, #0
 800937e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009380:	f8d8 3000 	ldr.w	r3, [r8]
 8009384:	9009      	str	r0, [sp, #36]	@ 0x24
 8009386:	3307      	adds	r3, #7
 8009388:	f023 0307 	bic.w	r3, r3, #7
 800938c:	f103 0208 	add.w	r2, r3, #8
 8009390:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009394:	f8d4 b000 	ldr.w	fp, [r4]
 8009398:	f8c8 2000 	str.w	r2, [r8]
 800939c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80093a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80093b6:	4b9c      	ldr	r3, [pc, #624]	@ (8009628 <_printf_float+0x2cc>)
 80093b8:	f7f7 fb28 	bl	8000a0c <__aeabi_dcmpun>
 80093bc:	bb70      	cbnz	r0, 800941c <_printf_float+0xc0>
 80093be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	4b98      	ldr	r3, [pc, #608]	@ (8009628 <_printf_float+0x2cc>)
 80093c8:	f7f7 fb02 	bl	80009d0 <__aeabi_dcmple>
 80093cc:	bb30      	cbnz	r0, 800941c <_printf_float+0xc0>
 80093ce:	2200      	movs	r2, #0
 80093d0:	2300      	movs	r3, #0
 80093d2:	4640      	mov	r0, r8
 80093d4:	4649      	mov	r1, r9
 80093d6:	f7f7 faf1 	bl	80009bc <__aeabi_dcmplt>
 80093da:	b110      	cbz	r0, 80093e2 <_printf_float+0x86>
 80093dc:	232d      	movs	r3, #45	@ 0x2d
 80093de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093e2:	4a92      	ldr	r2, [pc, #584]	@ (800962c <_printf_float+0x2d0>)
 80093e4:	4b92      	ldr	r3, [pc, #584]	@ (8009630 <_printf_float+0x2d4>)
 80093e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80093ea:	bf94      	ite	ls
 80093ec:	4690      	movls	r8, r2
 80093ee:	4698      	movhi	r8, r3
 80093f0:	2303      	movs	r3, #3
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	f02b 0304 	bic.w	r3, fp, #4
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	4633      	mov	r3, r6
 8009400:	4621      	mov	r1, r4
 8009402:	4628      	mov	r0, r5
 8009404:	9700      	str	r7, [sp, #0]
 8009406:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009408:	f000 f9d4 	bl	80097b4 <_printf_common>
 800940c:	3001      	adds	r0, #1
 800940e:	f040 8090 	bne.w	8009532 <_printf_float+0x1d6>
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	b011      	add	sp, #68	@ 0x44
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 faf2 	bl	8000a0c <__aeabi_dcmpun>
 8009428:	b148      	cbz	r0, 800943e <_printf_float+0xe2>
 800942a:	464b      	mov	r3, r9
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfb8      	it	lt
 8009430:	232d      	movlt	r3, #45	@ 0x2d
 8009432:	4a80      	ldr	r2, [pc, #512]	@ (8009634 <_printf_float+0x2d8>)
 8009434:	bfb8      	it	lt
 8009436:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800943a:	4b7f      	ldr	r3, [pc, #508]	@ (8009638 <_printf_float+0x2dc>)
 800943c:	e7d3      	b.n	80093e6 <_printf_float+0x8a>
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	d13f      	bne.n	80094c8 <_printf_float+0x16c>
 8009448:	2306      	movs	r3, #6
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	9206      	str	r2, [sp, #24]
 8009456:	aa0e      	add	r2, sp, #56	@ 0x38
 8009458:	e9cd a204 	strd	sl, r2, [sp, #16]
 800945c:	aa0d      	add	r2, sp, #52	@ 0x34
 800945e:	9203      	str	r2, [sp, #12]
 8009460:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009464:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	4642      	mov	r2, r8
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4628      	mov	r0, r5
 8009470:	464b      	mov	r3, r9
 8009472:	910a      	str	r1, [sp, #40]	@ 0x28
 8009474:	f7ff fed4 	bl	8009220 <__cvt>
 8009478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800947a:	4680      	mov	r8, r0
 800947c:	2947      	cmp	r1, #71	@ 0x47
 800947e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009480:	d128      	bne.n	80094d4 <_printf_float+0x178>
 8009482:	1cc8      	adds	r0, r1, #3
 8009484:	db02      	blt.n	800948c <_printf_float+0x130>
 8009486:	6863      	ldr	r3, [r4, #4]
 8009488:	4299      	cmp	r1, r3
 800948a:	dd40      	ble.n	800950e <_printf_float+0x1b2>
 800948c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009490:	fa5f fa8a 	uxtb.w	sl, sl
 8009494:	4652      	mov	r2, sl
 8009496:	3901      	subs	r1, #1
 8009498:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800949c:	910d      	str	r1, [sp, #52]	@ 0x34
 800949e:	f7ff ff23 	bl	80092e8 <__exponent>
 80094a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094a4:	4681      	mov	r9, r0
 80094a6:	1813      	adds	r3, r2, r0
 80094a8:	2a01      	cmp	r2, #1
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	dc02      	bgt.n	80094b4 <_printf_float+0x158>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	07d2      	lsls	r2, r2, #31
 80094b2:	d501      	bpl.n	80094b8 <_printf_float+0x15c>
 80094b4:	3301      	adds	r3, #1
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d09e      	beq.n	80093fe <_printf_float+0xa2>
 80094c0:	232d      	movs	r3, #45	@ 0x2d
 80094c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c6:	e79a      	b.n	80093fe <_printf_float+0xa2>
 80094c8:	2947      	cmp	r1, #71	@ 0x47
 80094ca:	d1bf      	bne.n	800944c <_printf_float+0xf0>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1bd      	bne.n	800944c <_printf_float+0xf0>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e7ba      	b.n	800944a <_printf_float+0xee>
 80094d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094d8:	d9dc      	bls.n	8009494 <_printf_float+0x138>
 80094da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80094de:	d118      	bne.n	8009512 <_printf_float+0x1b6>
 80094e0:	2900      	cmp	r1, #0
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	dd0b      	ble.n	80094fe <_printf_float+0x1a2>
 80094e6:	6121      	str	r1, [r4, #16]
 80094e8:	b913      	cbnz	r3, 80094f0 <_printf_float+0x194>
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	07d0      	lsls	r0, r2, #31
 80094ee:	d502      	bpl.n	80094f6 <_printf_float+0x19a>
 80094f0:	3301      	adds	r3, #1
 80094f2:	440b      	add	r3, r1
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	f04f 0900 	mov.w	r9, #0
 80094fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80094fc:	e7dc      	b.n	80094b8 <_printf_float+0x15c>
 80094fe:	b913      	cbnz	r3, 8009506 <_printf_float+0x1aa>
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	07d2      	lsls	r2, r2, #31
 8009504:	d501      	bpl.n	800950a <_printf_float+0x1ae>
 8009506:	3302      	adds	r3, #2
 8009508:	e7f4      	b.n	80094f4 <_printf_float+0x198>
 800950a:	2301      	movs	r3, #1
 800950c:	e7f2      	b.n	80094f4 <_printf_float+0x198>
 800950e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009514:	4299      	cmp	r1, r3
 8009516:	db05      	blt.n	8009524 <_printf_float+0x1c8>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	6121      	str	r1, [r4, #16]
 800951c:	07d8      	lsls	r0, r3, #31
 800951e:	d5ea      	bpl.n	80094f6 <_printf_float+0x19a>
 8009520:	1c4b      	adds	r3, r1, #1
 8009522:	e7e7      	b.n	80094f4 <_printf_float+0x198>
 8009524:	2900      	cmp	r1, #0
 8009526:	bfcc      	ite	gt
 8009528:	2201      	movgt	r2, #1
 800952a:	f1c1 0202 	rsble	r2, r1, #2
 800952e:	4413      	add	r3, r2
 8009530:	e7e0      	b.n	80094f4 <_printf_float+0x198>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	055a      	lsls	r2, r3, #21
 8009536:	d407      	bmi.n	8009548 <_printf_float+0x1ec>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	4642      	mov	r2, r8
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	d12b      	bne.n	800959e <_printf_float+0x242>
 8009546:	e764      	b.n	8009412 <_printf_float+0xb6>
 8009548:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800954c:	f240 80dc 	bls.w	8009708 <_printf_float+0x3ac>
 8009550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	f7f7 fa26 	bl	80009a8 <__aeabi_dcmpeq>
 800955c:	2800      	cmp	r0, #0
 800955e:	d033      	beq.n	80095c8 <_printf_float+0x26c>
 8009560:	2301      	movs	r3, #1
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	4a35      	ldr	r2, [pc, #212]	@ (800963c <_printf_float+0x2e0>)
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f af51 	beq.w	8009412 <_printf_float+0xb6>
 8009570:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009574:	4543      	cmp	r3, r8
 8009576:	db02      	blt.n	800957e <_printf_float+0x222>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	07d8      	lsls	r0, r3, #31
 800957c:	d50f      	bpl.n	800959e <_printf_float+0x242>
 800957e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f af42 	beq.w	8009412 <_printf_float+0xb6>
 800958e:	f04f 0900 	mov.w	r9, #0
 8009592:	f108 38ff 	add.w	r8, r8, #4294967295
 8009596:	f104 0a1a 	add.w	sl, r4, #26
 800959a:	45c8      	cmp	r8, r9
 800959c:	dc09      	bgt.n	80095b2 <_printf_float+0x256>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	079b      	lsls	r3, r3, #30
 80095a2:	f100 8102 	bmi.w	80097aa <_printf_float+0x44e>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e731      	b.n	8009416 <_printf_float+0xba>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4652      	mov	r2, sl
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	f43f af28 	beq.w	8009412 <_printf_float+0xb6>
 80095c2:	f109 0901 	add.w	r9, r9, #1
 80095c6:	e7e8      	b.n	800959a <_printf_float+0x23e>
 80095c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dc38      	bgt.n	8009640 <_printf_float+0x2e4>
 80095ce:	2301      	movs	r3, #1
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	4a19      	ldr	r2, [pc, #100]	@ (800963c <_printf_float+0x2e0>)
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	f43f af1a 	beq.w	8009412 <_printf_float+0xb6>
 80095de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80095e2:	ea59 0303 	orrs.w	r3, r9, r3
 80095e6:	d102      	bne.n	80095ee <_printf_float+0x292>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	07d9      	lsls	r1, r3, #31
 80095ec:	d5d7      	bpl.n	800959e <_printf_float+0x242>
 80095ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f af0a 	beq.w	8009412 <_printf_float+0xb6>
 80095fe:	f04f 0a00 	mov.w	sl, #0
 8009602:	f104 0b1a 	add.w	fp, r4, #26
 8009606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009608:	425b      	negs	r3, r3
 800960a:	4553      	cmp	r3, sl
 800960c:	dc01      	bgt.n	8009612 <_printf_float+0x2b6>
 800960e:	464b      	mov	r3, r9
 8009610:	e793      	b.n	800953a <_printf_float+0x1de>
 8009612:	2301      	movs	r3, #1
 8009614:	465a      	mov	r2, fp
 8009616:	4631      	mov	r1, r6
 8009618:	4628      	mov	r0, r5
 800961a:	47b8      	blx	r7
 800961c:	3001      	adds	r0, #1
 800961e:	f43f aef8 	beq.w	8009412 <_printf_float+0xb6>
 8009622:	f10a 0a01 	add.w	sl, sl, #1
 8009626:	e7ee      	b.n	8009606 <_printf_float+0x2aa>
 8009628:	7fefffff 	.word	0x7fefffff
 800962c:	0800bf5e 	.word	0x0800bf5e
 8009630:	0800bf62 	.word	0x0800bf62
 8009634:	0800bf66 	.word	0x0800bf66
 8009638:	0800bf6a 	.word	0x0800bf6a
 800963c:	0800bf6e 	.word	0x0800bf6e
 8009640:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009642:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009646:	4553      	cmp	r3, sl
 8009648:	bfa8      	it	ge
 800964a:	4653      	movge	r3, sl
 800964c:	2b00      	cmp	r3, #0
 800964e:	4699      	mov	r9, r3
 8009650:	dc36      	bgt.n	80096c0 <_printf_float+0x364>
 8009652:	f04f 0b00 	mov.w	fp, #0
 8009656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800965a:	f104 021a 	add.w	r2, r4, #26
 800965e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009660:	930a      	str	r3, [sp, #40]	@ 0x28
 8009662:	eba3 0309 	sub.w	r3, r3, r9
 8009666:	455b      	cmp	r3, fp
 8009668:	dc31      	bgt.n	80096ce <_printf_float+0x372>
 800966a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800966c:	459a      	cmp	sl, r3
 800966e:	dc3a      	bgt.n	80096e6 <_printf_float+0x38a>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	07da      	lsls	r2, r3, #31
 8009674:	d437      	bmi.n	80096e6 <_printf_float+0x38a>
 8009676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009678:	ebaa 0903 	sub.w	r9, sl, r3
 800967c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800967e:	ebaa 0303 	sub.w	r3, sl, r3
 8009682:	4599      	cmp	r9, r3
 8009684:	bfa8      	it	ge
 8009686:	4699      	movge	r9, r3
 8009688:	f1b9 0f00 	cmp.w	r9, #0
 800968c:	dc33      	bgt.n	80096f6 <_printf_float+0x39a>
 800968e:	f04f 0800 	mov.w	r8, #0
 8009692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009696:	f104 0b1a 	add.w	fp, r4, #26
 800969a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800969c:	ebaa 0303 	sub.w	r3, sl, r3
 80096a0:	eba3 0309 	sub.w	r3, r3, r9
 80096a4:	4543      	cmp	r3, r8
 80096a6:	f77f af7a 	ble.w	800959e <_printf_float+0x242>
 80096aa:	2301      	movs	r3, #1
 80096ac:	465a      	mov	r2, fp
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f aeac 	beq.w	8009412 <_printf_float+0xb6>
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	e7ec      	b.n	800969a <_printf_float+0x33e>
 80096c0:	4642      	mov	r2, r8
 80096c2:	4631      	mov	r1, r6
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b8      	blx	r7
 80096c8:	3001      	adds	r0, #1
 80096ca:	d1c2      	bne.n	8009652 <_printf_float+0x2f6>
 80096cc:	e6a1      	b.n	8009412 <_printf_float+0xb6>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	f43f ae9a 	beq.w	8009412 <_printf_float+0xb6>
 80096de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096e0:	f10b 0b01 	add.w	fp, fp, #1
 80096e4:	e7bb      	b.n	800965e <_printf_float+0x302>
 80096e6:	4631      	mov	r1, r6
 80096e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096ec:	4628      	mov	r0, r5
 80096ee:	47b8      	blx	r7
 80096f0:	3001      	adds	r0, #1
 80096f2:	d1c0      	bne.n	8009676 <_printf_float+0x31a>
 80096f4:	e68d      	b.n	8009412 <_printf_float+0xb6>
 80096f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096f8:	464b      	mov	r3, r9
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	4442      	add	r2, r8
 8009700:	47b8      	blx	r7
 8009702:	3001      	adds	r0, #1
 8009704:	d1c3      	bne.n	800968e <_printf_float+0x332>
 8009706:	e684      	b.n	8009412 <_printf_float+0xb6>
 8009708:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800970c:	f1ba 0f01 	cmp.w	sl, #1
 8009710:	dc01      	bgt.n	8009716 <_printf_float+0x3ba>
 8009712:	07db      	lsls	r3, r3, #31
 8009714:	d536      	bpl.n	8009784 <_printf_float+0x428>
 8009716:	2301      	movs	r3, #1
 8009718:	4642      	mov	r2, r8
 800971a:	4631      	mov	r1, r6
 800971c:	4628      	mov	r0, r5
 800971e:	47b8      	blx	r7
 8009720:	3001      	adds	r0, #1
 8009722:	f43f ae76 	beq.w	8009412 <_printf_float+0xb6>
 8009726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f ae6e 	beq.w	8009412 <_printf_float+0xb6>
 8009736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009742:	f7f7 f931 	bl	80009a8 <__aeabi_dcmpeq>
 8009746:	b9c0      	cbnz	r0, 800977a <_printf_float+0x41e>
 8009748:	4653      	mov	r3, sl
 800974a:	f108 0201 	add.w	r2, r8, #1
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	47b8      	blx	r7
 8009754:	3001      	adds	r0, #1
 8009756:	d10c      	bne.n	8009772 <_printf_float+0x416>
 8009758:	e65b      	b.n	8009412 <_printf_float+0xb6>
 800975a:	2301      	movs	r3, #1
 800975c:	465a      	mov	r2, fp
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	47b8      	blx	r7
 8009764:	3001      	adds	r0, #1
 8009766:	f43f ae54 	beq.w	8009412 <_printf_float+0xb6>
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	45d0      	cmp	r8, sl
 8009770:	dbf3      	blt.n	800975a <_printf_float+0x3fe>
 8009772:	464b      	mov	r3, r9
 8009774:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009778:	e6e0      	b.n	800953c <_printf_float+0x1e0>
 800977a:	f04f 0800 	mov.w	r8, #0
 800977e:	f104 0b1a 	add.w	fp, r4, #26
 8009782:	e7f4      	b.n	800976e <_printf_float+0x412>
 8009784:	2301      	movs	r3, #1
 8009786:	4642      	mov	r2, r8
 8009788:	e7e1      	b.n	800974e <_printf_float+0x3f2>
 800978a:	2301      	movs	r3, #1
 800978c:	464a      	mov	r2, r9
 800978e:	4631      	mov	r1, r6
 8009790:	4628      	mov	r0, r5
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f ae3c 	beq.w	8009412 <_printf_float+0xb6>
 800979a:	f108 0801 	add.w	r8, r8, #1
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097a2:	1a5b      	subs	r3, r3, r1
 80097a4:	4543      	cmp	r3, r8
 80097a6:	dcf0      	bgt.n	800978a <_printf_float+0x42e>
 80097a8:	e6fd      	b.n	80095a6 <_printf_float+0x24a>
 80097aa:	f04f 0800 	mov.w	r8, #0
 80097ae:	f104 0919 	add.w	r9, r4, #25
 80097b2:	e7f4      	b.n	800979e <_printf_float+0x442>

080097b4 <_printf_common>:
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b8:	4616      	mov	r6, r2
 80097ba:	4698      	mov	r8, r3
 80097bc:	688a      	ldr	r2, [r1, #8]
 80097be:	690b      	ldr	r3, [r1, #16]
 80097c0:	4607      	mov	r7, r0
 80097c2:	4293      	cmp	r3, r2
 80097c4:	bfb8      	it	lt
 80097c6:	4613      	movlt	r3, r2
 80097c8:	6033      	str	r3, [r6, #0]
 80097ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097ce:	460c      	mov	r4, r1
 80097d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097d4:	b10a      	cbz	r2, 80097da <_printf_common+0x26>
 80097d6:	3301      	adds	r3, #1
 80097d8:	6033      	str	r3, [r6, #0]
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	0699      	lsls	r1, r3, #26
 80097de:	bf42      	ittt	mi
 80097e0:	6833      	ldrmi	r3, [r6, #0]
 80097e2:	3302      	addmi	r3, #2
 80097e4:	6033      	strmi	r3, [r6, #0]
 80097e6:	6825      	ldr	r5, [r4, #0]
 80097e8:	f015 0506 	ands.w	r5, r5, #6
 80097ec:	d106      	bne.n	80097fc <_printf_common+0x48>
 80097ee:	f104 0a19 	add.w	sl, r4, #25
 80097f2:	68e3      	ldr	r3, [r4, #12]
 80097f4:	6832      	ldr	r2, [r6, #0]
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	dc2b      	bgt.n	8009854 <_printf_common+0xa0>
 80097fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009800:	6822      	ldr	r2, [r4, #0]
 8009802:	3b00      	subs	r3, #0
 8009804:	bf18      	it	ne
 8009806:	2301      	movne	r3, #1
 8009808:	0692      	lsls	r2, r2, #26
 800980a:	d430      	bmi.n	800986e <_printf_common+0xba>
 800980c:	4641      	mov	r1, r8
 800980e:	4638      	mov	r0, r7
 8009810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009814:	47c8      	blx	r9
 8009816:	3001      	adds	r0, #1
 8009818:	d023      	beq.n	8009862 <_printf_common+0xae>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	6922      	ldr	r2, [r4, #16]
 800981e:	f003 0306 	and.w	r3, r3, #6
 8009822:	2b04      	cmp	r3, #4
 8009824:	bf14      	ite	ne
 8009826:	2500      	movne	r5, #0
 8009828:	6833      	ldreq	r3, [r6, #0]
 800982a:	f04f 0600 	mov.w	r6, #0
 800982e:	bf08      	it	eq
 8009830:	68e5      	ldreq	r5, [r4, #12]
 8009832:	f104 041a 	add.w	r4, r4, #26
 8009836:	bf08      	it	eq
 8009838:	1aed      	subeq	r5, r5, r3
 800983a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800983e:	bf08      	it	eq
 8009840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009844:	4293      	cmp	r3, r2
 8009846:	bfc4      	itt	gt
 8009848:	1a9b      	subgt	r3, r3, r2
 800984a:	18ed      	addgt	r5, r5, r3
 800984c:	42b5      	cmp	r5, r6
 800984e:	d11a      	bne.n	8009886 <_printf_common+0xd2>
 8009850:	2000      	movs	r0, #0
 8009852:	e008      	b.n	8009866 <_printf_common+0xb2>
 8009854:	2301      	movs	r3, #1
 8009856:	4652      	mov	r2, sl
 8009858:	4641      	mov	r1, r8
 800985a:	4638      	mov	r0, r7
 800985c:	47c8      	blx	r9
 800985e:	3001      	adds	r0, #1
 8009860:	d103      	bne.n	800986a <_printf_common+0xb6>
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	3501      	adds	r5, #1
 800986c:	e7c1      	b.n	80097f2 <_printf_common+0x3e>
 800986e:	2030      	movs	r0, #48	@ 0x30
 8009870:	18e1      	adds	r1, r4, r3
 8009872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800987c:	4422      	add	r2, r4
 800987e:	3302      	adds	r3, #2
 8009880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009884:	e7c2      	b.n	800980c <_printf_common+0x58>
 8009886:	2301      	movs	r3, #1
 8009888:	4622      	mov	r2, r4
 800988a:	4641      	mov	r1, r8
 800988c:	4638      	mov	r0, r7
 800988e:	47c8      	blx	r9
 8009890:	3001      	adds	r0, #1
 8009892:	d0e6      	beq.n	8009862 <_printf_common+0xae>
 8009894:	3601      	adds	r6, #1
 8009896:	e7d9      	b.n	800984c <_printf_common+0x98>

08009898 <_printf_i>:
 8009898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	7e0f      	ldrb	r7, [r1, #24]
 800989e:	4691      	mov	r9, r2
 80098a0:	2f78      	cmp	r7, #120	@ 0x78
 80098a2:	4680      	mov	r8, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	469a      	mov	sl, r3
 80098a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098ae:	d807      	bhi.n	80098c0 <_printf_i+0x28>
 80098b0:	2f62      	cmp	r7, #98	@ 0x62
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x32>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	f000 80d3 	beq.w	8009a60 <_printf_i+0x1c8>
 80098ba:	2f58      	cmp	r7, #88	@ 0x58
 80098bc:	f000 80ba 	beq.w	8009a34 <_printf_i+0x19c>
 80098c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098c8:	e03a      	b.n	8009940 <_printf_i+0xa8>
 80098ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098ce:	2b15      	cmp	r3, #21
 80098d0:	d8f6      	bhi.n	80098c0 <_printf_i+0x28>
 80098d2:	a101      	add	r1, pc, #4	@ (adr r1, 80098d8 <_printf_i+0x40>)
 80098d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009945 	.word	0x08009945
 80098e0:	080098c1 	.word	0x080098c1
 80098e4:	080098c1 	.word	0x080098c1
 80098e8:	080098c1 	.word	0x080098c1
 80098ec:	080098c1 	.word	0x080098c1
 80098f0:	08009945 	.word	0x08009945
 80098f4:	080098c1 	.word	0x080098c1
 80098f8:	080098c1 	.word	0x080098c1
 80098fc:	080098c1 	.word	0x080098c1
 8009900:	080098c1 	.word	0x080098c1
 8009904:	08009a47 	.word	0x08009a47
 8009908:	0800996f 	.word	0x0800996f
 800990c:	08009a01 	.word	0x08009a01
 8009910:	080098c1 	.word	0x080098c1
 8009914:	080098c1 	.word	0x080098c1
 8009918:	08009a69 	.word	0x08009a69
 800991c:	080098c1 	.word	0x080098c1
 8009920:	0800996f 	.word	0x0800996f
 8009924:	080098c1 	.word	0x080098c1
 8009928:	080098c1 	.word	0x080098c1
 800992c:	08009a09 	.word	0x08009a09
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	1d1a      	adds	r2, r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6032      	str	r2, [r6, #0]
 8009938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800993c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009940:	2301      	movs	r3, #1
 8009942:	e09e      	b.n	8009a82 <_printf_i+0x1ea>
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	6820      	ldr	r0, [r4, #0]
 8009948:	1d19      	adds	r1, r3, #4
 800994a:	6031      	str	r1, [r6, #0]
 800994c:	0606      	lsls	r6, r0, #24
 800994e:	d501      	bpl.n	8009954 <_printf_i+0xbc>
 8009950:	681d      	ldr	r5, [r3, #0]
 8009952:	e003      	b.n	800995c <_printf_i+0xc4>
 8009954:	0645      	lsls	r5, r0, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0xb8>
 8009958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800995c:	2d00      	cmp	r5, #0
 800995e:	da03      	bge.n	8009968 <_printf_i+0xd0>
 8009960:	232d      	movs	r3, #45	@ 0x2d
 8009962:	426d      	negs	r5, r5
 8009964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009968:	230a      	movs	r3, #10
 800996a:	4859      	ldr	r0, [pc, #356]	@ (8009ad0 <_printf_i+0x238>)
 800996c:	e011      	b.n	8009992 <_printf_i+0xfa>
 800996e:	6821      	ldr	r1, [r4, #0]
 8009970:	6833      	ldr	r3, [r6, #0]
 8009972:	0608      	lsls	r0, r1, #24
 8009974:	f853 5b04 	ldr.w	r5, [r3], #4
 8009978:	d402      	bmi.n	8009980 <_printf_i+0xe8>
 800997a:	0649      	lsls	r1, r1, #25
 800997c:	bf48      	it	mi
 800997e:	b2ad      	uxthmi	r5, r5
 8009980:	2f6f      	cmp	r7, #111	@ 0x6f
 8009982:	6033      	str	r3, [r6, #0]
 8009984:	bf14      	ite	ne
 8009986:	230a      	movne	r3, #10
 8009988:	2308      	moveq	r3, #8
 800998a:	4851      	ldr	r0, [pc, #324]	@ (8009ad0 <_printf_i+0x238>)
 800998c:	2100      	movs	r1, #0
 800998e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009992:	6866      	ldr	r6, [r4, #4]
 8009994:	2e00      	cmp	r6, #0
 8009996:	bfa8      	it	ge
 8009998:	6821      	ldrge	r1, [r4, #0]
 800999a:	60a6      	str	r6, [r4, #8]
 800999c:	bfa4      	itt	ge
 800999e:	f021 0104 	bicge.w	r1, r1, #4
 80099a2:	6021      	strge	r1, [r4, #0]
 80099a4:	b90d      	cbnz	r5, 80099aa <_printf_i+0x112>
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	d04b      	beq.n	8009a42 <_printf_i+0x1aa>
 80099aa:	4616      	mov	r6, r2
 80099ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80099b0:	fb03 5711 	mls	r7, r3, r1, r5
 80099b4:	5dc7      	ldrb	r7, [r0, r7]
 80099b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099ba:	462f      	mov	r7, r5
 80099bc:	42bb      	cmp	r3, r7
 80099be:	460d      	mov	r5, r1
 80099c0:	d9f4      	bls.n	80099ac <_printf_i+0x114>
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d10b      	bne.n	80099de <_printf_i+0x146>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	07df      	lsls	r7, r3, #31
 80099ca:	d508      	bpl.n	80099de <_printf_i+0x146>
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	6861      	ldr	r1, [r4, #4]
 80099d0:	4299      	cmp	r1, r3
 80099d2:	bfde      	ittt	le
 80099d4:	2330      	movle	r3, #48	@ 0x30
 80099d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099de:	1b92      	subs	r2, r2, r6
 80099e0:	6122      	str	r2, [r4, #16]
 80099e2:	464b      	mov	r3, r9
 80099e4:	4621      	mov	r1, r4
 80099e6:	4640      	mov	r0, r8
 80099e8:	f8cd a000 	str.w	sl, [sp]
 80099ec:	aa03      	add	r2, sp, #12
 80099ee:	f7ff fee1 	bl	80097b4 <_printf_common>
 80099f2:	3001      	adds	r0, #1
 80099f4:	d14a      	bne.n	8009a8c <_printf_i+0x1f4>
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295
 80099fa:	b004      	add	sp, #16
 80099fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	f043 0320 	orr.w	r3, r3, #32
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	2778      	movs	r7, #120	@ 0x78
 8009a0a:	4832      	ldr	r0, [pc, #200]	@ (8009ad4 <_printf_i+0x23c>)
 8009a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	6831      	ldr	r1, [r6, #0]
 8009a14:	061f      	lsls	r7, r3, #24
 8009a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a1a:	d402      	bmi.n	8009a22 <_printf_i+0x18a>
 8009a1c:	065f      	lsls	r7, r3, #25
 8009a1e:	bf48      	it	mi
 8009a20:	b2ad      	uxthmi	r5, r5
 8009a22:	6031      	str	r1, [r6, #0]
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	bf44      	itt	mi
 8009a28:	f043 0320 	orrmi.w	r3, r3, #32
 8009a2c:	6023      	strmi	r3, [r4, #0]
 8009a2e:	b11d      	cbz	r5, 8009a38 <_printf_i+0x1a0>
 8009a30:	2310      	movs	r3, #16
 8009a32:	e7ab      	b.n	800998c <_printf_i+0xf4>
 8009a34:	4826      	ldr	r0, [pc, #152]	@ (8009ad0 <_printf_i+0x238>)
 8009a36:	e7e9      	b.n	8009a0c <_printf_i+0x174>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	f023 0320 	bic.w	r3, r3, #32
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	e7f6      	b.n	8009a30 <_printf_i+0x198>
 8009a42:	4616      	mov	r6, r2
 8009a44:	e7bd      	b.n	80099c2 <_printf_i+0x12a>
 8009a46:	6833      	ldr	r3, [r6, #0]
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1d18      	adds	r0, r3, #4
 8009a4c:	6961      	ldr	r1, [r4, #20]
 8009a4e:	6030      	str	r0, [r6, #0]
 8009a50:	062e      	lsls	r6, r5, #24
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	d501      	bpl.n	8009a5a <_printf_i+0x1c2>
 8009a56:	6019      	str	r1, [r3, #0]
 8009a58:	e002      	b.n	8009a60 <_printf_i+0x1c8>
 8009a5a:	0668      	lsls	r0, r5, #25
 8009a5c:	d5fb      	bpl.n	8009a56 <_printf_i+0x1be>
 8009a5e:	8019      	strh	r1, [r3, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	4616      	mov	r6, r2
 8009a64:	6123      	str	r3, [r4, #16]
 8009a66:	e7bc      	b.n	80099e2 <_printf_i+0x14a>
 8009a68:	6833      	ldr	r3, [r6, #0]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	1d1a      	adds	r2, r3, #4
 8009a6e:	6032      	str	r2, [r6, #0]
 8009a70:	681e      	ldr	r6, [r3, #0]
 8009a72:	6862      	ldr	r2, [r4, #4]
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f9d4 	bl	8009e22 <memchr>
 8009a7a:	b108      	cbz	r0, 8009a80 <_printf_i+0x1e8>
 8009a7c:	1b80      	subs	r0, r0, r6
 8009a7e:	6060      	str	r0, [r4, #4]
 8009a80:	6863      	ldr	r3, [r4, #4]
 8009a82:	6123      	str	r3, [r4, #16]
 8009a84:	2300      	movs	r3, #0
 8009a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a8a:	e7aa      	b.n	80099e2 <_printf_i+0x14a>
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	47d0      	blx	sl
 8009a96:	3001      	adds	r0, #1
 8009a98:	d0ad      	beq.n	80099f6 <_printf_i+0x15e>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	079b      	lsls	r3, r3, #30
 8009a9e:	d413      	bmi.n	8009ac8 <_printf_i+0x230>
 8009aa0:	68e0      	ldr	r0, [r4, #12]
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	4298      	cmp	r0, r3
 8009aa6:	bfb8      	it	lt
 8009aa8:	4618      	movlt	r0, r3
 8009aaa:	e7a6      	b.n	80099fa <_printf_i+0x162>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4632      	mov	r2, r6
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	47d0      	blx	sl
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d09d      	beq.n	80099f6 <_printf_i+0x15e>
 8009aba:	3501      	adds	r5, #1
 8009abc:	68e3      	ldr	r3, [r4, #12]
 8009abe:	9903      	ldr	r1, [sp, #12]
 8009ac0:	1a5b      	subs	r3, r3, r1
 8009ac2:	42ab      	cmp	r3, r5
 8009ac4:	dcf2      	bgt.n	8009aac <_printf_i+0x214>
 8009ac6:	e7eb      	b.n	8009aa0 <_printf_i+0x208>
 8009ac8:	2500      	movs	r5, #0
 8009aca:	f104 0619 	add.w	r6, r4, #25
 8009ace:	e7f5      	b.n	8009abc <_printf_i+0x224>
 8009ad0:	0800bf70 	.word	0x0800bf70
 8009ad4:	0800bf81 	.word	0x0800bf81

08009ad8 <std>:
 8009ad8:	2300      	movs	r3, #0
 8009ada:	b510      	push	{r4, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	e9c0 3300 	strd	r3, r3, [r0]
 8009ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ae6:	6083      	str	r3, [r0, #8]
 8009ae8:	8181      	strh	r1, [r0, #12]
 8009aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8009aec:	81c2      	strh	r2, [r0, #14]
 8009aee:	6183      	str	r3, [r0, #24]
 8009af0:	4619      	mov	r1, r3
 8009af2:	2208      	movs	r2, #8
 8009af4:	305c      	adds	r0, #92	@ 0x5c
 8009af6:	f000 f914 	bl	8009d22 <memset>
 8009afa:	4b0d      	ldr	r3, [pc, #52]	@ (8009b30 <std+0x58>)
 8009afc:	6224      	str	r4, [r4, #32]
 8009afe:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b00:	4b0c      	ldr	r3, [pc, #48]	@ (8009b34 <std+0x5c>)
 8009b02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <std+0x60>)
 8009b06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b08:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <std+0x64>)
 8009b0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <std+0x68>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d006      	beq.n	8009b20 <std+0x48>
 8009b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b16:	4294      	cmp	r4, r2
 8009b18:	d002      	beq.n	8009b20 <std+0x48>
 8009b1a:	33d0      	adds	r3, #208	@ 0xd0
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	d105      	bne.n	8009b2c <std+0x54>
 8009b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b28:	f000 b978 	b.w	8009e1c <__retarget_lock_init_recursive>
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	08009c9d 	.word	0x08009c9d
 8009b34:	08009cbf 	.word	0x08009cbf
 8009b38:	08009cf7 	.word	0x08009cf7
 8009b3c:	08009d1b 	.word	0x08009d1b
 8009b40:	20001580 	.word	0x20001580

08009b44 <stdio_exit_handler>:
 8009b44:	4a02      	ldr	r2, [pc, #8]	@ (8009b50 <stdio_exit_handler+0xc>)
 8009b46:	4903      	ldr	r1, [pc, #12]	@ (8009b54 <stdio_exit_handler+0x10>)
 8009b48:	4803      	ldr	r0, [pc, #12]	@ (8009b58 <stdio_exit_handler+0x14>)
 8009b4a:	f000 b869 	b.w	8009c20 <_fwalk_sglue>
 8009b4e:	bf00      	nop
 8009b50:	2000018c 	.word	0x2000018c
 8009b54:	0800b78d 	.word	0x0800b78d
 8009b58:	2000019c 	.word	0x2000019c

08009b5c <cleanup_stdio>:
 8009b5c:	6841      	ldr	r1, [r0, #4]
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b90 <cleanup_stdio+0x34>)
 8009b60:	b510      	push	{r4, lr}
 8009b62:	4299      	cmp	r1, r3
 8009b64:	4604      	mov	r4, r0
 8009b66:	d001      	beq.n	8009b6c <cleanup_stdio+0x10>
 8009b68:	f001 fe10 	bl	800b78c <_fflush_r>
 8009b6c:	68a1      	ldr	r1, [r4, #8]
 8009b6e:	4b09      	ldr	r3, [pc, #36]	@ (8009b94 <cleanup_stdio+0x38>)
 8009b70:	4299      	cmp	r1, r3
 8009b72:	d002      	beq.n	8009b7a <cleanup_stdio+0x1e>
 8009b74:	4620      	mov	r0, r4
 8009b76:	f001 fe09 	bl	800b78c <_fflush_r>
 8009b7a:	68e1      	ldr	r1, [r4, #12]
 8009b7c:	4b06      	ldr	r3, [pc, #24]	@ (8009b98 <cleanup_stdio+0x3c>)
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	d004      	beq.n	8009b8c <cleanup_stdio+0x30>
 8009b82:	4620      	mov	r0, r4
 8009b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b88:	f001 be00 	b.w	800b78c <_fflush_r>
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	bf00      	nop
 8009b90:	20001580 	.word	0x20001580
 8009b94:	200015e8 	.word	0x200015e8
 8009b98:	20001650 	.word	0x20001650

08009b9c <global_stdio_init.part.0>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009bcc <global_stdio_init.part.0+0x30>)
 8009ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8009bd0 <global_stdio_init.part.0+0x34>)
 8009ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8009bd4 <global_stdio_init.part.0+0x38>)
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	2104      	movs	r1, #4
 8009baa:	2200      	movs	r2, #0
 8009bac:	f7ff ff94 	bl	8009ad8 <std>
 8009bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	2109      	movs	r1, #9
 8009bb8:	f7ff ff8e 	bl	8009ad8 <std>
 8009bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc6:	2112      	movs	r1, #18
 8009bc8:	f7ff bf86 	b.w	8009ad8 <std>
 8009bcc:	200016b8 	.word	0x200016b8
 8009bd0:	20001580 	.word	0x20001580
 8009bd4:	08009b45 	.word	0x08009b45

08009bd8 <__sfp_lock_acquire>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	@ (8009be0 <__sfp_lock_acquire+0x8>)
 8009bda:	f000 b920 	b.w	8009e1e <__retarget_lock_acquire_recursive>
 8009bde:	bf00      	nop
 8009be0:	200016c1 	.word	0x200016c1

08009be4 <__sfp_lock_release>:
 8009be4:	4801      	ldr	r0, [pc, #4]	@ (8009bec <__sfp_lock_release+0x8>)
 8009be6:	f000 b91b 	b.w	8009e20 <__retarget_lock_release_recursive>
 8009bea:	bf00      	nop
 8009bec:	200016c1 	.word	0x200016c1

08009bf0 <__sinit>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	f7ff fff0 	bl	8009bd8 <__sfp_lock_acquire>
 8009bf8:	6a23      	ldr	r3, [r4, #32]
 8009bfa:	b11b      	cbz	r3, 8009c04 <__sinit+0x14>
 8009bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c00:	f7ff bff0 	b.w	8009be4 <__sfp_lock_release>
 8009c04:	4b04      	ldr	r3, [pc, #16]	@ (8009c18 <__sinit+0x28>)
 8009c06:	6223      	str	r3, [r4, #32]
 8009c08:	4b04      	ldr	r3, [pc, #16]	@ (8009c1c <__sinit+0x2c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f5      	bne.n	8009bfc <__sinit+0xc>
 8009c10:	f7ff ffc4 	bl	8009b9c <global_stdio_init.part.0>
 8009c14:	e7f2      	b.n	8009bfc <__sinit+0xc>
 8009c16:	bf00      	nop
 8009c18:	08009b5d 	.word	0x08009b5d
 8009c1c:	200016b8 	.word	0x200016b8

08009c20 <_fwalk_sglue>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	4607      	mov	r7, r0
 8009c26:	4688      	mov	r8, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	2600      	movs	r6, #0
 8009c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c30:	f1b9 0901 	subs.w	r9, r9, #1
 8009c34:	d505      	bpl.n	8009c42 <_fwalk_sglue+0x22>
 8009c36:	6824      	ldr	r4, [r4, #0]
 8009c38:	2c00      	cmp	r4, #0
 8009c3a:	d1f7      	bne.n	8009c2c <_fwalk_sglue+0xc>
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c42:	89ab      	ldrh	r3, [r5, #12]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d907      	bls.n	8009c58 <_fwalk_sglue+0x38>
 8009c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	d003      	beq.n	8009c58 <_fwalk_sglue+0x38>
 8009c50:	4629      	mov	r1, r5
 8009c52:	4638      	mov	r0, r7
 8009c54:	47c0      	blx	r8
 8009c56:	4306      	orrs	r6, r0
 8009c58:	3568      	adds	r5, #104	@ 0x68
 8009c5a:	e7e9      	b.n	8009c30 <_fwalk_sglue+0x10>

08009c5c <siprintf>:
 8009c5c:	b40e      	push	{r1, r2, r3}
 8009c5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c62:	b500      	push	{lr}
 8009c64:	b09c      	sub	sp, #112	@ 0x70
 8009c66:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c68:	9002      	str	r0, [sp, #8]
 8009c6a:	9006      	str	r0, [sp, #24]
 8009c6c:	9107      	str	r1, [sp, #28]
 8009c6e:	9104      	str	r1, [sp, #16]
 8009c70:	4808      	ldr	r0, [pc, #32]	@ (8009c94 <siprintf+0x38>)
 8009c72:	4909      	ldr	r1, [pc, #36]	@ (8009c98 <siprintf+0x3c>)
 8009c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c78:	9105      	str	r1, [sp, #20]
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	a902      	add	r1, sp, #8
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	f001 fc08 	bl	800b494 <_svfiprintf_r>
 8009c84:	2200      	movs	r2, #0
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	701a      	strb	r2, [r3, #0]
 8009c8a:	b01c      	add	sp, #112	@ 0x70
 8009c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c90:	b003      	add	sp, #12
 8009c92:	4770      	bx	lr
 8009c94:	20000198 	.word	0x20000198
 8009c98:	ffff0208 	.word	0xffff0208

08009c9c <__sread>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	f000 f86c 	bl	8009d80 <_read_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	bfab      	itete	ge
 8009cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cae:	89a3      	ldrhlt	r3, [r4, #12]
 8009cb0:	181b      	addge	r3, r3, r0
 8009cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cb6:	bfac      	ite	ge
 8009cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cba:	81a3      	strhlt	r3, [r4, #12]
 8009cbc:	bd10      	pop	{r4, pc}

08009cbe <__swrite>:
 8009cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	898b      	ldrh	r3, [r1, #12]
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	05db      	lsls	r3, r3, #23
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4616      	mov	r6, r2
 8009cce:	d505      	bpl.n	8009cdc <__swrite+0x1e>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd8:	f000 f840 	bl	8009d5c <_lseek_r>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	4632      	mov	r2, r6
 8009ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	463b      	mov	r3, r7
 8009cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	f000 b857 	b.w	8009da4 <_write_r>

08009cf6 <__sseek>:
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfe:	f000 f82d 	bl	8009d5c <_lseek_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	bf15      	itete	ne
 8009d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d12:	81a3      	strheq	r3, [r4, #12]
 8009d14:	bf18      	it	ne
 8009d16:	81a3      	strhne	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__sclose>:
 8009d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1e:	f000 b80d 	b.w	8009d3c <_close_r>

08009d22 <memset>:
 8009d22:	4603      	mov	r3, r0
 8009d24:	4402      	add	r2, r0
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d100      	bne.n	8009d2c <memset+0xa>
 8009d2a:	4770      	bx	lr
 8009d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8009d30:	e7f9      	b.n	8009d26 <memset+0x4>
	...

08009d34 <_localeconv_r>:
 8009d34:	4800      	ldr	r0, [pc, #0]	@ (8009d38 <_localeconv_r+0x4>)
 8009d36:	4770      	bx	lr
 8009d38:	200002d8 	.word	0x200002d8

08009d3c <_close_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4d05      	ldr	r5, [pc, #20]	@ (8009d58 <_close_r+0x1c>)
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	602b      	str	r3, [r5, #0]
 8009d48:	f7f7 fbdd 	bl	8001506 <_close>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_close_r+0x1a>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_close_r+0x1a>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	200016bc 	.word	0x200016bc

08009d5c <_lseek_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	2200      	movs	r2, #0
 8009d66:	4d05      	ldr	r5, [pc, #20]	@ (8009d7c <_lseek_r+0x20>)
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f7f7 fbef 	bl	800154e <_lseek>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_lseek_r+0x1e>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_lseek_r+0x1e>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200016bc 	.word	0x200016bc

08009d80 <_read_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4d05      	ldr	r5, [pc, #20]	@ (8009da0 <_read_r+0x20>)
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f7 fb80 	bl	8001494 <_read>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_read_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_read_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	200016bc 	.word	0x200016bc

08009da4 <_write_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	2200      	movs	r2, #0
 8009dae:	4d05      	ldr	r5, [pc, #20]	@ (8009dc4 <_write_r+0x20>)
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f7 fb8b 	bl	80014ce <_write>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_write_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_write_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200016bc 	.word	0x200016bc

08009dc8 <__errno>:
 8009dc8:	4b01      	ldr	r3, [pc, #4]	@ (8009dd0 <__errno+0x8>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	20000198 	.word	0x20000198

08009dd4 <__libc_init_array>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	4d0c      	ldr	r5, [pc, #48]	@ (8009e0c <__libc_init_array+0x38>)
 8009dda:	4c0d      	ldr	r4, [pc, #52]	@ (8009e10 <__libc_init_array+0x3c>)
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	42a6      	cmp	r6, r4
 8009de2:	d109      	bne.n	8009df8 <__libc_init_array+0x24>
 8009de4:	f002 f86e 	bl	800bec4 <_init>
 8009de8:	2600      	movs	r6, #0
 8009dea:	4d0a      	ldr	r5, [pc, #40]	@ (8009e14 <__libc_init_array+0x40>)
 8009dec:	4c0a      	ldr	r4, [pc, #40]	@ (8009e18 <__libc_init_array+0x44>)
 8009dee:	1b64      	subs	r4, r4, r5
 8009df0:	10a4      	asrs	r4, r4, #2
 8009df2:	42a6      	cmp	r6, r4
 8009df4:	d105      	bne.n	8009e02 <__libc_init_array+0x2e>
 8009df6:	bd70      	pop	{r4, r5, r6, pc}
 8009df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dfc:	4798      	blx	r3
 8009dfe:	3601      	adds	r6, #1
 8009e00:	e7ee      	b.n	8009de0 <__libc_init_array+0xc>
 8009e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e06:	4798      	blx	r3
 8009e08:	3601      	adds	r6, #1
 8009e0a:	e7f2      	b.n	8009df2 <__libc_init_array+0x1e>
 8009e0c:	0800c2d8 	.word	0x0800c2d8
 8009e10:	0800c2d8 	.word	0x0800c2d8
 8009e14:	0800c2d8 	.word	0x0800c2d8
 8009e18:	0800c2dc 	.word	0x0800c2dc

08009e1c <__retarget_lock_init_recursive>:
 8009e1c:	4770      	bx	lr

08009e1e <__retarget_lock_acquire_recursive>:
 8009e1e:	4770      	bx	lr

08009e20 <__retarget_lock_release_recursive>:
 8009e20:	4770      	bx	lr

08009e22 <memchr>:
 8009e22:	4603      	mov	r3, r0
 8009e24:	b510      	push	{r4, lr}
 8009e26:	b2c9      	uxtb	r1, r1
 8009e28:	4402      	add	r2, r0
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	d101      	bne.n	8009e34 <memchr+0x12>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e003      	b.n	8009e3c <memchr+0x1a>
 8009e34:	7804      	ldrb	r4, [r0, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	428c      	cmp	r4, r1
 8009e3a:	d1f6      	bne.n	8009e2a <memchr+0x8>
 8009e3c:	bd10      	pop	{r4, pc}

08009e3e <quorem>:
 8009e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e42:	6903      	ldr	r3, [r0, #16]
 8009e44:	690c      	ldr	r4, [r1, #16]
 8009e46:	4607      	mov	r7, r0
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	db7e      	blt.n	8009f4a <quorem+0x10c>
 8009e4c:	3c01      	subs	r4, #1
 8009e4e:	00a3      	lsls	r3, r4, #2
 8009e50:	f100 0514 	add.w	r5, r0, #20
 8009e54:	f101 0814 	add.w	r8, r1, #20
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e74:	d32e      	bcc.n	8009ed4 <quorem+0x96>
 8009e76:	f04f 0a00 	mov.w	sl, #0
 8009e7a:	46c4      	mov	ip, r8
 8009e7c:	46ae      	mov	lr, r5
 8009e7e:	46d3      	mov	fp, sl
 8009e80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e84:	b298      	uxth	r0, r3
 8009e86:	fb06 a000 	mla	r0, r6, r0, sl
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	0c02      	lsrs	r2, r0, #16
 8009e8e:	fb06 2303 	mla	r3, r6, r3, r2
 8009e92:	f8de 2000 	ldr.w	r2, [lr]
 8009e96:	b280      	uxth	r0, r0
 8009e98:	b292      	uxth	r2, r2
 8009e9a:	1a12      	subs	r2, r2, r0
 8009e9c:	445a      	add	r2, fp
 8009e9e:	f8de 0000 	ldr.w	r0, [lr]
 8009ea2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009eac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009eb0:	b292      	uxth	r2, r2
 8009eb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009eb6:	45e1      	cmp	r9, ip
 8009eb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009ebc:	f84e 2b04 	str.w	r2, [lr], #4
 8009ec0:	d2de      	bcs.n	8009e80 <quorem+0x42>
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	58eb      	ldr	r3, [r5, r3]
 8009ec6:	b92b      	cbnz	r3, 8009ed4 <quorem+0x96>
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	3b04      	subs	r3, #4
 8009ecc:	429d      	cmp	r5, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	d32f      	bcc.n	8009f32 <quorem+0xf4>
 8009ed2:	613c      	str	r4, [r7, #16]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f001 f979 	bl	800b1cc <__mcmp>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	db25      	blt.n	8009f2a <quorem+0xec>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ee6:	f8d1 c000 	ldr.w	ip, [r1]
 8009eea:	fa1f fe82 	uxth.w	lr, r2
 8009eee:	fa1f f38c 	uxth.w	r3, ip
 8009ef2:	eba3 030e 	sub.w	r3, r3, lr
 8009ef6:	4403      	add	r3, r0
 8009ef8:	0c12      	lsrs	r2, r2, #16
 8009efa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009efe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f08:	45c1      	cmp	r9, r8
 8009f0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f0e:	f841 3b04 	str.w	r3, [r1], #4
 8009f12:	d2e6      	bcs.n	8009ee2 <quorem+0xa4>
 8009f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f1c:	b922      	cbnz	r2, 8009f28 <quorem+0xea>
 8009f1e:	3b04      	subs	r3, #4
 8009f20:	429d      	cmp	r5, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	d30b      	bcc.n	8009f3e <quorem+0x100>
 8009f26:	613c      	str	r4, [r7, #16]
 8009f28:	3601      	adds	r6, #1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	b003      	add	sp, #12
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	3b04      	subs	r3, #4
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	d1cb      	bne.n	8009ed2 <quorem+0x94>
 8009f3a:	3c01      	subs	r4, #1
 8009f3c:	e7c6      	b.n	8009ecc <quorem+0x8e>
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d1ef      	bne.n	8009f26 <quorem+0xe8>
 8009f46:	3c01      	subs	r4, #1
 8009f48:	e7ea      	b.n	8009f20 <quorem+0xe2>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e7ee      	b.n	8009f2c <quorem+0xee>
	...

08009f50 <_dtoa_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	4614      	mov	r4, r2
 8009f56:	461d      	mov	r5, r3
 8009f58:	69c7      	ldr	r7, [r0, #28]
 8009f5a:	b097      	sub	sp, #92	@ 0x5c
 8009f5c:	4683      	mov	fp, r0
 8009f5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009f64:	b97f      	cbnz	r7, 8009f86 <_dtoa_r+0x36>
 8009f66:	2010      	movs	r0, #16
 8009f68:	f000 fe02 	bl	800ab70 <malloc>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009f72:	b920      	cbnz	r0, 8009f7e <_dtoa_r+0x2e>
 8009f74:	21ef      	movs	r1, #239	@ 0xef
 8009f76:	4ba8      	ldr	r3, [pc, #672]	@ (800a218 <_dtoa_r+0x2c8>)
 8009f78:	48a8      	ldr	r0, [pc, #672]	@ (800a21c <_dtoa_r+0x2cc>)
 8009f7a:	f001 fc67 	bl	800b84c <__assert_func>
 8009f7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f82:	6007      	str	r7, [r0, #0]
 8009f84:	60c7      	str	r7, [r0, #12]
 8009f86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	b159      	cbz	r1, 8009fa6 <_dtoa_r+0x56>
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	2301      	movs	r3, #1
 8009f92:	4093      	lsls	r3, r2
 8009f94:	604a      	str	r2, [r1, #4]
 8009f96:	608b      	str	r3, [r1, #8]
 8009f98:	4658      	mov	r0, fp
 8009f9a:	f000 fedf 	bl	800ad5c <_Bfree>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	1e2b      	subs	r3, r5, #0
 8009fa8:	bfaf      	iteee	ge
 8009faa:	2300      	movge	r3, #0
 8009fac:	2201      	movlt	r2, #1
 8009fae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009fb2:	9303      	strlt	r3, [sp, #12]
 8009fb4:	bfa8      	it	ge
 8009fb6:	6033      	strge	r3, [r6, #0]
 8009fb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009fbc:	4b98      	ldr	r3, [pc, #608]	@ (800a220 <_dtoa_r+0x2d0>)
 8009fbe:	bfb8      	it	lt
 8009fc0:	6032      	strlt	r2, [r6, #0]
 8009fc2:	ea33 0308 	bics.w	r3, r3, r8
 8009fc6:	d112      	bne.n	8009fee <_dtoa_r+0x9e>
 8009fc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009fcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009fd4:	4323      	orrs	r3, r4
 8009fd6:	f000 8550 	beq.w	800aa7a <_dtoa_r+0xb2a>
 8009fda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009fdc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a224 <_dtoa_r+0x2d4>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 8552 	beq.w	800aa8a <_dtoa_r+0xb3a>
 8009fe6:	f10a 0303 	add.w	r3, sl, #3
 8009fea:	f000 bd4c 	b.w	800aa86 <_dtoa_r+0xb36>
 8009fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ff2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f7f6 fcd3 	bl	80009a8 <__aeabi_dcmpeq>
 800a002:	4607      	mov	r7, r0
 800a004:	b158      	cbz	r0, 800a01e <_dtoa_r+0xce>
 800a006:	2301      	movs	r3, #1
 800a008:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a00e:	b113      	cbz	r3, 800a016 <_dtoa_r+0xc6>
 800a010:	4b85      	ldr	r3, [pc, #532]	@ (800a228 <_dtoa_r+0x2d8>)
 800a012:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a22c <_dtoa_r+0x2dc>
 800a01a:	f000 bd36 	b.w	800aa8a <_dtoa_r+0xb3a>
 800a01e:	ab14      	add	r3, sp, #80	@ 0x50
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	ab15      	add	r3, sp, #84	@ 0x54
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4658      	mov	r0, fp
 800a028:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a02c:	f001 f97e 	bl	800b32c <__d2b>
 800a030:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a034:	4681      	mov	r9, r0
 800a036:	2e00      	cmp	r6, #0
 800a038:	d077      	beq.n	800a12a <_dtoa_r+0x1da>
 800a03a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a040:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a048:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a04c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a050:	9712      	str	r7, [sp, #72]	@ 0x48
 800a052:	4619      	mov	r1, r3
 800a054:	2200      	movs	r2, #0
 800a056:	4b76      	ldr	r3, [pc, #472]	@ (800a230 <_dtoa_r+0x2e0>)
 800a058:	f7f6 f886 	bl	8000168 <__aeabi_dsub>
 800a05c:	a368      	add	r3, pc, #416	@ (adr r3, 800a200 <_dtoa_r+0x2b0>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 fa39 	bl	80004d8 <__aeabi_dmul>
 800a066:	a368      	add	r3, pc, #416	@ (adr r3, 800a208 <_dtoa_r+0x2b8>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7f6 f87e 	bl	800016c <__adddf3>
 800a070:	4604      	mov	r4, r0
 800a072:	4630      	mov	r0, r6
 800a074:	460d      	mov	r5, r1
 800a076:	f7f6 f9c5 	bl	8000404 <__aeabi_i2d>
 800a07a:	a365      	add	r3, pc, #404	@ (adr r3, 800a210 <_dtoa_r+0x2c0>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f7f6 fa2a 	bl	80004d8 <__aeabi_dmul>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 f86e 	bl	800016c <__adddf3>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	f7f6 fcd0 	bl	8000a38 <__aeabi_d2iz>
 800a098:	2200      	movs	r2, #0
 800a09a:	4607      	mov	r7, r0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 fc8b 	bl	80009bc <__aeabi_dcmplt>
 800a0a6:	b140      	cbz	r0, 800a0ba <_dtoa_r+0x16a>
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f7f6 f9ab 	bl	8000404 <__aeabi_i2d>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	f7f6 fc79 	bl	80009a8 <__aeabi_dcmpeq>
 800a0b6:	b900      	cbnz	r0, 800a0ba <_dtoa_r+0x16a>
 800a0b8:	3f01      	subs	r7, #1
 800a0ba:	2f16      	cmp	r7, #22
 800a0bc:	d853      	bhi.n	800a166 <_dtoa_r+0x216>
 800a0be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0c2:	4b5c      	ldr	r3, [pc, #368]	@ (800a234 <_dtoa_r+0x2e4>)
 800a0c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fc76 	bl	80009bc <__aeabi_dcmplt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d04a      	beq.n	800a16a <_dtoa_r+0x21a>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	3f01      	subs	r7, #1
 800a0d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0dc:	1b9b      	subs	r3, r3, r6
 800a0de:	1e5a      	subs	r2, r3, #1
 800a0e0:	bf46      	itte	mi
 800a0e2:	f1c3 0801 	rsbmi	r8, r3, #1
 800a0e6:	2300      	movmi	r3, #0
 800a0e8:	f04f 0800 	movpl.w	r8, #0
 800a0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0ee:	bf48      	it	mi
 800a0f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a0f2:	2f00      	cmp	r7, #0
 800a0f4:	db3b      	blt.n	800a16e <_dtoa_r+0x21e>
 800a0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a0fa:	443b      	add	r3, r7
 800a0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fe:	2300      	movs	r3, #0
 800a100:	930a      	str	r3, [sp, #40]	@ 0x28
 800a102:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a104:	2b09      	cmp	r3, #9
 800a106:	d866      	bhi.n	800a1d6 <_dtoa_r+0x286>
 800a108:	2b05      	cmp	r3, #5
 800a10a:	bfc4      	itt	gt
 800a10c:	3b04      	subgt	r3, #4
 800a10e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a110:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a112:	bfc8      	it	gt
 800a114:	2400      	movgt	r4, #0
 800a116:	f1a3 0302 	sub.w	r3, r3, #2
 800a11a:	bfd8      	it	le
 800a11c:	2401      	movle	r4, #1
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d864      	bhi.n	800a1ec <_dtoa_r+0x29c>
 800a122:	e8df f003 	tbb	[pc, r3]
 800a126:	382b      	.short	0x382b
 800a128:	5636      	.short	0x5636
 800a12a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a12e:	441e      	add	r6, r3
 800a130:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a134:	2b20      	cmp	r3, #32
 800a136:	bfc1      	itttt	gt
 800a138:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a13c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a140:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a144:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a148:	bfd6      	itet	le
 800a14a:	f1c3 0320 	rsble	r3, r3, #32
 800a14e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a152:	fa04 f003 	lslle.w	r0, r4, r3
 800a156:	f7f6 f945 	bl	80003e4 <__aeabi_ui2d>
 800a15a:	2201      	movs	r2, #1
 800a15c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a160:	3e01      	subs	r6, #1
 800a162:	9212      	str	r2, [sp, #72]	@ 0x48
 800a164:	e775      	b.n	800a052 <_dtoa_r+0x102>
 800a166:	2301      	movs	r3, #1
 800a168:	e7b6      	b.n	800a0d8 <_dtoa_r+0x188>
 800a16a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a16c:	e7b5      	b.n	800a0da <_dtoa_r+0x18a>
 800a16e:	427b      	negs	r3, r7
 800a170:	930a      	str	r3, [sp, #40]	@ 0x28
 800a172:	2300      	movs	r3, #0
 800a174:	eba8 0807 	sub.w	r8, r8, r7
 800a178:	930e      	str	r3, [sp, #56]	@ 0x38
 800a17a:	e7c2      	b.n	800a102 <_dtoa_r+0x1b2>
 800a17c:	2300      	movs	r3, #0
 800a17e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a180:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a182:	2b00      	cmp	r3, #0
 800a184:	dc35      	bgt.n	800a1f2 <_dtoa_r+0x2a2>
 800a186:	2301      	movs	r3, #1
 800a188:	461a      	mov	r2, r3
 800a18a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a18e:	9221      	str	r2, [sp, #132]	@ 0x84
 800a190:	e00b      	b.n	800a1aa <_dtoa_r+0x25a>
 800a192:	2301      	movs	r3, #1
 800a194:	e7f3      	b.n	800a17e <_dtoa_r+0x22e>
 800a196:	2300      	movs	r3, #0
 800a198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a19a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	9308      	str	r3, [sp, #32]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	9307      	str	r3, [sp, #28]
 800a1a6:	bfb8      	it	lt
 800a1a8:	2301      	movlt	r3, #1
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a1b2:	f102 0514 	add.w	r5, r2, #20
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	d91f      	bls.n	800a1fa <_dtoa_r+0x2aa>
 800a1ba:	6041      	str	r1, [r0, #4]
 800a1bc:	4658      	mov	r0, fp
 800a1be:	f000 fd8d 	bl	800acdc <_Balloc>
 800a1c2:	4682      	mov	sl, r0
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d139      	bne.n	800a23c <_dtoa_r+0x2ec>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a238 <_dtoa_r+0x2e8>)
 800a1d0:	e6d2      	b.n	8009f78 <_dtoa_r+0x28>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e7e0      	b.n	800a198 <_dtoa_r+0x248>
 800a1d6:	2401      	movs	r4, #1
 800a1d8:	2300      	movs	r3, #0
 800a1da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a1dc:	9320      	str	r3, [sp, #128]	@ 0x80
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a1e8:	2312      	movs	r3, #18
 800a1ea:	e7d0      	b.n	800a18e <_dtoa_r+0x23e>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f0:	e7f5      	b.n	800a1de <_dtoa_r+0x28e>
 800a1f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a1f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a1f8:	e7d7      	b.n	800a1aa <_dtoa_r+0x25a>
 800a1fa:	3101      	adds	r1, #1
 800a1fc:	0052      	lsls	r2, r2, #1
 800a1fe:	e7d8      	b.n	800a1b2 <_dtoa_r+0x262>
 800a200:	636f4361 	.word	0x636f4361
 800a204:	3fd287a7 	.word	0x3fd287a7
 800a208:	8b60c8b3 	.word	0x8b60c8b3
 800a20c:	3fc68a28 	.word	0x3fc68a28
 800a210:	509f79fb 	.word	0x509f79fb
 800a214:	3fd34413 	.word	0x3fd34413
 800a218:	0800bf9f 	.word	0x0800bf9f
 800a21c:	0800bfb6 	.word	0x0800bfb6
 800a220:	7ff00000 	.word	0x7ff00000
 800a224:	0800bf9b 	.word	0x0800bf9b
 800a228:	0800bf6f 	.word	0x0800bf6f
 800a22c:	0800bf6e 	.word	0x0800bf6e
 800a230:	3ff80000 	.word	0x3ff80000
 800a234:	0800c0b0 	.word	0x0800c0b0
 800a238:	0800c00e 	.word	0x0800c00e
 800a23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a240:	6018      	str	r0, [r3, #0]
 800a242:	9b07      	ldr	r3, [sp, #28]
 800a244:	2b0e      	cmp	r3, #14
 800a246:	f200 80a4 	bhi.w	800a392 <_dtoa_r+0x442>
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	f000 80a1 	beq.w	800a392 <_dtoa_r+0x442>
 800a250:	2f00      	cmp	r7, #0
 800a252:	dd33      	ble.n	800a2bc <_dtoa_r+0x36c>
 800a254:	4b86      	ldr	r3, [pc, #536]	@ (800a470 <_dtoa_r+0x520>)
 800a256:	f007 020f 	and.w	r2, r7, #15
 800a25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a25e:	05f8      	lsls	r0, r7, #23
 800a260:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a264:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a26c:	d516      	bpl.n	800a29c <_dtoa_r+0x34c>
 800a26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a272:	4b80      	ldr	r3, [pc, #512]	@ (800a474 <_dtoa_r+0x524>)
 800a274:	2603      	movs	r6, #3
 800a276:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a27a:	f7f6 fa57 	bl	800072c <__aeabi_ddiv>
 800a27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a282:	f004 040f 	and.w	r4, r4, #15
 800a286:	4d7b      	ldr	r5, [pc, #492]	@ (800a474 <_dtoa_r+0x524>)
 800a288:	b954      	cbnz	r4, 800a2a0 <_dtoa_r+0x350>
 800a28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a292:	f7f6 fa4b 	bl	800072c <__aeabi_ddiv>
 800a296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a29a:	e028      	b.n	800a2ee <_dtoa_r+0x39e>
 800a29c:	2602      	movs	r6, #2
 800a29e:	e7f2      	b.n	800a286 <_dtoa_r+0x336>
 800a2a0:	07e1      	lsls	r1, r4, #31
 800a2a2:	d508      	bpl.n	800a2b6 <_dtoa_r+0x366>
 800a2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2ac:	f7f6 f914 	bl	80004d8 <__aeabi_dmul>
 800a2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2b4:	3601      	adds	r6, #1
 800a2b6:	1064      	asrs	r4, r4, #1
 800a2b8:	3508      	adds	r5, #8
 800a2ba:	e7e5      	b.n	800a288 <_dtoa_r+0x338>
 800a2bc:	f000 80d2 	beq.w	800a464 <_dtoa_r+0x514>
 800a2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c4:	427c      	negs	r4, r7
 800a2c6:	4b6a      	ldr	r3, [pc, #424]	@ (800a470 <_dtoa_r+0x520>)
 800a2c8:	f004 020f 	and.w	r2, r4, #15
 800a2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f6 f900 	bl	80004d8 <__aeabi_dmul>
 800a2d8:	2602      	movs	r6, #2
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e0:	4d64      	ldr	r5, [pc, #400]	@ (800a474 <_dtoa_r+0x524>)
 800a2e2:	1124      	asrs	r4, r4, #4
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	f040 80b2 	bne.w	800a44e <_dtoa_r+0x4fe>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1d3      	bne.n	800a296 <_dtoa_r+0x346>
 800a2ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80b7 	beq.w	800a468 <_dtoa_r+0x518>
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	4b5d      	ldr	r3, [pc, #372]	@ (800a478 <_dtoa_r+0x528>)
 800a302:	f7f6 fb5b 	bl	80009bc <__aeabi_dcmplt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f000 80ae 	beq.w	800a468 <_dtoa_r+0x518>
 800a30c:	9b07      	ldr	r3, [sp, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80aa 	beq.w	800a468 <_dtoa_r+0x518>
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	dd37      	ble.n	800a38a <_dtoa_r+0x43a>
 800a31a:	1e7b      	subs	r3, r7, #1
 800a31c:	4620      	mov	r0, r4
 800a31e:	9304      	str	r3, [sp, #16]
 800a320:	2200      	movs	r2, #0
 800a322:	4629      	mov	r1, r5
 800a324:	4b55      	ldr	r3, [pc, #340]	@ (800a47c <_dtoa_r+0x52c>)
 800a326:	f7f6 f8d7 	bl	80004d8 <__aeabi_dmul>
 800a32a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a32e:	9c08      	ldr	r4, [sp, #32]
 800a330:	3601      	adds	r6, #1
 800a332:	4630      	mov	r0, r6
 800a334:	f7f6 f866 	bl	8000404 <__aeabi_i2d>
 800a338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a33c:	f7f6 f8cc 	bl	80004d8 <__aeabi_dmul>
 800a340:	2200      	movs	r2, #0
 800a342:	4b4f      	ldr	r3, [pc, #316]	@ (800a480 <_dtoa_r+0x530>)
 800a344:	f7f5 ff12 	bl	800016c <__adddf3>
 800a348:	4605      	mov	r5, r0
 800a34a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a34e:	2c00      	cmp	r4, #0
 800a350:	f040 809a 	bne.w	800a488 <_dtoa_r+0x538>
 800a354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a358:	2200      	movs	r2, #0
 800a35a:	4b4a      	ldr	r3, [pc, #296]	@ (800a484 <_dtoa_r+0x534>)
 800a35c:	f7f5 ff04 	bl	8000168 <__aeabi_dsub>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a368:	462a      	mov	r2, r5
 800a36a:	4633      	mov	r3, r6
 800a36c:	f7f6 fb44 	bl	80009f8 <__aeabi_dcmpgt>
 800a370:	2800      	cmp	r0, #0
 800a372:	f040 828e 	bne.w	800a892 <_dtoa_r+0x942>
 800a376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37a:	462a      	mov	r2, r5
 800a37c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a380:	f7f6 fb1c 	bl	80009bc <__aeabi_dcmplt>
 800a384:	2800      	cmp	r0, #0
 800a386:	f040 8127 	bne.w	800a5d8 <_dtoa_r+0x688>
 800a38a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a38e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a392:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a394:	2b00      	cmp	r3, #0
 800a396:	f2c0 8163 	blt.w	800a660 <_dtoa_r+0x710>
 800a39a:	2f0e      	cmp	r7, #14
 800a39c:	f300 8160 	bgt.w	800a660 <_dtoa_r+0x710>
 800a3a0:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <_dtoa_r+0x520>)
 800a3a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da03      	bge.n	800a3bc <_dtoa_r+0x46c>
 800a3b4:	9b07      	ldr	r3, [sp, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f340 8100 	ble.w	800a5bc <_dtoa_r+0x66c>
 800a3bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3c0:	4656      	mov	r6, sl
 800a3c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7f6 f9af 	bl	800072c <__aeabi_ddiv>
 800a3ce:	f7f6 fb33 	bl	8000a38 <__aeabi_d2iz>
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	f7f6 f816 	bl	8000404 <__aeabi_i2d>
 800a3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3dc:	f7f6 f87c 	bl	80004d8 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 febe 	bl	8000168 <__aeabi_dsub>
 800a3ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a3f0:	9d07      	ldr	r5, [sp, #28]
 800a3f2:	f806 4b01 	strb.w	r4, [r6], #1
 800a3f6:	eba6 040a 	sub.w	r4, r6, sl
 800a3fa:	42a5      	cmp	r5, r4
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	f040 8116 	bne.w	800a630 <_dtoa_r+0x6e0>
 800a404:	f7f5 feb2 	bl	800016c <__adddf3>
 800a408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	f7f6 faf2 	bl	80009f8 <__aeabi_dcmpgt>
 800a414:	2800      	cmp	r0, #0
 800a416:	f040 80f8 	bne.w	800a60a <_dtoa_r+0x6ba>
 800a41a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f6 fac1 	bl	80009a8 <__aeabi_dcmpeq>
 800a426:	b118      	cbz	r0, 800a430 <_dtoa_r+0x4e0>
 800a428:	f018 0f01 	tst.w	r8, #1
 800a42c:	f040 80ed 	bne.w	800a60a <_dtoa_r+0x6ba>
 800a430:	4649      	mov	r1, r9
 800a432:	4658      	mov	r0, fp
 800a434:	f000 fc92 	bl	800ad5c <_Bfree>
 800a438:	2300      	movs	r3, #0
 800a43a:	7033      	strb	r3, [r6, #0]
 800a43c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a43e:	3701      	adds	r7, #1
 800a440:	601f      	str	r7, [r3, #0]
 800a442:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8320 	beq.w	800aa8a <_dtoa_r+0xb3a>
 800a44a:	601e      	str	r6, [r3, #0]
 800a44c:	e31d      	b.n	800aa8a <_dtoa_r+0xb3a>
 800a44e:	07e2      	lsls	r2, r4, #31
 800a450:	d505      	bpl.n	800a45e <_dtoa_r+0x50e>
 800a452:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	2301      	movs	r3, #1
 800a45c:	3601      	adds	r6, #1
 800a45e:	1064      	asrs	r4, r4, #1
 800a460:	3508      	adds	r5, #8
 800a462:	e73f      	b.n	800a2e4 <_dtoa_r+0x394>
 800a464:	2602      	movs	r6, #2
 800a466:	e742      	b.n	800a2ee <_dtoa_r+0x39e>
 800a468:	9c07      	ldr	r4, [sp, #28]
 800a46a:	9704      	str	r7, [sp, #16]
 800a46c:	e761      	b.n	800a332 <_dtoa_r+0x3e2>
 800a46e:	bf00      	nop
 800a470:	0800c0b0 	.word	0x0800c0b0
 800a474:	0800c088 	.word	0x0800c088
 800a478:	3ff00000 	.word	0x3ff00000
 800a47c:	40240000 	.word	0x40240000
 800a480:	401c0000 	.word	0x401c0000
 800a484:	40140000 	.word	0x40140000
 800a488:	4b70      	ldr	r3, [pc, #448]	@ (800a64c <_dtoa_r+0x6fc>)
 800a48a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a48c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a494:	4454      	add	r4, sl
 800a496:	2900      	cmp	r1, #0
 800a498:	d045      	beq.n	800a526 <_dtoa_r+0x5d6>
 800a49a:	2000      	movs	r0, #0
 800a49c:	496c      	ldr	r1, [pc, #432]	@ (800a650 <_dtoa_r+0x700>)
 800a49e:	f7f6 f945 	bl	800072c <__aeabi_ddiv>
 800a4a2:	4633      	mov	r3, r6
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	f7f5 fe5f 	bl	8000168 <__aeabi_dsub>
 800a4aa:	4656      	mov	r6, sl
 800a4ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b4:	f7f6 fac0 	bl	8000a38 <__aeabi_d2iz>
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	f7f5 ffa3 	bl	8000404 <__aeabi_i2d>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c6:	f7f5 fe4f 	bl	8000168 <__aeabi_dsub>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	3530      	adds	r5, #48	@ 0x30
 800a4d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4d8:	f806 5b01 	strb.w	r5, [r6], #1
 800a4dc:	f7f6 fa6e 	bl	80009bc <__aeabi_dcmplt>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d163      	bne.n	800a5ac <_dtoa_r+0x65c>
 800a4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	495a      	ldr	r1, [pc, #360]	@ (800a654 <_dtoa_r+0x704>)
 800a4ec:	f7f5 fe3c 	bl	8000168 <__aeabi_dsub>
 800a4f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4f4:	f7f6 fa62 	bl	80009bc <__aeabi_dcmplt>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f040 8087 	bne.w	800a60c <_dtoa_r+0x6bc>
 800a4fe:	42a6      	cmp	r6, r4
 800a500:	f43f af43 	beq.w	800a38a <_dtoa_r+0x43a>
 800a504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a508:	2200      	movs	r2, #0
 800a50a:	4b53      	ldr	r3, [pc, #332]	@ (800a658 <_dtoa_r+0x708>)
 800a50c:	f7f5 ffe4 	bl	80004d8 <__aeabi_dmul>
 800a510:	2200      	movs	r2, #0
 800a512:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a51a:	4b4f      	ldr	r3, [pc, #316]	@ (800a658 <_dtoa_r+0x708>)
 800a51c:	f7f5 ffdc 	bl	80004d8 <__aeabi_dmul>
 800a520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a524:	e7c4      	b.n	800a4b0 <_dtoa_r+0x560>
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	f7f5 ffd5 	bl	80004d8 <__aeabi_dmul>
 800a52e:	4656      	mov	r6, sl
 800a530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a534:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a53a:	f7f6 fa7d 	bl	8000a38 <__aeabi_d2iz>
 800a53e:	4605      	mov	r5, r0
 800a540:	f7f5 ff60 	bl	8000404 <__aeabi_i2d>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a54c:	f7f5 fe0c 	bl	8000168 <__aeabi_dsub>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	3530      	adds	r5, #48	@ 0x30
 800a556:	f806 5b01 	strb.w	r5, [r6], #1
 800a55a:	42a6      	cmp	r6, r4
 800a55c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	d124      	bne.n	800a5b0 <_dtoa_r+0x660>
 800a566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a56a:	4b39      	ldr	r3, [pc, #228]	@ (800a650 <_dtoa_r+0x700>)
 800a56c:	f7f5 fdfe 	bl	800016c <__adddf3>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a578:	f7f6 fa3e 	bl	80009f8 <__aeabi_dcmpgt>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d145      	bne.n	800a60c <_dtoa_r+0x6bc>
 800a580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a584:	2000      	movs	r0, #0
 800a586:	4932      	ldr	r1, [pc, #200]	@ (800a650 <_dtoa_r+0x700>)
 800a588:	f7f5 fdee 	bl	8000168 <__aeabi_dsub>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a594:	f7f6 fa12 	bl	80009bc <__aeabi_dcmplt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	f43f aef6 	beq.w	800a38a <_dtoa_r+0x43a>
 800a59e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a5a0:	1e73      	subs	r3, r6, #1
 800a5a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5a8:	2b30      	cmp	r3, #48	@ 0x30
 800a5aa:	d0f8      	beq.n	800a59e <_dtoa_r+0x64e>
 800a5ac:	9f04      	ldr	r7, [sp, #16]
 800a5ae:	e73f      	b.n	800a430 <_dtoa_r+0x4e0>
 800a5b0:	4b29      	ldr	r3, [pc, #164]	@ (800a658 <_dtoa_r+0x708>)
 800a5b2:	f7f5 ff91 	bl	80004d8 <__aeabi_dmul>
 800a5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ba:	e7bc      	b.n	800a536 <_dtoa_r+0x5e6>
 800a5bc:	d10c      	bne.n	800a5d8 <_dtoa_r+0x688>
 800a5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4b25      	ldr	r3, [pc, #148]	@ (800a65c <_dtoa_r+0x70c>)
 800a5c6:	f7f5 ff87 	bl	80004d8 <__aeabi_dmul>
 800a5ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ce:	f7f6 fa09 	bl	80009e4 <__aeabi_dcmpge>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f000 815b 	beq.w	800a88e <_dtoa_r+0x93e>
 800a5d8:	2400      	movs	r4, #0
 800a5da:	4625      	mov	r5, r4
 800a5dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5de:	4656      	mov	r6, sl
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	2700      	movs	r7, #0
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4658      	mov	r0, fp
 800a5ea:	f000 fbb7 	bl	800ad5c <_Bfree>
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	d0dc      	beq.n	800a5ac <_dtoa_r+0x65c>
 800a5f2:	b12f      	cbz	r7, 800a600 <_dtoa_r+0x6b0>
 800a5f4:	42af      	cmp	r7, r5
 800a5f6:	d003      	beq.n	800a600 <_dtoa_r+0x6b0>
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4658      	mov	r0, fp
 800a5fc:	f000 fbae 	bl	800ad5c <_Bfree>
 800a600:	4629      	mov	r1, r5
 800a602:	4658      	mov	r0, fp
 800a604:	f000 fbaa 	bl	800ad5c <_Bfree>
 800a608:	e7d0      	b.n	800a5ac <_dtoa_r+0x65c>
 800a60a:	9704      	str	r7, [sp, #16]
 800a60c:	4633      	mov	r3, r6
 800a60e:	461e      	mov	r6, r3
 800a610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a614:	2a39      	cmp	r2, #57	@ 0x39
 800a616:	d107      	bne.n	800a628 <_dtoa_r+0x6d8>
 800a618:	459a      	cmp	sl, r3
 800a61a:	d1f8      	bne.n	800a60e <_dtoa_r+0x6be>
 800a61c:	9a04      	ldr	r2, [sp, #16]
 800a61e:	3201      	adds	r2, #1
 800a620:	9204      	str	r2, [sp, #16]
 800a622:	2230      	movs	r2, #48	@ 0x30
 800a624:	f88a 2000 	strb.w	r2, [sl]
 800a628:	781a      	ldrb	r2, [r3, #0]
 800a62a:	3201      	adds	r2, #1
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	e7bd      	b.n	800a5ac <_dtoa_r+0x65c>
 800a630:	2200      	movs	r2, #0
 800a632:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <_dtoa_r+0x708>)
 800a634:	f7f5 ff50 	bl	80004d8 <__aeabi_dmul>
 800a638:	2200      	movs	r2, #0
 800a63a:	2300      	movs	r3, #0
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	f7f6 f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 800a644:	2800      	cmp	r0, #0
 800a646:	f43f aebc 	beq.w	800a3c2 <_dtoa_r+0x472>
 800a64a:	e6f1      	b.n	800a430 <_dtoa_r+0x4e0>
 800a64c:	0800c0b0 	.word	0x0800c0b0
 800a650:	3fe00000 	.word	0x3fe00000
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	40240000 	.word	0x40240000
 800a65c:	40140000 	.word	0x40140000
 800a660:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a662:	2a00      	cmp	r2, #0
 800a664:	f000 80db 	beq.w	800a81e <_dtoa_r+0x8ce>
 800a668:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a66a:	2a01      	cmp	r2, #1
 800a66c:	f300 80bf 	bgt.w	800a7ee <_dtoa_r+0x89e>
 800a670:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a672:	2a00      	cmp	r2, #0
 800a674:	f000 80b7 	beq.w	800a7e6 <_dtoa_r+0x896>
 800a678:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a67c:	4646      	mov	r6, r8
 800a67e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a682:	2101      	movs	r1, #1
 800a684:	441a      	add	r2, r3
 800a686:	4658      	mov	r0, fp
 800a688:	4498      	add	r8, r3
 800a68a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a68c:	f000 fc1a 	bl	800aec4 <__i2b>
 800a690:	4605      	mov	r5, r0
 800a692:	b15e      	cbz	r6, 800a6ac <_dtoa_r+0x75c>
 800a694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	dd08      	ble.n	800a6ac <_dtoa_r+0x75c>
 800a69a:	42b3      	cmp	r3, r6
 800a69c:	bfa8      	it	ge
 800a69e:	4633      	movge	r3, r6
 800a6a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6a2:	eba8 0803 	sub.w	r8, r8, r3
 800a6a6:	1af6      	subs	r6, r6, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ae:	b1f3      	cbz	r3, 800a6ee <_dtoa_r+0x79e>
 800a6b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 80b7 	beq.w	800a826 <_dtoa_r+0x8d6>
 800a6b8:	b18c      	cbz	r4, 800a6de <_dtoa_r+0x78e>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f000 fcbe 	bl	800b040 <__pow5mult>
 800a6c4:	464a      	mov	r2, r9
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	4658      	mov	r0, fp
 800a6cc:	f000 fc10 	bl	800aef0 <__multiply>
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	9004      	str	r0, [sp, #16]
 800a6d4:	4658      	mov	r0, fp
 800a6d6:	f000 fb41 	bl	800ad5c <_Bfree>
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	4699      	mov	r9, r3
 800a6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e0:	1b1a      	subs	r2, r3, r4
 800a6e2:	d004      	beq.n	800a6ee <_dtoa_r+0x79e>
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f000 fcaa 	bl	800b040 <__pow5mult>
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	4658      	mov	r0, fp
 800a6f2:	f000 fbe7 	bl	800aec4 <__i2b>
 800a6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 81c9 	beq.w	800aa92 <_dtoa_r+0xb42>
 800a700:	461a      	mov	r2, r3
 800a702:	4601      	mov	r1, r0
 800a704:	4658      	mov	r0, fp
 800a706:	f000 fc9b 	bl	800b040 <__pow5mult>
 800a70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a70c:	4604      	mov	r4, r0
 800a70e:	2b01      	cmp	r3, #1
 800a710:	f300 808f 	bgt.w	800a832 <_dtoa_r+0x8e2>
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 8087 	bne.w	800a82a <_dtoa_r+0x8da>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a722:	2b00      	cmp	r3, #0
 800a724:	f040 8083 	bne.w	800a82e <_dtoa_r+0x8de>
 800a728:	9b03      	ldr	r3, [sp, #12]
 800a72a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a72e:	0d1b      	lsrs	r3, r3, #20
 800a730:	051b      	lsls	r3, r3, #20
 800a732:	b12b      	cbz	r3, 800a740 <_dtoa_r+0x7f0>
 800a734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	3301      	adds	r3, #1
 800a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73e:	2301      	movs	r3, #1
 800a740:	930a      	str	r3, [sp, #40]	@ 0x28
 800a742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 81aa 	beq.w	800aa9e <_dtoa_r+0xb4e>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a750:	6918      	ldr	r0, [r3, #16]
 800a752:	f000 fb6b 	bl	800ae2c <__hi0bits>
 800a756:	f1c0 0020 	rsb	r0, r0, #32
 800a75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a75c:	4418      	add	r0, r3
 800a75e:	f010 001f 	ands.w	r0, r0, #31
 800a762:	d071      	beq.n	800a848 <_dtoa_r+0x8f8>
 800a764:	f1c0 0320 	rsb	r3, r0, #32
 800a768:	2b04      	cmp	r3, #4
 800a76a:	dd65      	ble.n	800a838 <_dtoa_r+0x8e8>
 800a76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76e:	f1c0 001c 	rsb	r0, r0, #28
 800a772:	4403      	add	r3, r0
 800a774:	4480      	add	r8, r0
 800a776:	4406      	add	r6, r0
 800a778:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77a:	f1b8 0f00 	cmp.w	r8, #0
 800a77e:	dd05      	ble.n	800a78c <_dtoa_r+0x83c>
 800a780:	4649      	mov	r1, r9
 800a782:	4642      	mov	r2, r8
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fcb5 	bl	800b0f4 <__lshift>
 800a78a:	4681      	mov	r9, r0
 800a78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd05      	ble.n	800a79e <_dtoa_r+0x84e>
 800a792:	4621      	mov	r1, r4
 800a794:	461a      	mov	r2, r3
 800a796:	4658      	mov	r0, fp
 800a798:	f000 fcac 	bl	800b0f4 <__lshift>
 800a79c:	4604      	mov	r4, r0
 800a79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d053      	beq.n	800a84c <_dtoa_r+0x8fc>
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	4648      	mov	r0, r9
 800a7a8:	f000 fd10 	bl	800b1cc <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	da4d      	bge.n	800a84c <_dtoa_r+0x8fc>
 800a7b0:	1e7b      	subs	r3, r7, #1
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	220a      	movs	r2, #10
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 faf0 	bl	800ada0 <__multadd>
 800a7c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c2:	4681      	mov	r9, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 816c 	beq.w	800aaa2 <_dtoa_r+0xb52>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	4658      	mov	r0, fp
 800a7d2:	f000 fae5 	bl	800ada0 <__multadd>
 800a7d6:	9b08      	ldr	r3, [sp, #32]
 800a7d8:	4605      	mov	r5, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dc61      	bgt.n	800a8a2 <_dtoa_r+0x952>
 800a7de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	dc3b      	bgt.n	800a85c <_dtoa_r+0x90c>
 800a7e4:	e05d      	b.n	800a8a2 <_dtoa_r+0x952>
 800a7e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a7ec:	e746      	b.n	800a67c <_dtoa_r+0x72c>
 800a7ee:	9b07      	ldr	r3, [sp, #28]
 800a7f0:	1e5c      	subs	r4, r3, #1
 800a7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7f4:	42a3      	cmp	r3, r4
 800a7f6:	bfbf      	itttt	lt
 800a7f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a7fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a7fc:	1ae3      	sublt	r3, r4, r3
 800a7fe:	18d2      	addlt	r2, r2, r3
 800a800:	bfa8      	it	ge
 800a802:	1b1c      	subge	r4, r3, r4
 800a804:	9b07      	ldr	r3, [sp, #28]
 800a806:	bfbe      	ittt	lt
 800a808:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a80a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a80c:	2400      	movlt	r4, #0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfb5      	itete	lt
 800a812:	eba8 0603 	sublt.w	r6, r8, r3
 800a816:	4646      	movge	r6, r8
 800a818:	2300      	movlt	r3, #0
 800a81a:	9b07      	ldrge	r3, [sp, #28]
 800a81c:	e730      	b.n	800a680 <_dtoa_r+0x730>
 800a81e:	4646      	mov	r6, r8
 800a820:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a822:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a824:	e735      	b.n	800a692 <_dtoa_r+0x742>
 800a826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a828:	e75c      	b.n	800a6e4 <_dtoa_r+0x794>
 800a82a:	2300      	movs	r3, #0
 800a82c:	e788      	b.n	800a740 <_dtoa_r+0x7f0>
 800a82e:	9b02      	ldr	r3, [sp, #8]
 800a830:	e786      	b.n	800a740 <_dtoa_r+0x7f0>
 800a832:	2300      	movs	r3, #0
 800a834:	930a      	str	r3, [sp, #40]	@ 0x28
 800a836:	e788      	b.n	800a74a <_dtoa_r+0x7fa>
 800a838:	d09f      	beq.n	800a77a <_dtoa_r+0x82a>
 800a83a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a83c:	331c      	adds	r3, #28
 800a83e:	441a      	add	r2, r3
 800a840:	4498      	add	r8, r3
 800a842:	441e      	add	r6, r3
 800a844:	9209      	str	r2, [sp, #36]	@ 0x24
 800a846:	e798      	b.n	800a77a <_dtoa_r+0x82a>
 800a848:	4603      	mov	r3, r0
 800a84a:	e7f6      	b.n	800a83a <_dtoa_r+0x8ea>
 800a84c:	9b07      	ldr	r3, [sp, #28]
 800a84e:	9704      	str	r7, [sp, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	dc20      	bgt.n	800a896 <_dtoa_r+0x946>
 800a854:	9308      	str	r3, [sp, #32]
 800a856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a858:	2b02      	cmp	r3, #2
 800a85a:	dd1e      	ble.n	800a89a <_dtoa_r+0x94a>
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f aebc 	bne.w	800a5dc <_dtoa_r+0x68c>
 800a864:	4621      	mov	r1, r4
 800a866:	2205      	movs	r2, #5
 800a868:	4658      	mov	r0, fp
 800a86a:	f000 fa99 	bl	800ada0 <__multadd>
 800a86e:	4601      	mov	r1, r0
 800a870:	4604      	mov	r4, r0
 800a872:	4648      	mov	r0, r9
 800a874:	f000 fcaa 	bl	800b1cc <__mcmp>
 800a878:	2800      	cmp	r0, #0
 800a87a:	f77f aeaf 	ble.w	800a5dc <_dtoa_r+0x68c>
 800a87e:	2331      	movs	r3, #49	@ 0x31
 800a880:	4656      	mov	r6, sl
 800a882:	f806 3b01 	strb.w	r3, [r6], #1
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	3301      	adds	r3, #1
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	e6aa      	b.n	800a5e4 <_dtoa_r+0x694>
 800a88e:	9c07      	ldr	r4, [sp, #28]
 800a890:	9704      	str	r7, [sp, #16]
 800a892:	4625      	mov	r5, r4
 800a894:	e7f3      	b.n	800a87e <_dtoa_r+0x92e>
 800a896:	9b07      	ldr	r3, [sp, #28]
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 8104 	beq.w	800aaaa <_dtoa_r+0xb5a>
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	dd05      	ble.n	800a8b2 <_dtoa_r+0x962>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	4658      	mov	r0, fp
 800a8ac:	f000 fc22 	bl	800b0f4 <__lshift>
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d05a      	beq.n	800a96e <_dtoa_r+0xa1e>
 800a8b8:	4658      	mov	r0, fp
 800a8ba:	6869      	ldr	r1, [r5, #4]
 800a8bc:	f000 fa0e 	bl	800acdc <_Balloc>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	b928      	cbnz	r0, 800a8d0 <_dtoa_r+0x980>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a8ca:	4b83      	ldr	r3, [pc, #524]	@ (800aad8 <_dtoa_r+0xb88>)
 800a8cc:	f7ff bb54 	b.w	8009f78 <_dtoa_r+0x28>
 800a8d0:	692a      	ldr	r2, [r5, #16]
 800a8d2:	f105 010c 	add.w	r1, r5, #12
 800a8d6:	3202      	adds	r2, #2
 800a8d8:	0092      	lsls	r2, r2, #2
 800a8da:	300c      	adds	r0, #12
 800a8dc:	f000 ffa8 	bl	800b830 <memcpy>
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f000 fc05 	bl	800b0f4 <__lshift>
 800a8ea:	462f      	mov	r7, r5
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	f10a 0301 	add.w	r3, sl, #1
 800a8f2:	9307      	str	r3, [sp, #28]
 800a8f4:	9b08      	ldr	r3, [sp, #32]
 800a8f6:	4453      	add	r3, sl
 800a8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	930a      	str	r3, [sp, #40]	@ 0x28
 800a902:	9b07      	ldr	r3, [sp, #28]
 800a904:	4621      	mov	r1, r4
 800a906:	3b01      	subs	r3, #1
 800a908:	4648      	mov	r0, r9
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	f7ff fa97 	bl	8009e3e <quorem>
 800a910:	4639      	mov	r1, r7
 800a912:	9008      	str	r0, [sp, #32]
 800a914:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a918:	4648      	mov	r0, r9
 800a91a:	f000 fc57 	bl	800b1cc <__mcmp>
 800a91e:	462a      	mov	r2, r5
 800a920:	9009      	str	r0, [sp, #36]	@ 0x24
 800a922:	4621      	mov	r1, r4
 800a924:	4658      	mov	r0, fp
 800a926:	f000 fc6d 	bl	800b204 <__mdiff>
 800a92a:	68c2      	ldr	r2, [r0, #12]
 800a92c:	4606      	mov	r6, r0
 800a92e:	bb02      	cbnz	r2, 800a972 <_dtoa_r+0xa22>
 800a930:	4601      	mov	r1, r0
 800a932:	4648      	mov	r0, r9
 800a934:	f000 fc4a 	bl	800b1cc <__mcmp>
 800a938:	4602      	mov	r2, r0
 800a93a:	4631      	mov	r1, r6
 800a93c:	4658      	mov	r0, fp
 800a93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a940:	f000 fa0c 	bl	800ad5c <_Bfree>
 800a944:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a948:	9e07      	ldr	r6, [sp, #28]
 800a94a:	ea43 0102 	orr.w	r1, r3, r2
 800a94e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a950:	4319      	orrs	r1, r3
 800a952:	d110      	bne.n	800a976 <_dtoa_r+0xa26>
 800a954:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a958:	d029      	beq.n	800a9ae <_dtoa_r+0xa5e>
 800a95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd02      	ble.n	800a966 <_dtoa_r+0xa16>
 800a960:	9b08      	ldr	r3, [sp, #32]
 800a962:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	f883 8000 	strb.w	r8, [r3]
 800a96c:	e63b      	b.n	800a5e6 <_dtoa_r+0x696>
 800a96e:	4628      	mov	r0, r5
 800a970:	e7bb      	b.n	800a8ea <_dtoa_r+0x99a>
 800a972:	2201      	movs	r2, #1
 800a974:	e7e1      	b.n	800a93a <_dtoa_r+0x9ea>
 800a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	db04      	blt.n	800a986 <_dtoa_r+0xa36>
 800a97c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a97e:	430b      	orrs	r3, r1
 800a980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a982:	430b      	orrs	r3, r1
 800a984:	d120      	bne.n	800a9c8 <_dtoa_r+0xa78>
 800a986:	2a00      	cmp	r2, #0
 800a988:	dded      	ble.n	800a966 <_dtoa_r+0xa16>
 800a98a:	4649      	mov	r1, r9
 800a98c:	2201      	movs	r2, #1
 800a98e:	4658      	mov	r0, fp
 800a990:	f000 fbb0 	bl	800b0f4 <__lshift>
 800a994:	4621      	mov	r1, r4
 800a996:	4681      	mov	r9, r0
 800a998:	f000 fc18 	bl	800b1cc <__mcmp>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dc03      	bgt.n	800a9a8 <_dtoa_r+0xa58>
 800a9a0:	d1e1      	bne.n	800a966 <_dtoa_r+0xa16>
 800a9a2:	f018 0f01 	tst.w	r8, #1
 800a9a6:	d0de      	beq.n	800a966 <_dtoa_r+0xa16>
 800a9a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9ac:	d1d8      	bne.n	800a960 <_dtoa_r+0xa10>
 800a9ae:	2339      	movs	r3, #57	@ 0x39
 800a9b0:	9a02      	ldr	r2, [sp, #8]
 800a9b2:	7013      	strb	r3, [r2, #0]
 800a9b4:	4633      	mov	r3, r6
 800a9b6:	461e      	mov	r6, r3
 800a9b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	2a39      	cmp	r2, #57	@ 0x39
 800a9c0:	d052      	beq.n	800aa68 <_dtoa_r+0xb18>
 800a9c2:	3201      	adds	r2, #1
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	e60e      	b.n	800a5e6 <_dtoa_r+0x696>
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	dd07      	ble.n	800a9dc <_dtoa_r+0xa8c>
 800a9cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9d0:	d0ed      	beq.n	800a9ae <_dtoa_r+0xa5e>
 800a9d2:	9a02      	ldr	r2, [sp, #8]
 800a9d4:	f108 0301 	add.w	r3, r8, #1
 800a9d8:	7013      	strb	r3, [r2, #0]
 800a9da:	e604      	b.n	800a5e6 <_dtoa_r+0x696>
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	9a07      	ldr	r2, [sp, #28]
 800a9e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d028      	beq.n	800aa3c <_dtoa_r+0xaec>
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	220a      	movs	r2, #10
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 f9d5 	bl	800ada0 <__multadd>
 800a9f6:	42af      	cmp	r7, r5
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	f04f 020a 	mov.w	r2, #10
 800aa02:	4639      	mov	r1, r7
 800aa04:	4658      	mov	r0, fp
 800aa06:	d107      	bne.n	800aa18 <_dtoa_r+0xac8>
 800aa08:	f000 f9ca 	bl	800ada0 <__multadd>
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	4605      	mov	r5, r0
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	3301      	adds	r3, #1
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	e774      	b.n	800a902 <_dtoa_r+0x9b2>
 800aa18:	f000 f9c2 	bl	800ada0 <__multadd>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4607      	mov	r7, r0
 800aa20:	2300      	movs	r3, #0
 800aa22:	220a      	movs	r2, #10
 800aa24:	4658      	mov	r0, fp
 800aa26:	f000 f9bb 	bl	800ada0 <__multadd>
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	e7f0      	b.n	800aa10 <_dtoa_r+0xac0>
 800aa2e:	9b08      	ldr	r3, [sp, #32]
 800aa30:	2700      	movs	r7, #0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bfcc      	ite	gt
 800aa36:	461e      	movgt	r6, r3
 800aa38:	2601      	movle	r6, #1
 800aa3a:	4456      	add	r6, sl
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4658      	mov	r0, fp
 800aa42:	f000 fb57 	bl	800b0f4 <__lshift>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4681      	mov	r9, r0
 800aa4a:	f000 fbbf 	bl	800b1cc <__mcmp>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	dcb0      	bgt.n	800a9b4 <_dtoa_r+0xa64>
 800aa52:	d102      	bne.n	800aa5a <_dtoa_r+0xb0a>
 800aa54:	f018 0f01 	tst.w	r8, #1
 800aa58:	d1ac      	bne.n	800a9b4 <_dtoa_r+0xa64>
 800aa5a:	4633      	mov	r3, r6
 800aa5c:	461e      	mov	r6, r3
 800aa5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa62:	2a30      	cmp	r2, #48	@ 0x30
 800aa64:	d0fa      	beq.n	800aa5c <_dtoa_r+0xb0c>
 800aa66:	e5be      	b.n	800a5e6 <_dtoa_r+0x696>
 800aa68:	459a      	cmp	sl, r3
 800aa6a:	d1a4      	bne.n	800a9b6 <_dtoa_r+0xa66>
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	2331      	movs	r3, #49	@ 0x31
 800aa74:	f88a 3000 	strb.w	r3, [sl]
 800aa78:	e5b5      	b.n	800a5e6 <_dtoa_r+0x696>
 800aa7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aa7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aadc <_dtoa_r+0xb8c>
 800aa80:	b11b      	cbz	r3, 800aa8a <_dtoa_r+0xb3a>
 800aa82:	f10a 0308 	add.w	r3, sl, #8
 800aa86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	4650      	mov	r0, sl
 800aa8c:	b017      	add	sp, #92	@ 0x5c
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	f77f ae3d 	ble.w	800a714 <_dtoa_r+0x7c4>
 800aa9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa9e:	2001      	movs	r0, #1
 800aaa0:	e65b      	b.n	800a75a <_dtoa_r+0x80a>
 800aaa2:	9b08      	ldr	r3, [sp, #32]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f77f aed6 	ble.w	800a856 <_dtoa_r+0x906>
 800aaaa:	4656      	mov	r6, sl
 800aaac:	4621      	mov	r1, r4
 800aaae:	4648      	mov	r0, r9
 800aab0:	f7ff f9c5 	bl	8009e3e <quorem>
 800aab4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aab8:	9b08      	ldr	r3, [sp, #32]
 800aaba:	f806 8b01 	strb.w	r8, [r6], #1
 800aabe:	eba6 020a 	sub.w	r2, r6, sl
 800aac2:	4293      	cmp	r3, r2
 800aac4:	ddb3      	ble.n	800aa2e <_dtoa_r+0xade>
 800aac6:	4649      	mov	r1, r9
 800aac8:	2300      	movs	r3, #0
 800aaca:	220a      	movs	r2, #10
 800aacc:	4658      	mov	r0, fp
 800aace:	f000 f967 	bl	800ada0 <__multadd>
 800aad2:	4681      	mov	r9, r0
 800aad4:	e7ea      	b.n	800aaac <_dtoa_r+0xb5c>
 800aad6:	bf00      	nop
 800aad8:	0800c00e 	.word	0x0800c00e
 800aadc:	0800bf92 	.word	0x0800bf92

0800aae0 <_free_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4605      	mov	r5, r0
 800aae4:	2900      	cmp	r1, #0
 800aae6:	d040      	beq.n	800ab6a <_free_r+0x8a>
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f0c      	subs	r4, r1, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfb8      	it	lt
 800aaf2:	18e4      	addlt	r4, r4, r3
 800aaf4:	f000 f8e6 	bl	800acc4 <__malloc_lock>
 800aaf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ab6c <_free_r+0x8c>)
 800aafa:	6813      	ldr	r3, [r2, #0]
 800aafc:	b933      	cbnz	r3, 800ab0c <_free_r+0x2c>
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	6014      	str	r4, [r2, #0]
 800ab02:	4628      	mov	r0, r5
 800ab04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab08:	f000 b8e2 	b.w	800acd0 <__malloc_unlock>
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	d908      	bls.n	800ab22 <_free_r+0x42>
 800ab10:	6820      	ldr	r0, [r4, #0]
 800ab12:	1821      	adds	r1, r4, r0
 800ab14:	428b      	cmp	r3, r1
 800ab16:	bf01      	itttt	eq
 800ab18:	6819      	ldreq	r1, [r3, #0]
 800ab1a:	685b      	ldreq	r3, [r3, #4]
 800ab1c:	1809      	addeq	r1, r1, r0
 800ab1e:	6021      	streq	r1, [r4, #0]
 800ab20:	e7ed      	b.n	800aafe <_free_r+0x1e>
 800ab22:	461a      	mov	r2, r3
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	b10b      	cbz	r3, 800ab2c <_free_r+0x4c>
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	d9fa      	bls.n	800ab22 <_free_r+0x42>
 800ab2c:	6811      	ldr	r1, [r2, #0]
 800ab2e:	1850      	adds	r0, r2, r1
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d10b      	bne.n	800ab4c <_free_r+0x6c>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	4401      	add	r1, r0
 800ab38:	1850      	adds	r0, r2, r1
 800ab3a:	4283      	cmp	r3, r0
 800ab3c:	6011      	str	r1, [r2, #0]
 800ab3e:	d1e0      	bne.n	800ab02 <_free_r+0x22>
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	4408      	add	r0, r1
 800ab46:	6010      	str	r0, [r2, #0]
 800ab48:	6053      	str	r3, [r2, #4]
 800ab4a:	e7da      	b.n	800ab02 <_free_r+0x22>
 800ab4c:	d902      	bls.n	800ab54 <_free_r+0x74>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	e7d6      	b.n	800ab02 <_free_r+0x22>
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	1821      	adds	r1, r4, r0
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf01      	itttt	eq
 800ab5c:	6819      	ldreq	r1, [r3, #0]
 800ab5e:	685b      	ldreq	r3, [r3, #4]
 800ab60:	1809      	addeq	r1, r1, r0
 800ab62:	6021      	streq	r1, [r4, #0]
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	6054      	str	r4, [r2, #4]
 800ab68:	e7cb      	b.n	800ab02 <_free_r+0x22>
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	200016c8 	.word	0x200016c8

0800ab70 <malloc>:
 800ab70:	4b02      	ldr	r3, [pc, #8]	@ (800ab7c <malloc+0xc>)
 800ab72:	4601      	mov	r1, r0
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f000 b825 	b.w	800abc4 <_malloc_r>
 800ab7a:	bf00      	nop
 800ab7c:	20000198 	.word	0x20000198

0800ab80 <sbrk_aligned>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	4e0f      	ldr	r6, [pc, #60]	@ (800abc0 <sbrk_aligned+0x40>)
 800ab84:	460c      	mov	r4, r1
 800ab86:	6831      	ldr	r1, [r6, #0]
 800ab88:	4605      	mov	r5, r0
 800ab8a:	b911      	cbnz	r1, 800ab92 <sbrk_aligned+0x12>
 800ab8c:	f000 fe40 	bl	800b810 <_sbrk_r>
 800ab90:	6030      	str	r0, [r6, #0]
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 fe3b 	bl	800b810 <_sbrk_r>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d103      	bne.n	800aba6 <sbrk_aligned+0x26>
 800ab9e:	f04f 34ff 	mov.w	r4, #4294967295
 800aba2:	4620      	mov	r0, r4
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
 800aba6:	1cc4      	adds	r4, r0, #3
 800aba8:	f024 0403 	bic.w	r4, r4, #3
 800abac:	42a0      	cmp	r0, r4
 800abae:	d0f8      	beq.n	800aba2 <sbrk_aligned+0x22>
 800abb0:	1a21      	subs	r1, r4, r0
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 fe2c 	bl	800b810 <_sbrk_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	d1f2      	bne.n	800aba2 <sbrk_aligned+0x22>
 800abbc:	e7ef      	b.n	800ab9e <sbrk_aligned+0x1e>
 800abbe:	bf00      	nop
 800abc0:	200016c4 	.word	0x200016c4

0800abc4 <_malloc_r>:
 800abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc8:	1ccd      	adds	r5, r1, #3
 800abca:	f025 0503 	bic.w	r5, r5, #3
 800abce:	3508      	adds	r5, #8
 800abd0:	2d0c      	cmp	r5, #12
 800abd2:	bf38      	it	cc
 800abd4:	250c      	movcc	r5, #12
 800abd6:	2d00      	cmp	r5, #0
 800abd8:	4606      	mov	r6, r0
 800abda:	db01      	blt.n	800abe0 <_malloc_r+0x1c>
 800abdc:	42a9      	cmp	r1, r5
 800abde:	d904      	bls.n	800abea <_malloc_r+0x26>
 800abe0:	230c      	movs	r3, #12
 800abe2:	6033      	str	r3, [r6, #0]
 800abe4:	2000      	movs	r0, #0
 800abe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acc0 <_malloc_r+0xfc>
 800abee:	f000 f869 	bl	800acc4 <__malloc_lock>
 800abf2:	f8d8 3000 	ldr.w	r3, [r8]
 800abf6:	461c      	mov	r4, r3
 800abf8:	bb44      	cbnz	r4, 800ac4c <_malloc_r+0x88>
 800abfa:	4629      	mov	r1, r5
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ffbf 	bl	800ab80 <sbrk_aligned>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	4604      	mov	r4, r0
 800ac06:	d158      	bne.n	800acba <_malloc_r+0xf6>
 800ac08:	f8d8 4000 	ldr.w	r4, [r8]
 800ac0c:	4627      	mov	r7, r4
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	d143      	bne.n	800ac9a <_malloc_r+0xd6>
 800ac12:	2c00      	cmp	r4, #0
 800ac14:	d04b      	beq.n	800acae <_malloc_r+0xea>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	4639      	mov	r1, r7
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	eb04 0903 	add.w	r9, r4, r3
 800ac20:	f000 fdf6 	bl	800b810 <_sbrk_r>
 800ac24:	4581      	cmp	r9, r0
 800ac26:	d142      	bne.n	800acae <_malloc_r+0xea>
 800ac28:	6821      	ldr	r1, [r4, #0]
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	1a6d      	subs	r5, r5, r1
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7ff ffa6 	bl	800ab80 <sbrk_aligned>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d03a      	beq.n	800acae <_malloc_r+0xea>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	442b      	add	r3, r5
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	bb62      	cbnz	r2, 800aca0 <_malloc_r+0xdc>
 800ac46:	f8c8 7000 	str.w	r7, [r8]
 800ac4a:	e00f      	b.n	800ac6c <_malloc_r+0xa8>
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	1b52      	subs	r2, r2, r5
 800ac50:	d420      	bmi.n	800ac94 <_malloc_r+0xd0>
 800ac52:	2a0b      	cmp	r2, #11
 800ac54:	d917      	bls.n	800ac86 <_malloc_r+0xc2>
 800ac56:	1961      	adds	r1, r4, r5
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	6025      	str	r5, [r4, #0]
 800ac5c:	bf18      	it	ne
 800ac5e:	6059      	strne	r1, [r3, #4]
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	bf08      	it	eq
 800ac64:	f8c8 1000 	streq.w	r1, [r8]
 800ac68:	5162      	str	r2, [r4, r5]
 800ac6a:	604b      	str	r3, [r1, #4]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 f82f 	bl	800acd0 <__malloc_unlock>
 800ac72:	f104 000b 	add.w	r0, r4, #11
 800ac76:	1d23      	adds	r3, r4, #4
 800ac78:	f020 0007 	bic.w	r0, r0, #7
 800ac7c:	1ac2      	subs	r2, r0, r3
 800ac7e:	bf1c      	itt	ne
 800ac80:	1a1b      	subne	r3, r3, r0
 800ac82:	50a3      	strne	r3, [r4, r2]
 800ac84:	e7af      	b.n	800abe6 <_malloc_r+0x22>
 800ac86:	6862      	ldr	r2, [r4, #4]
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	bf0c      	ite	eq
 800ac8c:	f8c8 2000 	streq.w	r2, [r8]
 800ac90:	605a      	strne	r2, [r3, #4]
 800ac92:	e7eb      	b.n	800ac6c <_malloc_r+0xa8>
 800ac94:	4623      	mov	r3, r4
 800ac96:	6864      	ldr	r4, [r4, #4]
 800ac98:	e7ae      	b.n	800abf8 <_malloc_r+0x34>
 800ac9a:	463c      	mov	r4, r7
 800ac9c:	687f      	ldr	r7, [r7, #4]
 800ac9e:	e7b6      	b.n	800ac0e <_malloc_r+0x4a>
 800aca0:	461a      	mov	r2, r3
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d1fb      	bne.n	800aca0 <_malloc_r+0xdc>
 800aca8:	2300      	movs	r3, #0
 800acaa:	6053      	str	r3, [r2, #4]
 800acac:	e7de      	b.n	800ac6c <_malloc_r+0xa8>
 800acae:	230c      	movs	r3, #12
 800acb0:	4630      	mov	r0, r6
 800acb2:	6033      	str	r3, [r6, #0]
 800acb4:	f000 f80c 	bl	800acd0 <__malloc_unlock>
 800acb8:	e794      	b.n	800abe4 <_malloc_r+0x20>
 800acba:	6005      	str	r5, [r0, #0]
 800acbc:	e7d6      	b.n	800ac6c <_malloc_r+0xa8>
 800acbe:	bf00      	nop
 800acc0:	200016c8 	.word	0x200016c8

0800acc4 <__malloc_lock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	@ (800accc <__malloc_lock+0x8>)
 800acc6:	f7ff b8aa 	b.w	8009e1e <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	200016c0 	.word	0x200016c0

0800acd0 <__malloc_unlock>:
 800acd0:	4801      	ldr	r0, [pc, #4]	@ (800acd8 <__malloc_unlock+0x8>)
 800acd2:	f7ff b8a5 	b.w	8009e20 <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	200016c0 	.word	0x200016c0

0800acdc <_Balloc>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	69c6      	ldr	r6, [r0, #28]
 800ace0:	4604      	mov	r4, r0
 800ace2:	460d      	mov	r5, r1
 800ace4:	b976      	cbnz	r6, 800ad04 <_Balloc+0x28>
 800ace6:	2010      	movs	r0, #16
 800ace8:	f7ff ff42 	bl	800ab70 <malloc>
 800acec:	4602      	mov	r2, r0
 800acee:	61e0      	str	r0, [r4, #28]
 800acf0:	b920      	cbnz	r0, 800acfc <_Balloc+0x20>
 800acf2:	216b      	movs	r1, #107	@ 0x6b
 800acf4:	4b17      	ldr	r3, [pc, #92]	@ (800ad54 <_Balloc+0x78>)
 800acf6:	4818      	ldr	r0, [pc, #96]	@ (800ad58 <_Balloc+0x7c>)
 800acf8:	f000 fda8 	bl	800b84c <__assert_func>
 800acfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad00:	6006      	str	r6, [r0, #0]
 800ad02:	60c6      	str	r6, [r0, #12]
 800ad04:	69e6      	ldr	r6, [r4, #28]
 800ad06:	68f3      	ldr	r3, [r6, #12]
 800ad08:	b183      	cbz	r3, 800ad2c <_Balloc+0x50>
 800ad0a:	69e3      	ldr	r3, [r4, #28]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad12:	b9b8      	cbnz	r0, 800ad44 <_Balloc+0x68>
 800ad14:	2101      	movs	r1, #1
 800ad16:	fa01 f605 	lsl.w	r6, r1, r5
 800ad1a:	1d72      	adds	r2, r6, #5
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	0092      	lsls	r2, r2, #2
 800ad20:	f000 fdb2 	bl	800b888 <_calloc_r>
 800ad24:	b160      	cbz	r0, 800ad40 <_Balloc+0x64>
 800ad26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad2a:	e00e      	b.n	800ad4a <_Balloc+0x6e>
 800ad2c:	2221      	movs	r2, #33	@ 0x21
 800ad2e:	2104      	movs	r1, #4
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 fda9 	bl	800b888 <_calloc_r>
 800ad36:	69e3      	ldr	r3, [r4, #28]
 800ad38:	60f0      	str	r0, [r6, #12]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e4      	bne.n	800ad0a <_Balloc+0x2e>
 800ad40:	2000      	movs	r0, #0
 800ad42:	bd70      	pop	{r4, r5, r6, pc}
 800ad44:	6802      	ldr	r2, [r0, #0]
 800ad46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad50:	e7f7      	b.n	800ad42 <_Balloc+0x66>
 800ad52:	bf00      	nop
 800ad54:	0800bf9f 	.word	0x0800bf9f
 800ad58:	0800c01f 	.word	0x0800c01f

0800ad5c <_Bfree>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	69c6      	ldr	r6, [r0, #28]
 800ad60:	4605      	mov	r5, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	b976      	cbnz	r6, 800ad84 <_Bfree+0x28>
 800ad66:	2010      	movs	r0, #16
 800ad68:	f7ff ff02 	bl	800ab70 <malloc>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	61e8      	str	r0, [r5, #28]
 800ad70:	b920      	cbnz	r0, 800ad7c <_Bfree+0x20>
 800ad72:	218f      	movs	r1, #143	@ 0x8f
 800ad74:	4b08      	ldr	r3, [pc, #32]	@ (800ad98 <_Bfree+0x3c>)
 800ad76:	4809      	ldr	r0, [pc, #36]	@ (800ad9c <_Bfree+0x40>)
 800ad78:	f000 fd68 	bl	800b84c <__assert_func>
 800ad7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad80:	6006      	str	r6, [r0, #0]
 800ad82:	60c6      	str	r6, [r0, #12]
 800ad84:	b13c      	cbz	r4, 800ad96 <_Bfree+0x3a>
 800ad86:	69eb      	ldr	r3, [r5, #28]
 800ad88:	6862      	ldr	r2, [r4, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad90:	6021      	str	r1, [r4, #0]
 800ad92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	0800bf9f 	.word	0x0800bf9f
 800ad9c:	0800c01f 	.word	0x0800c01f

0800ada0 <__multadd>:
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	4607      	mov	r7, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	461e      	mov	r6, r3
 800adaa:	2000      	movs	r0, #0
 800adac:	690d      	ldr	r5, [r1, #16]
 800adae:	f101 0c14 	add.w	ip, r1, #20
 800adb2:	f8dc 3000 	ldr.w	r3, [ip]
 800adb6:	3001      	adds	r0, #1
 800adb8:	b299      	uxth	r1, r3
 800adba:	fb02 6101 	mla	r1, r2, r1, r6
 800adbe:	0c1e      	lsrs	r6, r3, #16
 800adc0:	0c0b      	lsrs	r3, r1, #16
 800adc2:	fb02 3306 	mla	r3, r2, r6, r3
 800adc6:	b289      	uxth	r1, r1
 800adc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adcc:	4285      	cmp	r5, r0
 800adce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800add2:	f84c 1b04 	str.w	r1, [ip], #4
 800add6:	dcec      	bgt.n	800adb2 <__multadd+0x12>
 800add8:	b30e      	cbz	r6, 800ae1e <__multadd+0x7e>
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	42ab      	cmp	r3, r5
 800adde:	dc19      	bgt.n	800ae14 <__multadd+0x74>
 800ade0:	6861      	ldr	r1, [r4, #4]
 800ade2:	4638      	mov	r0, r7
 800ade4:	3101      	adds	r1, #1
 800ade6:	f7ff ff79 	bl	800acdc <_Balloc>
 800adea:	4680      	mov	r8, r0
 800adec:	b928      	cbnz	r0, 800adfa <__multadd+0x5a>
 800adee:	4602      	mov	r2, r0
 800adf0:	21ba      	movs	r1, #186	@ 0xba
 800adf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ae24 <__multadd+0x84>)
 800adf4:	480c      	ldr	r0, [pc, #48]	@ (800ae28 <__multadd+0x88>)
 800adf6:	f000 fd29 	bl	800b84c <__assert_func>
 800adfa:	6922      	ldr	r2, [r4, #16]
 800adfc:	f104 010c 	add.w	r1, r4, #12
 800ae00:	3202      	adds	r2, #2
 800ae02:	0092      	lsls	r2, r2, #2
 800ae04:	300c      	adds	r0, #12
 800ae06:	f000 fd13 	bl	800b830 <memcpy>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7ff ffa5 	bl	800ad5c <_Bfree>
 800ae12:	4644      	mov	r4, r8
 800ae14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae18:	3501      	adds	r5, #1
 800ae1a:	615e      	str	r6, [r3, #20]
 800ae1c:	6125      	str	r5, [r4, #16]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	0800c00e 	.word	0x0800c00e
 800ae28:	0800c01f 	.word	0x0800c01f

0800ae2c <__hi0bits>:
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae32:	bf3a      	itte	cc
 800ae34:	0403      	lslcc	r3, r0, #16
 800ae36:	2010      	movcc	r0, #16
 800ae38:	2000      	movcs	r0, #0
 800ae3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae3e:	bf3c      	itt	cc
 800ae40:	021b      	lslcc	r3, r3, #8
 800ae42:	3008      	addcc	r0, #8
 800ae44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae48:	bf3c      	itt	cc
 800ae4a:	011b      	lslcc	r3, r3, #4
 800ae4c:	3004      	addcc	r0, #4
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae52:	bf3c      	itt	cc
 800ae54:	009b      	lslcc	r3, r3, #2
 800ae56:	3002      	addcc	r0, #2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	db05      	blt.n	800ae68 <__hi0bits+0x3c>
 800ae5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae60:	f100 0001 	add.w	r0, r0, #1
 800ae64:	bf08      	it	eq
 800ae66:	2020      	moveq	r0, #32
 800ae68:	4770      	bx	lr

0800ae6a <__lo0bits>:
 800ae6a:	6803      	ldr	r3, [r0, #0]
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	f013 0007 	ands.w	r0, r3, #7
 800ae72:	d00b      	beq.n	800ae8c <__lo0bits+0x22>
 800ae74:	07d9      	lsls	r1, r3, #31
 800ae76:	d421      	bmi.n	800aebc <__lo0bits+0x52>
 800ae78:	0798      	lsls	r0, r3, #30
 800ae7a:	bf49      	itett	mi
 800ae7c:	085b      	lsrmi	r3, r3, #1
 800ae7e:	089b      	lsrpl	r3, r3, #2
 800ae80:	2001      	movmi	r0, #1
 800ae82:	6013      	strmi	r3, [r2, #0]
 800ae84:	bf5c      	itt	pl
 800ae86:	2002      	movpl	r0, #2
 800ae88:	6013      	strpl	r3, [r2, #0]
 800ae8a:	4770      	bx	lr
 800ae8c:	b299      	uxth	r1, r3
 800ae8e:	b909      	cbnz	r1, 800ae94 <__lo0bits+0x2a>
 800ae90:	2010      	movs	r0, #16
 800ae92:	0c1b      	lsrs	r3, r3, #16
 800ae94:	b2d9      	uxtb	r1, r3
 800ae96:	b909      	cbnz	r1, 800ae9c <__lo0bits+0x32>
 800ae98:	3008      	adds	r0, #8
 800ae9a:	0a1b      	lsrs	r3, r3, #8
 800ae9c:	0719      	lsls	r1, r3, #28
 800ae9e:	bf04      	itt	eq
 800aea0:	091b      	lsreq	r3, r3, #4
 800aea2:	3004      	addeq	r0, #4
 800aea4:	0799      	lsls	r1, r3, #30
 800aea6:	bf04      	itt	eq
 800aea8:	089b      	lsreq	r3, r3, #2
 800aeaa:	3002      	addeq	r0, #2
 800aeac:	07d9      	lsls	r1, r3, #31
 800aeae:	d403      	bmi.n	800aeb8 <__lo0bits+0x4e>
 800aeb0:	085b      	lsrs	r3, r3, #1
 800aeb2:	f100 0001 	add.w	r0, r0, #1
 800aeb6:	d003      	beq.n	800aec0 <__lo0bits+0x56>
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	4770      	bx	lr
 800aebc:	2000      	movs	r0, #0
 800aebe:	4770      	bx	lr
 800aec0:	2020      	movs	r0, #32
 800aec2:	4770      	bx	lr

0800aec4 <__i2b>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	460c      	mov	r4, r1
 800aec8:	2101      	movs	r1, #1
 800aeca:	f7ff ff07 	bl	800acdc <_Balloc>
 800aece:	4602      	mov	r2, r0
 800aed0:	b928      	cbnz	r0, 800aede <__i2b+0x1a>
 800aed2:	f240 1145 	movw	r1, #325	@ 0x145
 800aed6:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <__i2b+0x24>)
 800aed8:	4804      	ldr	r0, [pc, #16]	@ (800aeec <__i2b+0x28>)
 800aeda:	f000 fcb7 	bl	800b84c <__assert_func>
 800aede:	2301      	movs	r3, #1
 800aee0:	6144      	str	r4, [r0, #20]
 800aee2:	6103      	str	r3, [r0, #16]
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	0800c00e 	.word	0x0800c00e
 800aeec:	0800c01f 	.word	0x0800c01f

0800aef0 <__multiply>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	4614      	mov	r4, r2
 800aef6:	690a      	ldr	r2, [r1, #16]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	460f      	mov	r7, r1
 800aefc:	429a      	cmp	r2, r3
 800aefe:	bfa2      	ittt	ge
 800af00:	4623      	movge	r3, r4
 800af02:	460c      	movge	r4, r1
 800af04:	461f      	movge	r7, r3
 800af06:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af0e:	68a3      	ldr	r3, [r4, #8]
 800af10:	6861      	ldr	r1, [r4, #4]
 800af12:	eb0a 0609 	add.w	r6, sl, r9
 800af16:	42b3      	cmp	r3, r6
 800af18:	b085      	sub	sp, #20
 800af1a:	bfb8      	it	lt
 800af1c:	3101      	addlt	r1, #1
 800af1e:	f7ff fedd 	bl	800acdc <_Balloc>
 800af22:	b930      	cbnz	r0, 800af32 <__multiply+0x42>
 800af24:	4602      	mov	r2, r0
 800af26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af2a:	4b43      	ldr	r3, [pc, #268]	@ (800b038 <__multiply+0x148>)
 800af2c:	4843      	ldr	r0, [pc, #268]	@ (800b03c <__multiply+0x14c>)
 800af2e:	f000 fc8d 	bl	800b84c <__assert_func>
 800af32:	f100 0514 	add.w	r5, r0, #20
 800af36:	462b      	mov	r3, r5
 800af38:	2200      	movs	r2, #0
 800af3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af3e:	4543      	cmp	r3, r8
 800af40:	d321      	bcc.n	800af86 <__multiply+0x96>
 800af42:	f107 0114 	add.w	r1, r7, #20
 800af46:	f104 0214 	add.w	r2, r4, #20
 800af4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	1b13      	subs	r3, r2, r4
 800af56:	3b15      	subs	r3, #21
 800af58:	f023 0303 	bic.w	r3, r3, #3
 800af5c:	3304      	adds	r3, #4
 800af5e:	f104 0715 	add.w	r7, r4, #21
 800af62:	42ba      	cmp	r2, r7
 800af64:	bf38      	it	cc
 800af66:	2304      	movcc	r3, #4
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	9b02      	ldr	r3, [sp, #8]
 800af6c:	9103      	str	r1, [sp, #12]
 800af6e:	428b      	cmp	r3, r1
 800af70:	d80c      	bhi.n	800af8c <__multiply+0x9c>
 800af72:	2e00      	cmp	r6, #0
 800af74:	dd03      	ble.n	800af7e <__multiply+0x8e>
 800af76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d05a      	beq.n	800b034 <__multiply+0x144>
 800af7e:	6106      	str	r6, [r0, #16]
 800af80:	b005      	add	sp, #20
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	f843 2b04 	str.w	r2, [r3], #4
 800af8a:	e7d8      	b.n	800af3e <__multiply+0x4e>
 800af8c:	f8b1 a000 	ldrh.w	sl, [r1]
 800af90:	f1ba 0f00 	cmp.w	sl, #0
 800af94:	d023      	beq.n	800afde <__multiply+0xee>
 800af96:	46a9      	mov	r9, r5
 800af98:	f04f 0c00 	mov.w	ip, #0
 800af9c:	f104 0e14 	add.w	lr, r4, #20
 800afa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afa4:	f8d9 3000 	ldr.w	r3, [r9]
 800afa8:	fa1f fb87 	uxth.w	fp, r7
 800afac:	b29b      	uxth	r3, r3
 800afae:	fb0a 330b 	mla	r3, sl, fp, r3
 800afb2:	4463      	add	r3, ip
 800afb4:	f8d9 c000 	ldr.w	ip, [r9]
 800afb8:	0c3f      	lsrs	r7, r7, #16
 800afba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800afbe:	fb0a c707 	mla	r7, sl, r7, ip
 800afc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afcc:	4572      	cmp	r2, lr
 800afce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afd2:	f849 3b04 	str.w	r3, [r9], #4
 800afd6:	d8e3      	bhi.n	800afa0 <__multiply+0xb0>
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	f845 c003 	str.w	ip, [r5, r3]
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	3104      	adds	r1, #4
 800afe2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afe6:	f1b9 0f00 	cmp.w	r9, #0
 800afea:	d021      	beq.n	800b030 <__multiply+0x140>
 800afec:	46ae      	mov	lr, r5
 800afee:	f04f 0a00 	mov.w	sl, #0
 800aff2:	682b      	ldr	r3, [r5, #0]
 800aff4:	f104 0c14 	add.w	ip, r4, #20
 800aff8:	f8bc b000 	ldrh.w	fp, [ip]
 800affc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b000:	b29b      	uxth	r3, r3
 800b002:	fb09 770b 	mla	r7, r9, fp, r7
 800b006:	4457      	add	r7, sl
 800b008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b00c:	f84e 3b04 	str.w	r3, [lr], #4
 800b010:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b018:	f8be 3000 	ldrh.w	r3, [lr]
 800b01c:	4562      	cmp	r2, ip
 800b01e:	fb09 330a 	mla	r3, r9, sl, r3
 800b022:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b02a:	d8e5      	bhi.n	800aff8 <__multiply+0x108>
 800b02c:	9f01      	ldr	r7, [sp, #4]
 800b02e:	51eb      	str	r3, [r5, r7]
 800b030:	3504      	adds	r5, #4
 800b032:	e79a      	b.n	800af6a <__multiply+0x7a>
 800b034:	3e01      	subs	r6, #1
 800b036:	e79c      	b.n	800af72 <__multiply+0x82>
 800b038:	0800c00e 	.word	0x0800c00e
 800b03c:	0800c01f 	.word	0x0800c01f

0800b040 <__pow5mult>:
 800b040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b044:	4615      	mov	r5, r2
 800b046:	f012 0203 	ands.w	r2, r2, #3
 800b04a:	4607      	mov	r7, r0
 800b04c:	460e      	mov	r6, r1
 800b04e:	d007      	beq.n	800b060 <__pow5mult+0x20>
 800b050:	4c25      	ldr	r4, [pc, #148]	@ (800b0e8 <__pow5mult+0xa8>)
 800b052:	3a01      	subs	r2, #1
 800b054:	2300      	movs	r3, #0
 800b056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b05a:	f7ff fea1 	bl	800ada0 <__multadd>
 800b05e:	4606      	mov	r6, r0
 800b060:	10ad      	asrs	r5, r5, #2
 800b062:	d03d      	beq.n	800b0e0 <__pow5mult+0xa0>
 800b064:	69fc      	ldr	r4, [r7, #28]
 800b066:	b97c      	cbnz	r4, 800b088 <__pow5mult+0x48>
 800b068:	2010      	movs	r0, #16
 800b06a:	f7ff fd81 	bl	800ab70 <malloc>
 800b06e:	4602      	mov	r2, r0
 800b070:	61f8      	str	r0, [r7, #28]
 800b072:	b928      	cbnz	r0, 800b080 <__pow5mult+0x40>
 800b074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b078:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ec <__pow5mult+0xac>)
 800b07a:	481d      	ldr	r0, [pc, #116]	@ (800b0f0 <__pow5mult+0xb0>)
 800b07c:	f000 fbe6 	bl	800b84c <__assert_func>
 800b080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b084:	6004      	str	r4, [r0, #0]
 800b086:	60c4      	str	r4, [r0, #12]
 800b088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b08c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b090:	b94c      	cbnz	r4, 800b0a6 <__pow5mult+0x66>
 800b092:	f240 2171 	movw	r1, #625	@ 0x271
 800b096:	4638      	mov	r0, r7
 800b098:	f7ff ff14 	bl	800aec4 <__i2b>
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0a4:	6003      	str	r3, [r0, #0]
 800b0a6:	f04f 0900 	mov.w	r9, #0
 800b0aa:	07eb      	lsls	r3, r5, #31
 800b0ac:	d50a      	bpl.n	800b0c4 <__pow5mult+0x84>
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f7ff ff1c 	bl	800aef0 <__multiply>
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff fe4d 	bl	800ad5c <_Bfree>
 800b0c2:	4646      	mov	r6, r8
 800b0c4:	106d      	asrs	r5, r5, #1
 800b0c6:	d00b      	beq.n	800b0e0 <__pow5mult+0xa0>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	b938      	cbnz	r0, 800b0dc <__pow5mult+0x9c>
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff ff0d 	bl	800aef0 <__multiply>
 800b0d6:	6020      	str	r0, [r4, #0]
 800b0d8:	f8c0 9000 	str.w	r9, [r0]
 800b0dc:	4604      	mov	r4, r0
 800b0de:	e7e4      	b.n	800b0aa <__pow5mult+0x6a>
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800c078 	.word	0x0800c078
 800b0ec:	0800bf9f 	.word	0x0800bf9f
 800b0f0:	0800c01f 	.word	0x0800c01f

0800b0f4 <__lshift>:
 800b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	4691      	mov	r9, r2
 800b0fe:	6923      	ldr	r3, [r4, #16]
 800b100:	6849      	ldr	r1, [r1, #4]
 800b102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b10c:	f108 0601 	add.w	r6, r8, #1
 800b110:	42b3      	cmp	r3, r6
 800b112:	db0b      	blt.n	800b12c <__lshift+0x38>
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff fde1 	bl	800acdc <_Balloc>
 800b11a:	4605      	mov	r5, r0
 800b11c:	b948      	cbnz	r0, 800b132 <__lshift+0x3e>
 800b11e:	4602      	mov	r2, r0
 800b120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b124:	4b27      	ldr	r3, [pc, #156]	@ (800b1c4 <__lshift+0xd0>)
 800b126:	4828      	ldr	r0, [pc, #160]	@ (800b1c8 <__lshift+0xd4>)
 800b128:	f000 fb90 	bl	800b84c <__assert_func>
 800b12c:	3101      	adds	r1, #1
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	e7ee      	b.n	800b110 <__lshift+0x1c>
 800b132:	2300      	movs	r3, #0
 800b134:	f100 0114 	add.w	r1, r0, #20
 800b138:	f100 0210 	add.w	r2, r0, #16
 800b13c:	4618      	mov	r0, r3
 800b13e:	4553      	cmp	r3, sl
 800b140:	db33      	blt.n	800b1aa <__lshift+0xb6>
 800b142:	6920      	ldr	r0, [r4, #16]
 800b144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b148:	f104 0314 	add.w	r3, r4, #20
 800b14c:	f019 091f 	ands.w	r9, r9, #31
 800b150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b158:	d02b      	beq.n	800b1b2 <__lshift+0xbe>
 800b15a:	468a      	mov	sl, r1
 800b15c:	2200      	movs	r2, #0
 800b15e:	f1c9 0e20 	rsb	lr, r9, #32
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	fa00 f009 	lsl.w	r0, r0, r9
 800b168:	4310      	orrs	r0, r2
 800b16a:	f84a 0b04 	str.w	r0, [sl], #4
 800b16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b172:	459c      	cmp	ip, r3
 800b174:	fa22 f20e 	lsr.w	r2, r2, lr
 800b178:	d8f3      	bhi.n	800b162 <__lshift+0x6e>
 800b17a:	ebac 0304 	sub.w	r3, ip, r4
 800b17e:	3b15      	subs	r3, #21
 800b180:	f023 0303 	bic.w	r3, r3, #3
 800b184:	3304      	adds	r3, #4
 800b186:	f104 0015 	add.w	r0, r4, #21
 800b18a:	4584      	cmp	ip, r0
 800b18c:	bf38      	it	cc
 800b18e:	2304      	movcc	r3, #4
 800b190:	50ca      	str	r2, [r1, r3]
 800b192:	b10a      	cbz	r2, 800b198 <__lshift+0xa4>
 800b194:	f108 0602 	add.w	r6, r8, #2
 800b198:	3e01      	subs	r6, #1
 800b19a:	4638      	mov	r0, r7
 800b19c:	4621      	mov	r1, r4
 800b19e:	612e      	str	r6, [r5, #16]
 800b1a0:	f7ff fddc 	bl	800ad5c <_Bfree>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	e7c5      	b.n	800b13e <__lshift+0x4a>
 800b1b2:	3904      	subs	r1, #4
 800b1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b8:	459c      	cmp	ip, r3
 800b1ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1be:	d8f9      	bhi.n	800b1b4 <__lshift+0xc0>
 800b1c0:	e7ea      	b.n	800b198 <__lshift+0xa4>
 800b1c2:	bf00      	nop
 800b1c4:	0800c00e 	.word	0x0800c00e
 800b1c8:	0800c01f 	.word	0x0800c01f

0800b1cc <__mcmp>:
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	690a      	ldr	r2, [r1, #16]
 800b1d0:	6900      	ldr	r0, [r0, #16]
 800b1d2:	b530      	push	{r4, r5, lr}
 800b1d4:	1a80      	subs	r0, r0, r2
 800b1d6:	d10e      	bne.n	800b1f6 <__mcmp+0x2a>
 800b1d8:	3314      	adds	r3, #20
 800b1da:	3114      	adds	r1, #20
 800b1dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1ec:	4295      	cmp	r5, r2
 800b1ee:	d003      	beq.n	800b1f8 <__mcmp+0x2c>
 800b1f0:	d205      	bcs.n	800b1fe <__mcmp+0x32>
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	bd30      	pop	{r4, r5, pc}
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d3f3      	bcc.n	800b1e4 <__mcmp+0x18>
 800b1fc:	e7fb      	b.n	800b1f6 <__mcmp+0x2a>
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7f9      	b.n	800b1f6 <__mcmp+0x2a>
	...

0800b204 <__mdiff>:
 800b204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	4689      	mov	r9, r1
 800b20a:	4606      	mov	r6, r0
 800b20c:	4611      	mov	r1, r2
 800b20e:	4648      	mov	r0, r9
 800b210:	4614      	mov	r4, r2
 800b212:	f7ff ffdb 	bl	800b1cc <__mcmp>
 800b216:	1e05      	subs	r5, r0, #0
 800b218:	d112      	bne.n	800b240 <__mdiff+0x3c>
 800b21a:	4629      	mov	r1, r5
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7ff fd5d 	bl	800acdc <_Balloc>
 800b222:	4602      	mov	r2, r0
 800b224:	b928      	cbnz	r0, 800b232 <__mdiff+0x2e>
 800b226:	f240 2137 	movw	r1, #567	@ 0x237
 800b22a:	4b3e      	ldr	r3, [pc, #248]	@ (800b324 <__mdiff+0x120>)
 800b22c:	483e      	ldr	r0, [pc, #248]	@ (800b328 <__mdiff+0x124>)
 800b22e:	f000 fb0d 	bl	800b84c <__assert_func>
 800b232:	2301      	movs	r3, #1
 800b234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b238:	4610      	mov	r0, r2
 800b23a:	b003      	add	sp, #12
 800b23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b240:	bfbc      	itt	lt
 800b242:	464b      	movlt	r3, r9
 800b244:	46a1      	movlt	r9, r4
 800b246:	4630      	mov	r0, r6
 800b248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b24c:	bfba      	itte	lt
 800b24e:	461c      	movlt	r4, r3
 800b250:	2501      	movlt	r5, #1
 800b252:	2500      	movge	r5, #0
 800b254:	f7ff fd42 	bl	800acdc <_Balloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	b918      	cbnz	r0, 800b264 <__mdiff+0x60>
 800b25c:	f240 2145 	movw	r1, #581	@ 0x245
 800b260:	4b30      	ldr	r3, [pc, #192]	@ (800b324 <__mdiff+0x120>)
 800b262:	e7e3      	b.n	800b22c <__mdiff+0x28>
 800b264:	f100 0b14 	add.w	fp, r0, #20
 800b268:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b26c:	f109 0310 	add.w	r3, r9, #16
 800b270:	60c5      	str	r5, [r0, #12]
 800b272:	f04f 0c00 	mov.w	ip, #0
 800b276:	f109 0514 	add.w	r5, r9, #20
 800b27a:	46d9      	mov	r9, fp
 800b27c:	6926      	ldr	r6, [r4, #16]
 800b27e:	f104 0e14 	add.w	lr, r4, #20
 800b282:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b286:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b292:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b296:	b281      	uxth	r1, r0
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	fa1f f38a 	uxth.w	r3, sl
 800b29e:	1a5b      	subs	r3, r3, r1
 800b2a0:	0c00      	lsrs	r0, r0, #16
 800b2a2:	4463      	add	r3, ip
 800b2a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2b2:	4576      	cmp	r6, lr
 800b2b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2b8:	f849 3b04 	str.w	r3, [r9], #4
 800b2bc:	d8e6      	bhi.n	800b28c <__mdiff+0x88>
 800b2be:	1b33      	subs	r3, r6, r4
 800b2c0:	3b15      	subs	r3, #21
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	3415      	adds	r4, #21
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	42a6      	cmp	r6, r4
 800b2cc:	bf38      	it	cc
 800b2ce:	2304      	movcc	r3, #4
 800b2d0:	441d      	add	r5, r3
 800b2d2:	445b      	add	r3, fp
 800b2d4:	461e      	mov	r6, r3
 800b2d6:	462c      	mov	r4, r5
 800b2d8:	4544      	cmp	r4, r8
 800b2da:	d30e      	bcc.n	800b2fa <__mdiff+0xf6>
 800b2dc:	f108 0103 	add.w	r1, r8, #3
 800b2e0:	1b49      	subs	r1, r1, r5
 800b2e2:	f021 0103 	bic.w	r1, r1, #3
 800b2e6:	3d03      	subs	r5, #3
 800b2e8:	45a8      	cmp	r8, r5
 800b2ea:	bf38      	it	cc
 800b2ec:	2100      	movcc	r1, #0
 800b2ee:	440b      	add	r3, r1
 800b2f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2f4:	b199      	cbz	r1, 800b31e <__mdiff+0x11a>
 800b2f6:	6117      	str	r7, [r2, #16]
 800b2f8:	e79e      	b.n	800b238 <__mdiff+0x34>
 800b2fa:	46e6      	mov	lr, ip
 800b2fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b300:	fa1f fc81 	uxth.w	ip, r1
 800b304:	44f4      	add	ip, lr
 800b306:	0c08      	lsrs	r0, r1, #16
 800b308:	4471      	add	r1, lr
 800b30a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b30e:	b289      	uxth	r1, r1
 800b310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b318:	f846 1b04 	str.w	r1, [r6], #4
 800b31c:	e7dc      	b.n	800b2d8 <__mdiff+0xd4>
 800b31e:	3f01      	subs	r7, #1
 800b320:	e7e6      	b.n	800b2f0 <__mdiff+0xec>
 800b322:	bf00      	nop
 800b324:	0800c00e 	.word	0x0800c00e
 800b328:	0800c01f 	.word	0x0800c01f

0800b32c <__d2b>:
 800b32c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b330:	2101      	movs	r1, #1
 800b332:	4690      	mov	r8, r2
 800b334:	4699      	mov	r9, r3
 800b336:	9e08      	ldr	r6, [sp, #32]
 800b338:	f7ff fcd0 	bl	800acdc <_Balloc>
 800b33c:	4604      	mov	r4, r0
 800b33e:	b930      	cbnz	r0, 800b34e <__d2b+0x22>
 800b340:	4602      	mov	r2, r0
 800b342:	f240 310f 	movw	r1, #783	@ 0x30f
 800b346:	4b23      	ldr	r3, [pc, #140]	@ (800b3d4 <__d2b+0xa8>)
 800b348:	4823      	ldr	r0, [pc, #140]	@ (800b3d8 <__d2b+0xac>)
 800b34a:	f000 fa7f 	bl	800b84c <__assert_func>
 800b34e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b356:	b10d      	cbz	r5, 800b35c <__d2b+0x30>
 800b358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	f1b8 0300 	subs.w	r3, r8, #0
 800b362:	d024      	beq.n	800b3ae <__d2b+0x82>
 800b364:	4668      	mov	r0, sp
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	f7ff fd7f 	bl	800ae6a <__lo0bits>
 800b36c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b370:	b1d8      	cbz	r0, 800b3aa <__d2b+0x7e>
 800b372:	f1c0 0320 	rsb	r3, r0, #32
 800b376:	fa02 f303 	lsl.w	r3, r2, r3
 800b37a:	430b      	orrs	r3, r1
 800b37c:	40c2      	lsrs	r2, r0
 800b37e:	6163      	str	r3, [r4, #20]
 800b380:	9201      	str	r2, [sp, #4]
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	bf0c      	ite	eq
 800b388:	2201      	moveq	r2, #1
 800b38a:	2202      	movne	r2, #2
 800b38c:	61a3      	str	r3, [r4, #24]
 800b38e:	6122      	str	r2, [r4, #16]
 800b390:	b1ad      	cbz	r5, 800b3be <__d2b+0x92>
 800b392:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b396:	4405      	add	r5, r0
 800b398:	6035      	str	r5, [r6, #0]
 800b39a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	6018      	str	r0, [r3, #0]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	b002      	add	sp, #8
 800b3a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b3aa:	6161      	str	r1, [r4, #20]
 800b3ac:	e7e9      	b.n	800b382 <__d2b+0x56>
 800b3ae:	a801      	add	r0, sp, #4
 800b3b0:	f7ff fd5b 	bl	800ae6a <__lo0bits>
 800b3b4:	9b01      	ldr	r3, [sp, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	6163      	str	r3, [r4, #20]
 800b3ba:	3020      	adds	r0, #32
 800b3bc:	e7e7      	b.n	800b38e <__d2b+0x62>
 800b3be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3c6:	6030      	str	r0, [r6, #0]
 800b3c8:	6918      	ldr	r0, [r3, #16]
 800b3ca:	f7ff fd2f 	bl	800ae2c <__hi0bits>
 800b3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3d2:	e7e4      	b.n	800b39e <__d2b+0x72>
 800b3d4:	0800c00e 	.word	0x0800c00e
 800b3d8:	0800c01f 	.word	0x0800c01f

0800b3dc <__ssputs_r>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	461f      	mov	r7, r3
 800b3e2:	688e      	ldr	r6, [r1, #8]
 800b3e4:	4682      	mov	sl, r0
 800b3e6:	42be      	cmp	r6, r7
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	4690      	mov	r8, r2
 800b3ec:	680b      	ldr	r3, [r1, #0]
 800b3ee:	d82d      	bhi.n	800b44c <__ssputs_r+0x70>
 800b3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3f8:	d026      	beq.n	800b448 <__ssputs_r+0x6c>
 800b3fa:	6965      	ldr	r5, [r4, #20]
 800b3fc:	6909      	ldr	r1, [r1, #16]
 800b3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b402:	eba3 0901 	sub.w	r9, r3, r1
 800b406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b40a:	1c7b      	adds	r3, r7, #1
 800b40c:	444b      	add	r3, r9
 800b40e:	106d      	asrs	r5, r5, #1
 800b410:	429d      	cmp	r5, r3
 800b412:	bf38      	it	cc
 800b414:	461d      	movcc	r5, r3
 800b416:	0553      	lsls	r3, r2, #21
 800b418:	d527      	bpl.n	800b46a <__ssputs_r+0x8e>
 800b41a:	4629      	mov	r1, r5
 800b41c:	f7ff fbd2 	bl	800abc4 <_malloc_r>
 800b420:	4606      	mov	r6, r0
 800b422:	b360      	cbz	r0, 800b47e <__ssputs_r+0xa2>
 800b424:	464a      	mov	r2, r9
 800b426:	6921      	ldr	r1, [r4, #16]
 800b428:	f000 fa02 	bl	800b830 <memcpy>
 800b42c:	89a3      	ldrh	r3, [r4, #12]
 800b42e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b436:	81a3      	strh	r3, [r4, #12]
 800b438:	6126      	str	r6, [r4, #16]
 800b43a:	444e      	add	r6, r9
 800b43c:	6026      	str	r6, [r4, #0]
 800b43e:	463e      	mov	r6, r7
 800b440:	6165      	str	r5, [r4, #20]
 800b442:	eba5 0509 	sub.w	r5, r5, r9
 800b446:	60a5      	str	r5, [r4, #8]
 800b448:	42be      	cmp	r6, r7
 800b44a:	d900      	bls.n	800b44e <__ssputs_r+0x72>
 800b44c:	463e      	mov	r6, r7
 800b44e:	4632      	mov	r2, r6
 800b450:	4641      	mov	r1, r8
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	f000 f9c2 	bl	800b7dc <memmove>
 800b458:	2000      	movs	r0, #0
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	1b9b      	subs	r3, r3, r6
 800b45e:	60a3      	str	r3, [r4, #8]
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	4433      	add	r3, r6
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46a:	462a      	mov	r2, r5
 800b46c:	f000 fa32 	bl	800b8d4 <_realloc_r>
 800b470:	4606      	mov	r6, r0
 800b472:	2800      	cmp	r0, #0
 800b474:	d1e0      	bne.n	800b438 <__ssputs_r+0x5c>
 800b476:	4650      	mov	r0, sl
 800b478:	6921      	ldr	r1, [r4, #16]
 800b47a:	f7ff fb31 	bl	800aae0 <_free_r>
 800b47e:	230c      	movs	r3, #12
 800b480:	f8ca 3000 	str.w	r3, [sl]
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	f04f 30ff 	mov.w	r0, #4294967295
 800b48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	e7e9      	b.n	800b466 <__ssputs_r+0x8a>
	...

0800b494 <_svfiprintf_r>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4698      	mov	r8, r3
 800b49a:	898b      	ldrh	r3, [r1, #12]
 800b49c:	4607      	mov	r7, r0
 800b49e:	061b      	lsls	r3, r3, #24
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	b09d      	sub	sp, #116	@ 0x74
 800b4a6:	d510      	bpl.n	800b4ca <_svfiprintf_r+0x36>
 800b4a8:	690b      	ldr	r3, [r1, #16]
 800b4aa:	b973      	cbnz	r3, 800b4ca <_svfiprintf_r+0x36>
 800b4ac:	2140      	movs	r1, #64	@ 0x40
 800b4ae:	f7ff fb89 	bl	800abc4 <_malloc_r>
 800b4b2:	6028      	str	r0, [r5, #0]
 800b4b4:	6128      	str	r0, [r5, #16]
 800b4b6:	b930      	cbnz	r0, 800b4c6 <_svfiprintf_r+0x32>
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	603b      	str	r3, [r7, #0]
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	b01d      	add	sp, #116	@ 0x74
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	2340      	movs	r3, #64	@ 0x40
 800b4c8:	616b      	str	r3, [r5, #20]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ce:	2320      	movs	r3, #32
 800b4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4d4:	2330      	movs	r3, #48	@ 0x30
 800b4d6:	f04f 0901 	mov.w	r9, #1
 800b4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b678 <_svfiprintf_r+0x1e4>
 800b4e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	469a      	mov	sl, r3
 800b4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ee:	b10a      	cbz	r2, 800b4f4 <_svfiprintf_r+0x60>
 800b4f0:	2a25      	cmp	r2, #37	@ 0x25
 800b4f2:	d1f9      	bne.n	800b4e8 <_svfiprintf_r+0x54>
 800b4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f8:	d00b      	beq.n	800b512 <_svfiprintf_r+0x7e>
 800b4fa:	465b      	mov	r3, fp
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	4638      	mov	r0, r7
 800b502:	f7ff ff6b 	bl	800b3dc <__ssputs_r>
 800b506:	3001      	adds	r0, #1
 800b508:	f000 80a7 	beq.w	800b65a <_svfiprintf_r+0x1c6>
 800b50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b50e:	445a      	add	r2, fp
 800b510:	9209      	str	r2, [sp, #36]	@ 0x24
 800b512:	f89a 3000 	ldrb.w	r3, [sl]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 809f 	beq.w	800b65a <_svfiprintf_r+0x1c6>
 800b51c:	2300      	movs	r3, #0
 800b51e:	f04f 32ff 	mov.w	r2, #4294967295
 800b522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b526:	f10a 0a01 	add.w	sl, sl, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	9307      	str	r3, [sp, #28]
 800b52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b532:	931a      	str	r3, [sp, #104]	@ 0x68
 800b534:	4654      	mov	r4, sl
 800b536:	2205      	movs	r2, #5
 800b538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53c:	484e      	ldr	r0, [pc, #312]	@ (800b678 <_svfiprintf_r+0x1e4>)
 800b53e:	f7fe fc70 	bl	8009e22 <memchr>
 800b542:	9a04      	ldr	r2, [sp, #16]
 800b544:	b9d8      	cbnz	r0, 800b57e <_svfiprintf_r+0xea>
 800b546:	06d0      	lsls	r0, r2, #27
 800b548:	bf44      	itt	mi
 800b54a:	2320      	movmi	r3, #32
 800b54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b550:	0711      	lsls	r1, r2, #28
 800b552:	bf44      	itt	mi
 800b554:	232b      	movmi	r3, #43	@ 0x2b
 800b556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b55a:	f89a 3000 	ldrb.w	r3, [sl]
 800b55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b560:	d015      	beq.n	800b58e <_svfiprintf_r+0xfa>
 800b562:	4654      	mov	r4, sl
 800b564:	2000      	movs	r0, #0
 800b566:	f04f 0c0a 	mov.w	ip, #10
 800b56a:	9a07      	ldr	r2, [sp, #28]
 800b56c:	4621      	mov	r1, r4
 800b56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b572:	3b30      	subs	r3, #48	@ 0x30
 800b574:	2b09      	cmp	r3, #9
 800b576:	d94b      	bls.n	800b610 <_svfiprintf_r+0x17c>
 800b578:	b1b0      	cbz	r0, 800b5a8 <_svfiprintf_r+0x114>
 800b57a:	9207      	str	r2, [sp, #28]
 800b57c:	e014      	b.n	800b5a8 <_svfiprintf_r+0x114>
 800b57e:	eba0 0308 	sub.w	r3, r0, r8
 800b582:	fa09 f303 	lsl.w	r3, r9, r3
 800b586:	4313      	orrs	r3, r2
 800b588:	46a2      	mov	sl, r4
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	e7d2      	b.n	800b534 <_svfiprintf_r+0xa0>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	1d19      	adds	r1, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	9103      	str	r1, [sp, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfbb      	ittet	lt
 800b59a:	425b      	neglt	r3, r3
 800b59c:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a0:	9307      	strge	r3, [sp, #28]
 800b5a2:	9307      	strlt	r3, [sp, #28]
 800b5a4:	bfb8      	it	lt
 800b5a6:	9204      	strlt	r2, [sp, #16]
 800b5a8:	7823      	ldrb	r3, [r4, #0]
 800b5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5ac:	d10a      	bne.n	800b5c4 <_svfiprintf_r+0x130>
 800b5ae:	7863      	ldrb	r3, [r4, #1]
 800b5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b2:	d132      	bne.n	800b61a <_svfiprintf_r+0x186>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	3402      	adds	r4, #2
 800b5b8:	1d1a      	adds	r2, r3, #4
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	9203      	str	r2, [sp, #12]
 800b5be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b67c <_svfiprintf_r+0x1e8>
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	7821      	ldrb	r1, [r4, #0]
 800b5ce:	f7fe fc28 	bl	8009e22 <memchr>
 800b5d2:	b138      	cbz	r0, 800b5e4 <_svfiprintf_r+0x150>
 800b5d4:	2240      	movs	r2, #64	@ 0x40
 800b5d6:	9b04      	ldr	r3, [sp, #16]
 800b5d8:	eba0 000a 	sub.w	r0, r0, sl
 800b5dc:	4082      	lsls	r2, r0
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	3401      	adds	r4, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e8:	2206      	movs	r2, #6
 800b5ea:	4825      	ldr	r0, [pc, #148]	@ (800b680 <_svfiprintf_r+0x1ec>)
 800b5ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5f0:	f7fe fc17 	bl	8009e22 <memchr>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d036      	beq.n	800b666 <_svfiprintf_r+0x1d2>
 800b5f8:	4b22      	ldr	r3, [pc, #136]	@ (800b684 <_svfiprintf_r+0x1f0>)
 800b5fa:	bb1b      	cbnz	r3, 800b644 <_svfiprintf_r+0x1b0>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	3307      	adds	r3, #7
 800b600:	f023 0307 	bic.w	r3, r3, #7
 800b604:	3308      	adds	r3, #8
 800b606:	9303      	str	r3, [sp, #12]
 800b608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b60a:	4433      	add	r3, r6
 800b60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60e:	e76a      	b.n	800b4e6 <_svfiprintf_r+0x52>
 800b610:	460c      	mov	r4, r1
 800b612:	2001      	movs	r0, #1
 800b614:	fb0c 3202 	mla	r2, ip, r2, r3
 800b618:	e7a8      	b.n	800b56c <_svfiprintf_r+0xd8>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f04f 0c0a 	mov.w	ip, #10
 800b620:	4619      	mov	r1, r3
 800b622:	3401      	adds	r4, #1
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	4620      	mov	r0, r4
 800b628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b62c:	3a30      	subs	r2, #48	@ 0x30
 800b62e:	2a09      	cmp	r2, #9
 800b630:	d903      	bls.n	800b63a <_svfiprintf_r+0x1a6>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0c6      	beq.n	800b5c4 <_svfiprintf_r+0x130>
 800b636:	9105      	str	r1, [sp, #20]
 800b638:	e7c4      	b.n	800b5c4 <_svfiprintf_r+0x130>
 800b63a:	4604      	mov	r4, r0
 800b63c:	2301      	movs	r3, #1
 800b63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b642:	e7f0      	b.n	800b626 <_svfiprintf_r+0x192>
 800b644:	ab03      	add	r3, sp, #12
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	462a      	mov	r2, r5
 800b64a:	4638      	mov	r0, r7
 800b64c:	4b0e      	ldr	r3, [pc, #56]	@ (800b688 <_svfiprintf_r+0x1f4>)
 800b64e:	a904      	add	r1, sp, #16
 800b650:	f7fd fe84 	bl	800935c <_printf_float>
 800b654:	1c42      	adds	r2, r0, #1
 800b656:	4606      	mov	r6, r0
 800b658:	d1d6      	bne.n	800b608 <_svfiprintf_r+0x174>
 800b65a:	89ab      	ldrh	r3, [r5, #12]
 800b65c:	065b      	lsls	r3, r3, #25
 800b65e:	f53f af2d 	bmi.w	800b4bc <_svfiprintf_r+0x28>
 800b662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b664:	e72c      	b.n	800b4c0 <_svfiprintf_r+0x2c>
 800b666:	ab03      	add	r3, sp, #12
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	462a      	mov	r2, r5
 800b66c:	4638      	mov	r0, r7
 800b66e:	4b06      	ldr	r3, [pc, #24]	@ (800b688 <_svfiprintf_r+0x1f4>)
 800b670:	a904      	add	r1, sp, #16
 800b672:	f7fe f911 	bl	8009898 <_printf_i>
 800b676:	e7ed      	b.n	800b654 <_svfiprintf_r+0x1c0>
 800b678:	0800c178 	.word	0x0800c178
 800b67c:	0800c17e 	.word	0x0800c17e
 800b680:	0800c182 	.word	0x0800c182
 800b684:	0800935d 	.word	0x0800935d
 800b688:	0800b3dd 	.word	0x0800b3dd

0800b68c <__sflush_r>:
 800b68c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	0716      	lsls	r6, r2, #28
 800b694:	4605      	mov	r5, r0
 800b696:	460c      	mov	r4, r1
 800b698:	d454      	bmi.n	800b744 <__sflush_r+0xb8>
 800b69a:	684b      	ldr	r3, [r1, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	dc02      	bgt.n	800b6a6 <__sflush_r+0x1a>
 800b6a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dd48      	ble.n	800b738 <__sflush_r+0xac>
 800b6a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6a8:	2e00      	cmp	r6, #0
 800b6aa:	d045      	beq.n	800b738 <__sflush_r+0xac>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6b2:	682f      	ldr	r7, [r5, #0]
 800b6b4:	6a21      	ldr	r1, [r4, #32]
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	d030      	beq.n	800b71c <__sflush_r+0x90>
 800b6ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	0759      	lsls	r1, r3, #29
 800b6c0:	d505      	bpl.n	800b6ce <__sflush_r+0x42>
 800b6c2:	6863      	ldr	r3, [r4, #4]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6c8:	b10b      	cbz	r3, 800b6ce <__sflush_r+0x42>
 800b6ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6cc:	1ad2      	subs	r2, r2, r3
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6d4:	6a21      	ldr	r1, [r4, #32]
 800b6d6:	47b0      	blx	r6
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	d106      	bne.n	800b6ec <__sflush_r+0x60>
 800b6de:	6829      	ldr	r1, [r5, #0]
 800b6e0:	291d      	cmp	r1, #29
 800b6e2:	d82b      	bhi.n	800b73c <__sflush_r+0xb0>
 800b6e4:	4a28      	ldr	r2, [pc, #160]	@ (800b788 <__sflush_r+0xfc>)
 800b6e6:	410a      	asrs	r2, r1
 800b6e8:	07d6      	lsls	r6, r2, #31
 800b6ea:	d427      	bmi.n	800b73c <__sflush_r+0xb0>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	6062      	str	r2, [r4, #4]
 800b6f0:	6922      	ldr	r2, [r4, #16]
 800b6f2:	04d9      	lsls	r1, r3, #19
 800b6f4:	6022      	str	r2, [r4, #0]
 800b6f6:	d504      	bpl.n	800b702 <__sflush_r+0x76>
 800b6f8:	1c42      	adds	r2, r0, #1
 800b6fa:	d101      	bne.n	800b700 <__sflush_r+0x74>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b903      	cbnz	r3, 800b702 <__sflush_r+0x76>
 800b700:	6560      	str	r0, [r4, #84]	@ 0x54
 800b702:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b704:	602f      	str	r7, [r5, #0]
 800b706:	b1b9      	cbz	r1, 800b738 <__sflush_r+0xac>
 800b708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d002      	beq.n	800b716 <__sflush_r+0x8a>
 800b710:	4628      	mov	r0, r5
 800b712:	f7ff f9e5 	bl	800aae0 <_free_r>
 800b716:	2300      	movs	r3, #0
 800b718:	6363      	str	r3, [r4, #52]	@ 0x34
 800b71a:	e00d      	b.n	800b738 <__sflush_r+0xac>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4628      	mov	r0, r5
 800b720:	47b0      	blx	r6
 800b722:	4602      	mov	r2, r0
 800b724:	1c50      	adds	r0, r2, #1
 800b726:	d1c9      	bne.n	800b6bc <__sflush_r+0x30>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0c6      	beq.n	800b6bc <__sflush_r+0x30>
 800b72e:	2b1d      	cmp	r3, #29
 800b730:	d001      	beq.n	800b736 <__sflush_r+0xaa>
 800b732:	2b16      	cmp	r3, #22
 800b734:	d11d      	bne.n	800b772 <__sflush_r+0xe6>
 800b736:	602f      	str	r7, [r5, #0]
 800b738:	2000      	movs	r0, #0
 800b73a:	e021      	b.n	800b780 <__sflush_r+0xf4>
 800b73c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b740:	b21b      	sxth	r3, r3
 800b742:	e01a      	b.n	800b77a <__sflush_r+0xee>
 800b744:	690f      	ldr	r7, [r1, #16]
 800b746:	2f00      	cmp	r7, #0
 800b748:	d0f6      	beq.n	800b738 <__sflush_r+0xac>
 800b74a:	0793      	lsls	r3, r2, #30
 800b74c:	bf18      	it	ne
 800b74e:	2300      	movne	r3, #0
 800b750:	680e      	ldr	r6, [r1, #0]
 800b752:	bf08      	it	eq
 800b754:	694b      	ldreq	r3, [r1, #20]
 800b756:	1bf6      	subs	r6, r6, r7
 800b758:	600f      	str	r7, [r1, #0]
 800b75a:	608b      	str	r3, [r1, #8]
 800b75c:	2e00      	cmp	r6, #0
 800b75e:	ddeb      	ble.n	800b738 <__sflush_r+0xac>
 800b760:	4633      	mov	r3, r6
 800b762:	463a      	mov	r2, r7
 800b764:	4628      	mov	r0, r5
 800b766:	6a21      	ldr	r1, [r4, #32]
 800b768:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b76c:	47e0      	blx	ip
 800b76e:	2800      	cmp	r0, #0
 800b770:	dc07      	bgt.n	800b782 <__sflush_r+0xf6>
 800b772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b782:	4407      	add	r7, r0
 800b784:	1a36      	subs	r6, r6, r0
 800b786:	e7e9      	b.n	800b75c <__sflush_r+0xd0>
 800b788:	dfbffffe 	.word	0xdfbffffe

0800b78c <_fflush_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	690b      	ldr	r3, [r1, #16]
 800b790:	4605      	mov	r5, r0
 800b792:	460c      	mov	r4, r1
 800b794:	b913      	cbnz	r3, 800b79c <_fflush_r+0x10>
 800b796:	2500      	movs	r5, #0
 800b798:	4628      	mov	r0, r5
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	b118      	cbz	r0, 800b7a6 <_fflush_r+0x1a>
 800b79e:	6a03      	ldr	r3, [r0, #32]
 800b7a0:	b90b      	cbnz	r3, 800b7a6 <_fflush_r+0x1a>
 800b7a2:	f7fe fa25 	bl	8009bf0 <__sinit>
 800b7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0f3      	beq.n	800b796 <_fflush_r+0xa>
 800b7ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7b0:	07d0      	lsls	r0, r2, #31
 800b7b2:	d404      	bmi.n	800b7be <_fflush_r+0x32>
 800b7b4:	0599      	lsls	r1, r3, #22
 800b7b6:	d402      	bmi.n	800b7be <_fflush_r+0x32>
 800b7b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ba:	f7fe fb30 	bl	8009e1e <__retarget_lock_acquire_recursive>
 800b7be:	4628      	mov	r0, r5
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	f7ff ff63 	bl	800b68c <__sflush_r>
 800b7c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	07da      	lsls	r2, r3, #31
 800b7cc:	d4e4      	bmi.n	800b798 <_fflush_r+0xc>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	059b      	lsls	r3, r3, #22
 800b7d2:	d4e1      	bmi.n	800b798 <_fflush_r+0xc>
 800b7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7d6:	f7fe fb23 	bl	8009e20 <__retarget_lock_release_recursive>
 800b7da:	e7dd      	b.n	800b798 <_fflush_r+0xc>

0800b7dc <memmove>:
 800b7dc:	4288      	cmp	r0, r1
 800b7de:	b510      	push	{r4, lr}
 800b7e0:	eb01 0402 	add.w	r4, r1, r2
 800b7e4:	d902      	bls.n	800b7ec <memmove+0x10>
 800b7e6:	4284      	cmp	r4, r0
 800b7e8:	4623      	mov	r3, r4
 800b7ea:	d807      	bhi.n	800b7fc <memmove+0x20>
 800b7ec:	1e43      	subs	r3, r0, #1
 800b7ee:	42a1      	cmp	r1, r4
 800b7f0:	d008      	beq.n	800b804 <memmove+0x28>
 800b7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7fa:	e7f8      	b.n	800b7ee <memmove+0x12>
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	4402      	add	r2, r0
 800b800:	428a      	cmp	r2, r1
 800b802:	d100      	bne.n	800b806 <memmove+0x2a>
 800b804:	bd10      	pop	{r4, pc}
 800b806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b80e:	e7f7      	b.n	800b800 <memmove+0x24>

0800b810 <_sbrk_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	2300      	movs	r3, #0
 800b814:	4d05      	ldr	r5, [pc, #20]	@ (800b82c <_sbrk_r+0x1c>)
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	f7f5 fea4 	bl	8001568 <_sbrk>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_sbrk_r+0x1a>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_sbrk_r+0x1a>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	200016bc 	.word	0x200016bc

0800b830 <memcpy>:
 800b830:	440a      	add	r2, r1
 800b832:	4291      	cmp	r1, r2
 800b834:	f100 33ff 	add.w	r3, r0, #4294967295
 800b838:	d100      	bne.n	800b83c <memcpy+0xc>
 800b83a:	4770      	bx	lr
 800b83c:	b510      	push	{r4, lr}
 800b83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b842:	4291      	cmp	r1, r2
 800b844:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b848:	d1f9      	bne.n	800b83e <memcpy+0xe>
 800b84a:	bd10      	pop	{r4, pc}

0800b84c <__assert_func>:
 800b84c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b84e:	4614      	mov	r4, r2
 800b850:	461a      	mov	r2, r3
 800b852:	4b09      	ldr	r3, [pc, #36]	@ (800b878 <__assert_func+0x2c>)
 800b854:	4605      	mov	r5, r0
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68d8      	ldr	r0, [r3, #12]
 800b85a:	b954      	cbnz	r4, 800b872 <__assert_func+0x26>
 800b85c:	4b07      	ldr	r3, [pc, #28]	@ (800b87c <__assert_func+0x30>)
 800b85e:	461c      	mov	r4, r3
 800b860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b864:	9100      	str	r1, [sp, #0]
 800b866:	462b      	mov	r3, r5
 800b868:	4905      	ldr	r1, [pc, #20]	@ (800b880 <__assert_func+0x34>)
 800b86a:	f000 f86f 	bl	800b94c <fiprintf>
 800b86e:	f000 f87f 	bl	800b970 <abort>
 800b872:	4b04      	ldr	r3, [pc, #16]	@ (800b884 <__assert_func+0x38>)
 800b874:	e7f4      	b.n	800b860 <__assert_func+0x14>
 800b876:	bf00      	nop
 800b878:	20000198 	.word	0x20000198
 800b87c:	0800c1ce 	.word	0x0800c1ce
 800b880:	0800c1a0 	.word	0x0800c1a0
 800b884:	0800c193 	.word	0x0800c193

0800b888 <_calloc_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	fba1 5402 	umull	r5, r4, r1, r2
 800b88e:	b93c      	cbnz	r4, 800b8a0 <_calloc_r+0x18>
 800b890:	4629      	mov	r1, r5
 800b892:	f7ff f997 	bl	800abc4 <_malloc_r>
 800b896:	4606      	mov	r6, r0
 800b898:	b928      	cbnz	r0, 800b8a6 <_calloc_r+0x1e>
 800b89a:	2600      	movs	r6, #0
 800b89c:	4630      	mov	r0, r6
 800b89e:	bd70      	pop	{r4, r5, r6, pc}
 800b8a0:	220c      	movs	r2, #12
 800b8a2:	6002      	str	r2, [r0, #0]
 800b8a4:	e7f9      	b.n	800b89a <_calloc_r+0x12>
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f7fe fa3a 	bl	8009d22 <memset>
 800b8ae:	e7f5      	b.n	800b89c <_calloc_r+0x14>

0800b8b0 <__ascii_mbtowc>:
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	b901      	cbnz	r1, 800b8b6 <__ascii_mbtowc+0x6>
 800b8b4:	a901      	add	r1, sp, #4
 800b8b6:	b142      	cbz	r2, 800b8ca <__ascii_mbtowc+0x1a>
 800b8b8:	b14b      	cbz	r3, 800b8ce <__ascii_mbtowc+0x1e>
 800b8ba:	7813      	ldrb	r3, [r2, #0]
 800b8bc:	600b      	str	r3, [r1, #0]
 800b8be:	7812      	ldrb	r2, [r2, #0]
 800b8c0:	1e10      	subs	r0, r2, #0
 800b8c2:	bf18      	it	ne
 800b8c4:	2001      	movne	r0, #1
 800b8c6:	b002      	add	sp, #8
 800b8c8:	4770      	bx	lr
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	e7fb      	b.n	800b8c6 <__ascii_mbtowc+0x16>
 800b8ce:	f06f 0001 	mvn.w	r0, #1
 800b8d2:	e7f8      	b.n	800b8c6 <__ascii_mbtowc+0x16>

0800b8d4 <_realloc_r>:
 800b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	4680      	mov	r8, r0
 800b8da:	4615      	mov	r5, r2
 800b8dc:	460c      	mov	r4, r1
 800b8de:	b921      	cbnz	r1, 800b8ea <_realloc_r+0x16>
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	f7ff b96d 	b.w	800abc4 <_malloc_r>
 800b8ea:	b92a      	cbnz	r2, 800b8f8 <_realloc_r+0x24>
 800b8ec:	f7ff f8f8 	bl	800aae0 <_free_r>
 800b8f0:	2400      	movs	r4, #0
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	f000 f841 	bl	800b97e <_malloc_usable_size_r>
 800b8fc:	4285      	cmp	r5, r0
 800b8fe:	4606      	mov	r6, r0
 800b900:	d802      	bhi.n	800b908 <_realloc_r+0x34>
 800b902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b906:	d8f4      	bhi.n	800b8f2 <_realloc_r+0x1e>
 800b908:	4629      	mov	r1, r5
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7ff f95a 	bl	800abc4 <_malloc_r>
 800b910:	4607      	mov	r7, r0
 800b912:	2800      	cmp	r0, #0
 800b914:	d0ec      	beq.n	800b8f0 <_realloc_r+0x1c>
 800b916:	42b5      	cmp	r5, r6
 800b918:	462a      	mov	r2, r5
 800b91a:	4621      	mov	r1, r4
 800b91c:	bf28      	it	cs
 800b91e:	4632      	movcs	r2, r6
 800b920:	f7ff ff86 	bl	800b830 <memcpy>
 800b924:	4621      	mov	r1, r4
 800b926:	4640      	mov	r0, r8
 800b928:	f7ff f8da 	bl	800aae0 <_free_r>
 800b92c:	463c      	mov	r4, r7
 800b92e:	e7e0      	b.n	800b8f2 <_realloc_r+0x1e>

0800b930 <__ascii_wctomb>:
 800b930:	4603      	mov	r3, r0
 800b932:	4608      	mov	r0, r1
 800b934:	b141      	cbz	r1, 800b948 <__ascii_wctomb+0x18>
 800b936:	2aff      	cmp	r2, #255	@ 0xff
 800b938:	d904      	bls.n	800b944 <__ascii_wctomb+0x14>
 800b93a:	228a      	movs	r2, #138	@ 0x8a
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	4770      	bx	lr
 800b944:	2001      	movs	r0, #1
 800b946:	700a      	strb	r2, [r1, #0]
 800b948:	4770      	bx	lr
	...

0800b94c <fiprintf>:
 800b94c:	b40e      	push	{r1, r2, r3}
 800b94e:	b503      	push	{r0, r1, lr}
 800b950:	4601      	mov	r1, r0
 800b952:	ab03      	add	r3, sp, #12
 800b954:	4805      	ldr	r0, [pc, #20]	@ (800b96c <fiprintf+0x20>)
 800b956:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95a:	6800      	ldr	r0, [r0, #0]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	f000 f83d 	bl	800b9dc <_vfiprintf_r>
 800b962:	b002      	add	sp, #8
 800b964:	f85d eb04 	ldr.w	lr, [sp], #4
 800b968:	b003      	add	sp, #12
 800b96a:	4770      	bx	lr
 800b96c:	20000198 	.word	0x20000198

0800b970 <abort>:
 800b970:	2006      	movs	r0, #6
 800b972:	b508      	push	{r3, lr}
 800b974:	f000 fa06 	bl	800bd84 <raise>
 800b978:	2001      	movs	r0, #1
 800b97a:	f7f5 fd80 	bl	800147e <_exit>

0800b97e <_malloc_usable_size_r>:
 800b97e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b982:	1f18      	subs	r0, r3, #4
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfbc      	itt	lt
 800b988:	580b      	ldrlt	r3, [r1, r0]
 800b98a:	18c0      	addlt	r0, r0, r3
 800b98c:	4770      	bx	lr

0800b98e <__sfputc_r>:
 800b98e:	6893      	ldr	r3, [r2, #8]
 800b990:	b410      	push	{r4}
 800b992:	3b01      	subs	r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	6093      	str	r3, [r2, #8]
 800b998:	da07      	bge.n	800b9aa <__sfputc_r+0x1c>
 800b99a:	6994      	ldr	r4, [r2, #24]
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	db01      	blt.n	800b9a4 <__sfputc_r+0x16>
 800b9a0:	290a      	cmp	r1, #10
 800b9a2:	d102      	bne.n	800b9aa <__sfputc_r+0x1c>
 800b9a4:	bc10      	pop	{r4}
 800b9a6:	f000 b931 	b.w	800bc0c <__swbuf_r>
 800b9aa:	6813      	ldr	r3, [r2, #0]
 800b9ac:	1c58      	adds	r0, r3, #1
 800b9ae:	6010      	str	r0, [r2, #0]
 800b9b0:	7019      	strb	r1, [r3, #0]
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	bc10      	pop	{r4}
 800b9b6:	4770      	bx	lr

0800b9b8 <__sfputs_r>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460f      	mov	r7, r1
 800b9be:	4614      	mov	r4, r2
 800b9c0:	18d5      	adds	r5, r2, r3
 800b9c2:	42ac      	cmp	r4, r5
 800b9c4:	d101      	bne.n	800b9ca <__sfputs_r+0x12>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	e007      	b.n	800b9da <__sfputs_r+0x22>
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d2:	f7ff ffdc 	bl	800b98e <__sfputc_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d1f3      	bne.n	800b9c2 <__sfputs_r+0xa>
 800b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9dc <_vfiprintf_r>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	4614      	mov	r4, r2
 800b9e4:	4698      	mov	r8, r3
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	b09d      	sub	sp, #116	@ 0x74
 800b9ea:	b118      	cbz	r0, 800b9f4 <_vfiprintf_r+0x18>
 800b9ec:	6a03      	ldr	r3, [r0, #32]
 800b9ee:	b90b      	cbnz	r3, 800b9f4 <_vfiprintf_r+0x18>
 800b9f0:	f7fe f8fe 	bl	8009bf0 <__sinit>
 800b9f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9f6:	07d9      	lsls	r1, r3, #31
 800b9f8:	d405      	bmi.n	800ba06 <_vfiprintf_r+0x2a>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	059a      	lsls	r2, r3, #22
 800b9fe:	d402      	bmi.n	800ba06 <_vfiprintf_r+0x2a>
 800ba00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba02:	f7fe fa0c 	bl	8009e1e <__retarget_lock_acquire_recursive>
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	071b      	lsls	r3, r3, #28
 800ba0a:	d501      	bpl.n	800ba10 <_vfiprintf_r+0x34>
 800ba0c:	692b      	ldr	r3, [r5, #16]
 800ba0e:	b99b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x5c>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4630      	mov	r0, r6
 800ba14:	f000 f938 	bl	800bc88 <__swsetup_r>
 800ba18:	b170      	cbz	r0, 800ba38 <_vfiprintf_r+0x5c>
 800ba1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba1c:	07dc      	lsls	r4, r3, #31
 800ba1e:	d504      	bpl.n	800ba2a <_vfiprintf_r+0x4e>
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	b01d      	add	sp, #116	@ 0x74
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	0598      	lsls	r0, r3, #22
 800ba2e:	d4f7      	bmi.n	800ba20 <_vfiprintf_r+0x44>
 800ba30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba32:	f7fe f9f5 	bl	8009e20 <__retarget_lock_release_recursive>
 800ba36:	e7f3      	b.n	800ba20 <_vfiprintf_r+0x44>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba3c:	2320      	movs	r3, #32
 800ba3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba42:	2330      	movs	r3, #48	@ 0x30
 800ba44:	f04f 0901 	mov.w	r9, #1
 800ba48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bbf8 <_vfiprintf_r+0x21c>
 800ba50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba54:	4623      	mov	r3, r4
 800ba56:	469a      	mov	sl, r3
 800ba58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5c:	b10a      	cbz	r2, 800ba62 <_vfiprintf_r+0x86>
 800ba5e:	2a25      	cmp	r2, #37	@ 0x25
 800ba60:	d1f9      	bne.n	800ba56 <_vfiprintf_r+0x7a>
 800ba62:	ebba 0b04 	subs.w	fp, sl, r4
 800ba66:	d00b      	beq.n	800ba80 <_vfiprintf_r+0xa4>
 800ba68:	465b      	mov	r3, fp
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ffa2 	bl	800b9b8 <__sfputs_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	f000 80a7 	beq.w	800bbc8 <_vfiprintf_r+0x1ec>
 800ba7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba7c:	445a      	add	r2, fp
 800ba7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba80:	f89a 3000 	ldrb.w	r3, [sl]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 809f 	beq.w	800bbc8 <_vfiprintf_r+0x1ec>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba94:	f10a 0a01 	add.w	sl, sl, #1
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	9307      	str	r3, [sp, #28]
 800ba9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800baa0:	931a      	str	r3, [sp, #104]	@ 0x68
 800baa2:	4654      	mov	r4, sl
 800baa4:	2205      	movs	r2, #5
 800baa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baaa:	4853      	ldr	r0, [pc, #332]	@ (800bbf8 <_vfiprintf_r+0x21c>)
 800baac:	f7fe f9b9 	bl	8009e22 <memchr>
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	b9d8      	cbnz	r0, 800baec <_vfiprintf_r+0x110>
 800bab4:	06d1      	lsls	r1, r2, #27
 800bab6:	bf44      	itt	mi
 800bab8:	2320      	movmi	r3, #32
 800baba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800babe:	0713      	lsls	r3, r2, #28
 800bac0:	bf44      	itt	mi
 800bac2:	232b      	movmi	r3, #43	@ 0x2b
 800bac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bac8:	f89a 3000 	ldrb.w	r3, [sl]
 800bacc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bace:	d015      	beq.n	800bafc <_vfiprintf_r+0x120>
 800bad0:	4654      	mov	r4, sl
 800bad2:	2000      	movs	r0, #0
 800bad4:	f04f 0c0a 	mov.w	ip, #10
 800bad8:	9a07      	ldr	r2, [sp, #28]
 800bada:	4621      	mov	r1, r4
 800badc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae0:	3b30      	subs	r3, #48	@ 0x30
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d94b      	bls.n	800bb7e <_vfiprintf_r+0x1a2>
 800bae6:	b1b0      	cbz	r0, 800bb16 <_vfiprintf_r+0x13a>
 800bae8:	9207      	str	r2, [sp, #28]
 800baea:	e014      	b.n	800bb16 <_vfiprintf_r+0x13a>
 800baec:	eba0 0308 	sub.w	r3, r0, r8
 800baf0:	fa09 f303 	lsl.w	r3, r9, r3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	46a2      	mov	sl, r4
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	e7d2      	b.n	800baa2 <_vfiprintf_r+0xc6>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d19      	adds	r1, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9103      	str	r1, [sp, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bfbb      	ittet	lt
 800bb08:	425b      	neglt	r3, r3
 800bb0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0e:	9307      	strge	r3, [sp, #28]
 800bb10:	9307      	strlt	r3, [sp, #28]
 800bb12:	bfb8      	it	lt
 800bb14:	9204      	strlt	r2, [sp, #16]
 800bb16:	7823      	ldrb	r3, [r4, #0]
 800bb18:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb1a:	d10a      	bne.n	800bb32 <_vfiprintf_r+0x156>
 800bb1c:	7863      	ldrb	r3, [r4, #1]
 800bb1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb20:	d132      	bne.n	800bb88 <_vfiprintf_r+0x1ac>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	3402      	adds	r4, #2
 800bb26:	1d1a      	adds	r2, r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	9203      	str	r2, [sp, #12]
 800bb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bbfc <_vfiprintf_r+0x220>
 800bb36:	2203      	movs	r2, #3
 800bb38:	4650      	mov	r0, sl
 800bb3a:	7821      	ldrb	r1, [r4, #0]
 800bb3c:	f7fe f971 	bl	8009e22 <memchr>
 800bb40:	b138      	cbz	r0, 800bb52 <_vfiprintf_r+0x176>
 800bb42:	2240      	movs	r2, #64	@ 0x40
 800bb44:	9b04      	ldr	r3, [sp, #16]
 800bb46:	eba0 000a 	sub.w	r0, r0, sl
 800bb4a:	4082      	lsls	r2, r0
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	3401      	adds	r4, #1
 800bb50:	9304      	str	r3, [sp, #16]
 800bb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb56:	2206      	movs	r2, #6
 800bb58:	4829      	ldr	r0, [pc, #164]	@ (800bc00 <_vfiprintf_r+0x224>)
 800bb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb5e:	f7fe f960 	bl	8009e22 <memchr>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d03f      	beq.n	800bbe6 <_vfiprintf_r+0x20a>
 800bb66:	4b27      	ldr	r3, [pc, #156]	@ (800bc04 <_vfiprintf_r+0x228>)
 800bb68:	bb1b      	cbnz	r3, 800bbb2 <_vfiprintf_r+0x1d6>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3307      	adds	r3, #7
 800bb6e:	f023 0307 	bic.w	r3, r3, #7
 800bb72:	3308      	adds	r3, #8
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb78:	443b      	add	r3, r7
 800bb7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb7c:	e76a      	b.n	800ba54 <_vfiprintf_r+0x78>
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2001      	movs	r0, #1
 800bb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb86:	e7a8      	b.n	800bada <_vfiprintf_r+0xfe>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	f04f 0c0a 	mov.w	ip, #10
 800bb8e:	4619      	mov	r1, r3
 800bb90:	3401      	adds	r4, #1
 800bb92:	9305      	str	r3, [sp, #20]
 800bb94:	4620      	mov	r0, r4
 800bb96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9a:	3a30      	subs	r2, #48	@ 0x30
 800bb9c:	2a09      	cmp	r2, #9
 800bb9e:	d903      	bls.n	800bba8 <_vfiprintf_r+0x1cc>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0c6      	beq.n	800bb32 <_vfiprintf_r+0x156>
 800bba4:	9105      	str	r1, [sp, #20]
 800bba6:	e7c4      	b.n	800bb32 <_vfiprintf_r+0x156>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	2301      	movs	r3, #1
 800bbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb0:	e7f0      	b.n	800bb94 <_vfiprintf_r+0x1b8>
 800bbb2:	ab03      	add	r3, sp, #12
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4630      	mov	r0, r6
 800bbba:	4b13      	ldr	r3, [pc, #76]	@ (800bc08 <_vfiprintf_r+0x22c>)
 800bbbc:	a904      	add	r1, sp, #16
 800bbbe:	f7fd fbcd 	bl	800935c <_printf_float>
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	1c78      	adds	r0, r7, #1
 800bbc6:	d1d6      	bne.n	800bb76 <_vfiprintf_r+0x19a>
 800bbc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbca:	07d9      	lsls	r1, r3, #31
 800bbcc:	d405      	bmi.n	800bbda <_vfiprintf_r+0x1fe>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	059a      	lsls	r2, r3, #22
 800bbd2:	d402      	bmi.n	800bbda <_vfiprintf_r+0x1fe>
 800bbd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbd6:	f7fe f923 	bl	8009e20 <__retarget_lock_release_recursive>
 800bbda:	89ab      	ldrh	r3, [r5, #12]
 800bbdc:	065b      	lsls	r3, r3, #25
 800bbde:	f53f af1f 	bmi.w	800ba20 <_vfiprintf_r+0x44>
 800bbe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbe4:	e71e      	b.n	800ba24 <_vfiprintf_r+0x48>
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4630      	mov	r0, r6
 800bbee:	4b06      	ldr	r3, [pc, #24]	@ (800bc08 <_vfiprintf_r+0x22c>)
 800bbf0:	a904      	add	r1, sp, #16
 800bbf2:	f7fd fe51 	bl	8009898 <_printf_i>
 800bbf6:	e7e4      	b.n	800bbc2 <_vfiprintf_r+0x1e6>
 800bbf8:	0800c178 	.word	0x0800c178
 800bbfc:	0800c17e 	.word	0x0800c17e
 800bc00:	0800c182 	.word	0x0800c182
 800bc04:	0800935d 	.word	0x0800935d
 800bc08:	0800b9b9 	.word	0x0800b9b9

0800bc0c <__swbuf_r>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	460e      	mov	r6, r1
 800bc10:	4614      	mov	r4, r2
 800bc12:	4605      	mov	r5, r0
 800bc14:	b118      	cbz	r0, 800bc1e <__swbuf_r+0x12>
 800bc16:	6a03      	ldr	r3, [r0, #32]
 800bc18:	b90b      	cbnz	r3, 800bc1e <__swbuf_r+0x12>
 800bc1a:	f7fd ffe9 	bl	8009bf0 <__sinit>
 800bc1e:	69a3      	ldr	r3, [r4, #24]
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	071a      	lsls	r2, r3, #28
 800bc26:	d501      	bpl.n	800bc2c <__swbuf_r+0x20>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b943      	cbnz	r3, 800bc3e <__swbuf_r+0x32>
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f82a 	bl	800bc88 <__swsetup_r>
 800bc34:	b118      	cbz	r0, 800bc3e <__swbuf_r+0x32>
 800bc36:	f04f 37ff 	mov.w	r7, #4294967295
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	6922      	ldr	r2, [r4, #16]
 800bc42:	b2f6      	uxtb	r6, r6
 800bc44:	1a98      	subs	r0, r3, r2
 800bc46:	6963      	ldr	r3, [r4, #20]
 800bc48:	4637      	mov	r7, r6
 800bc4a:	4283      	cmp	r3, r0
 800bc4c:	dc05      	bgt.n	800bc5a <__swbuf_r+0x4e>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7ff fd9b 	bl	800b78c <_fflush_r>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d1ed      	bne.n	800bc36 <__swbuf_r+0x2a>
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	60a3      	str	r3, [r4, #8]
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	6022      	str	r2, [r4, #0]
 800bc66:	701e      	strb	r6, [r3, #0]
 800bc68:	6962      	ldr	r2, [r4, #20]
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d004      	beq.n	800bc7a <__swbuf_r+0x6e>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	07db      	lsls	r3, r3, #31
 800bc74:	d5e1      	bpl.n	800bc3a <__swbuf_r+0x2e>
 800bc76:	2e0a      	cmp	r6, #10
 800bc78:	d1df      	bne.n	800bc3a <__swbuf_r+0x2e>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f7ff fd85 	bl	800b78c <_fflush_r>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d0d9      	beq.n	800bc3a <__swbuf_r+0x2e>
 800bc86:	e7d6      	b.n	800bc36 <__swbuf_r+0x2a>

0800bc88 <__swsetup_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4b29      	ldr	r3, [pc, #164]	@ (800bd30 <__swsetup_r+0xa8>)
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	460c      	mov	r4, r1
 800bc92:	b118      	cbz	r0, 800bc9c <__swsetup_r+0x14>
 800bc94:	6a03      	ldr	r3, [r0, #32]
 800bc96:	b90b      	cbnz	r3, 800bc9c <__swsetup_r+0x14>
 800bc98:	f7fd ffaa 	bl	8009bf0 <__sinit>
 800bc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca0:	0719      	lsls	r1, r3, #28
 800bca2:	d422      	bmi.n	800bcea <__swsetup_r+0x62>
 800bca4:	06da      	lsls	r2, r3, #27
 800bca6:	d407      	bmi.n	800bcb8 <__swsetup_r+0x30>
 800bca8:	2209      	movs	r2, #9
 800bcaa:	602a      	str	r2, [r5, #0]
 800bcac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e033      	b.n	800bd20 <__swsetup_r+0x98>
 800bcb8:	0758      	lsls	r0, r3, #29
 800bcba:	d512      	bpl.n	800bce2 <__swsetup_r+0x5a>
 800bcbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcbe:	b141      	cbz	r1, 800bcd2 <__swsetup_r+0x4a>
 800bcc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcc4:	4299      	cmp	r1, r3
 800bcc6:	d002      	beq.n	800bcce <__swsetup_r+0x46>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7fe ff09 	bl	800aae0 <_free_r>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	6063      	str	r3, [r4, #4]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f043 0308 	orr.w	r3, r3, #8
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	b94b      	cbnz	r3, 800bd02 <__swsetup_r+0x7a>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bcf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcf8:	d003      	beq.n	800bd02 <__swsetup_r+0x7a>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f000 f882 	bl	800be06 <__smakebuf_r>
 800bd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd06:	f013 0201 	ands.w	r2, r3, #1
 800bd0a:	d00a      	beq.n	800bd22 <__swsetup_r+0x9a>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	60a2      	str	r2, [r4, #8]
 800bd10:	6962      	ldr	r2, [r4, #20]
 800bd12:	4252      	negs	r2, r2
 800bd14:	61a2      	str	r2, [r4, #24]
 800bd16:	6922      	ldr	r2, [r4, #16]
 800bd18:	b942      	cbnz	r2, 800bd2c <__swsetup_r+0xa4>
 800bd1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd1e:	d1c5      	bne.n	800bcac <__swsetup_r+0x24>
 800bd20:	bd38      	pop	{r3, r4, r5, pc}
 800bd22:	0799      	lsls	r1, r3, #30
 800bd24:	bf58      	it	pl
 800bd26:	6962      	ldrpl	r2, [r4, #20]
 800bd28:	60a2      	str	r2, [r4, #8]
 800bd2a:	e7f4      	b.n	800bd16 <__swsetup_r+0x8e>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e7f7      	b.n	800bd20 <__swsetup_r+0x98>
 800bd30:	20000198 	.word	0x20000198

0800bd34 <_raise_r>:
 800bd34:	291f      	cmp	r1, #31
 800bd36:	b538      	push	{r3, r4, r5, lr}
 800bd38:	4605      	mov	r5, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	d904      	bls.n	800bd48 <_raise_r+0x14>
 800bd3e:	2316      	movs	r3, #22
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	f04f 30ff 	mov.w	r0, #4294967295
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd4a:	b112      	cbz	r2, 800bd52 <_raise_r+0x1e>
 800bd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd50:	b94b      	cbnz	r3, 800bd66 <_raise_r+0x32>
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 f830 	bl	800bdb8 <_getpid_r>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd62:	f000 b817 	b.w	800bd94 <_kill_r>
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d00a      	beq.n	800bd80 <_raise_r+0x4c>
 800bd6a:	1c59      	adds	r1, r3, #1
 800bd6c:	d103      	bne.n	800bd76 <_raise_r+0x42>
 800bd6e:	2316      	movs	r3, #22
 800bd70:	6003      	str	r3, [r0, #0]
 800bd72:	2001      	movs	r0, #1
 800bd74:	e7e7      	b.n	800bd46 <_raise_r+0x12>
 800bd76:	2100      	movs	r1, #0
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd7e:	4798      	blx	r3
 800bd80:	2000      	movs	r0, #0
 800bd82:	e7e0      	b.n	800bd46 <_raise_r+0x12>

0800bd84 <raise>:
 800bd84:	4b02      	ldr	r3, [pc, #8]	@ (800bd90 <raise+0xc>)
 800bd86:	4601      	mov	r1, r0
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	f7ff bfd3 	b.w	800bd34 <_raise_r>
 800bd8e:	bf00      	nop
 800bd90:	20000198 	.word	0x20000198

0800bd94 <_kill_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	2300      	movs	r3, #0
 800bd98:	4d06      	ldr	r5, [pc, #24]	@ (800bdb4 <_kill_r+0x20>)
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	f7f5 fb5c 	bl	800145e <_kill>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	d102      	bne.n	800bdb0 <_kill_r+0x1c>
 800bdaa:	682b      	ldr	r3, [r5, #0]
 800bdac:	b103      	cbz	r3, 800bdb0 <_kill_r+0x1c>
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	bd38      	pop	{r3, r4, r5, pc}
 800bdb2:	bf00      	nop
 800bdb4:	200016bc 	.word	0x200016bc

0800bdb8 <_getpid_r>:
 800bdb8:	f7f5 bb4a 	b.w	8001450 <_getpid>

0800bdbc <__swhatbuf_r>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc4:	4615      	mov	r5, r2
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	461e      	mov	r6, r3
 800bdca:	b096      	sub	sp, #88	@ 0x58
 800bdcc:	da0c      	bge.n	800bde8 <__swhatbuf_r+0x2c>
 800bdce:	89a3      	ldrh	r3, [r4, #12]
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdd6:	bf14      	ite	ne
 800bdd8:	2340      	movne	r3, #64	@ 0x40
 800bdda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdde:	2000      	movs	r0, #0
 800bde0:	6031      	str	r1, [r6, #0]
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	b016      	add	sp, #88	@ 0x58
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	466a      	mov	r2, sp
 800bdea:	f000 f849 	bl	800be80 <_fstat_r>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	dbed      	blt.n	800bdce <__swhatbuf_r+0x12>
 800bdf2:	9901      	ldr	r1, [sp, #4]
 800bdf4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdf8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdfc:	4259      	negs	r1, r3
 800bdfe:	4159      	adcs	r1, r3
 800be00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be04:	e7eb      	b.n	800bdde <__swhatbuf_r+0x22>

0800be06 <__smakebuf_r>:
 800be06:	898b      	ldrh	r3, [r1, #12]
 800be08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be0a:	079d      	lsls	r5, r3, #30
 800be0c:	4606      	mov	r6, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	d507      	bpl.n	800be22 <__smakebuf_r+0x1c>
 800be12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	6123      	str	r3, [r4, #16]
 800be1a:	2301      	movs	r3, #1
 800be1c:	6163      	str	r3, [r4, #20]
 800be1e:	b003      	add	sp, #12
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	466a      	mov	r2, sp
 800be24:	ab01      	add	r3, sp, #4
 800be26:	f7ff ffc9 	bl	800bdbc <__swhatbuf_r>
 800be2a:	9f00      	ldr	r7, [sp, #0]
 800be2c:	4605      	mov	r5, r0
 800be2e:	4639      	mov	r1, r7
 800be30:	4630      	mov	r0, r6
 800be32:	f7fe fec7 	bl	800abc4 <_malloc_r>
 800be36:	b948      	cbnz	r0, 800be4c <__smakebuf_r+0x46>
 800be38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be3c:	059a      	lsls	r2, r3, #22
 800be3e:	d4ee      	bmi.n	800be1e <__smakebuf_r+0x18>
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	f043 0302 	orr.w	r3, r3, #2
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	e7e2      	b.n	800be12 <__smakebuf_r+0xc>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	9b01      	ldr	r3, [sp, #4]
 800be5a:	6020      	str	r0, [r4, #0]
 800be5c:	b15b      	cbz	r3, 800be76 <__smakebuf_r+0x70>
 800be5e:	4630      	mov	r0, r6
 800be60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be64:	f000 f81e 	bl	800bea4 <_isatty_r>
 800be68:	b128      	cbz	r0, 800be76 <__smakebuf_r+0x70>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f023 0303 	bic.w	r3, r3, #3
 800be70:	f043 0301 	orr.w	r3, r3, #1
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	431d      	orrs	r5, r3
 800be7a:	81a5      	strh	r5, [r4, #12]
 800be7c:	e7cf      	b.n	800be1e <__smakebuf_r+0x18>
	...

0800be80 <_fstat_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	2300      	movs	r3, #0
 800be84:	4d06      	ldr	r5, [pc, #24]	@ (800bea0 <_fstat_r+0x20>)
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	f7f5 fb45 	bl	800151c <_fstat>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d102      	bne.n	800be9c <_fstat_r+0x1c>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	b103      	cbz	r3, 800be9c <_fstat_r+0x1c>
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	200016bc 	.word	0x200016bc

0800bea4 <_isatty_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	2300      	movs	r3, #0
 800bea8:	4d05      	ldr	r5, [pc, #20]	@ (800bec0 <_isatty_r+0x1c>)
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	602b      	str	r3, [r5, #0]
 800beb0:	f7f5 fb43 	bl	800153a <_isatty>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	d102      	bne.n	800bebe <_isatty_r+0x1a>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	b103      	cbz	r3, 800bebe <_isatty_r+0x1a>
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	200016bc 	.word	0x200016bc

0800bec4 <_init>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	bf00      	nop
 800bec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beca:	bc08      	pop	{r3}
 800becc:	469e      	mov	lr, r3
 800bece:	4770      	bx	lr

0800bed0 <_fini>:
 800bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed2:	bf00      	nop
 800bed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed6:	bc08      	pop	{r3}
 800bed8:	469e      	mov	lr, r3
 800beda:	4770      	bx	lr
